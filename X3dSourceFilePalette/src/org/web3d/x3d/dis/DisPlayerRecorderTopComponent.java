/*
Copyright (c) 1995-2021 held by the author(s) .  All rights reserved.
 
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
 
 * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer
      in the documentation and/or other materials provided with the
      distribution.
 * Neither the names of the Naval Postgraduate School (NPS)
      Modeling Virtual Environments and Simulation (MOVES) Institute
      (http://www.nps.edu and https://MovesInstitute.nps.edu)
      nor the names of its contributors may be used to endorse or
      promote products derived from this software without specific
      prior written permission.
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
 */
package org.web3d.x3d.dis;

import java.awt.BorderLayout;
import java.io.Serializable;
import java.util.logging.Logger;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
//import org.openide.util.Utilities;
import org.web3d.x3d.dis.playerrecorder.DISPlayerRecorderPanel;
/**
 * Top component which displays something.
 */
final class DisPlayerRecorderTopComponent extends TopComponent
{
  private static DisPlayerRecorderTopComponent instance;
  /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
  private static final String PREFERRED_ID = "DisPlayerRecorderTopComponent";

  private DisPlayerRecorderTopComponent()
  {
    initComponents();
    add(new DISPlayerRecorderPanel(),BorderLayout.CENTER);
    
    setName(NbBundle.getMessage(DisPlayerRecorderTopComponent.class, "CTL_DisPlayerRecorderTopComponent"));
    setToolTipText(NbBundle.getMessage(DisPlayerRecorderTopComponent.class, "HINT_DisPlayerRecorderTopComponent"));
//        setIcon(Utilities.loadImage(ICON_PATH, true));
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    setLayout(new java.awt.BorderLayout());
  }// </editor-fold>//GEN-END:initComponents


  // Variables declaration - do not modify//GEN-BEGIN:variables
  // End of variables declaration//GEN-END:variables
  /**
   * Gets default instance. Do not use directly: reserved for *.settings files only,
   * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
   * To obtain the singleton instance, use {@link findInstance}.
   */
  public static synchronized DisPlayerRecorderTopComponent getDefault()
  {
    if (instance == null) {
      instance = new DisPlayerRecorderTopComponent();
    }
    return instance;
  }

  /**
   * Obtain the DisPlayerRecorderTopComponent instance. Never call {@link #getDefault} directly!
   */
  public static synchronized DisPlayerRecorderTopComponent findInstance()
  {
    TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
    if (win == null) {
      Logger.getLogger(DisPlayerRecorderTopComponent.class.getName()).warning(
          "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
      return getDefault();
    }
    if (win instanceof DisPlayerRecorderTopComponent) {
      return (DisPlayerRecorderTopComponent) win;
    }
    Logger.getLogger(DisPlayerRecorderTopComponent.class.getName()).warning(
        "There seem to be multiple components with the '" + PREFERRED_ID +
        "' ID. That is a potential source of errors and unexpected behavior.");
    return getDefault();
  }

  @Override
  public int getPersistenceType()
  {
    return TopComponent.PERSISTENCE_ALWAYS;
  }

  @Override
  public void componentOpened()
  {
    // TODO add custom code on component opening
    }

  @Override
  public void componentClosed()
  {
    // TODO add custom code on component closing
    }

  /** replaces this in object stream */
  @Override
  public Object writeReplace()
  {
    return new ResolvableHelper();
  }

  @Override
  protected String preferredID()
  {
    return PREFERRED_ID;
  }

  final static class ResolvableHelper implements Serializable
  {
    private static final long serialVersionUID = 1L;

    public Object readResolve()
    {
      return DisPlayerRecorderTopComponent.getDefault();
    }
  }
}
