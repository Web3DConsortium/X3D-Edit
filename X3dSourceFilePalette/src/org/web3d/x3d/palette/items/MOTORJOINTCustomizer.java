/*
Copyright (c) 1995-2021 held by the author(s) .  All rights reserved.
 
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
 
 * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer
      in the documentation and/or other materials provided with the
      distribution.
 * Neither the names of the Naval Postgraduate School (NPS)
      Modeling Virtual Environments and Simulation (MOVES) Institute
      (http://www.nps.edu and https://MovesInstitute.nps.edu)
      nor the names of its contributors may be used to endorse or
      promote products derived from this software without specific
      prior written permission.
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
 */

package org.web3d.x3d.palette.items;

import java.awt.Color;
import javax.swing.text.JTextComponent;
import org.openide.util.HelpCtx;
import static org.web3d.x3d.types.X3DPrimitiveTypes.*;

/**
 * MOTORJOINTCustomizer.java
 * Created on December 23, 2008, 10:49 AM
 *
 * MOVES Institute
 * Naval Postgraduate School, Monterey, CA, USA
 * www.nps.edu
 *
 * @author Mike Bailey, Don Brutzman
 * @version $Id$
 */
public class MOTORJOINTCustomizer extends BaseCustomizer
{
  private MOTORJOINT motorJoint;
  private JTextComponent target;
  
  /** Creates new form MOTORJOINTCustomizer */
  public MOTORJOINTCustomizer(MOTORJOINT motorJoint, JTextComponent target)
  {
    super(motorJoint);
    this.motorJoint = motorJoint;
    this.target = target;
    
    // TODO fix forceOutput interface
                              
    HelpCtx.setHelpIDString(this, "MOTORJOINT_ELEM_HELPID");   
    
    initComponents();
    
    String textValue = motorJoint.getUnformattedForceOutput();
    if (textValue.startsWith("'") && textValue.endsWith("'") && (textValue.length() > 1))
         forceOutputTA.setText(textValue.substring(1, textValue.length()-2));
    else forceOutputTA.setText(textValue);
    
    enabledAxesCB.setSelectedIndex(new SFInt32(motorJoint.getEnabledAxes(), 0, 3).getValue());
    autoCalcCB.setSelected(motorJoint.isAutoCalc());
    
    motor1AxisXTF.setText(motorJoint.getMotor1AxisX());
    motor1AxisYTF.setText(motorJoint.getMotor1AxisY());
    motor1AxisZTF.setText(motorJoint.getMotor1AxisZ());
    motor2AxisXTF.setText(motorJoint.getMotor2AxisX());
    motor2AxisYTF.setText(motorJoint.getMotor2AxisY());
    motor2AxisZTF.setText(motorJoint.getMotor2AxisZ());
    motor3AxisXTF.setText(motorJoint.getMotor3AxisX());
    motor3AxisYTF.setText(motorJoint.getMotor3AxisY());
    motor3AxisZTF.setText(motorJoint.getMotor3AxisZ());
    
    axis1AngleTF.setText(motorJoint.getAxis1Angle());
    axis2AngleTF.setText(motorJoint.getAxis2Angle());
    axis3AngleTF.setText(motorJoint.getAxis3Angle());
    axis1TorqueTF.setText(motorJoint.getAxis1Torque());
    axis2TorqueTF.setText(motorJoint.getAxis2Torque());
    axis3TorqueTF.setText(motorJoint.getAxis3Torque());
    stop1BounceTF.setText(motorJoint.getStop1Bounce());
    stop2BounceTF.setText(motorJoint.getStop2Bounce());
    stop3BounceTF.setText(motorJoint.getStop3Bounce());
    stop1ErrorCorrectionTF.setText(motorJoint.getStop1ErrorCorrection());
    stop2ErrorCorrectionTF.setText(motorJoint.getStop2ErrorCorrection());
    stop3ErrorCorrectionTF.setText(motorJoint.getStop3ErrorCorrection());
    
    enableSubPanels ();
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        dEFUSEpanel1 = getDEFUSEpanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        forceOutputTA = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        enabledAxesCB = new javax.swing.JComboBox<String>();
        jLabel21 = new javax.swing.JLabel();
        autoCalcCB = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        motor1AxisLab = new javax.swing.JLabel();
        motor1AxisXTF = new javax.swing.JTextField();
        motor1AxisYTF = new javax.swing.JTextField();
        motor1AxisZTF = new javax.swing.JTextField();
        axis1AngLab = new javax.swing.JLabel();
        axis1AngleTF = new javax.swing.JTextField();
        stop1BounceTF = new javax.swing.JTextField();
        stop1BounceLab = new javax.swing.JLabel();
        axis1TorqLab = new javax.swing.JLabel();
        axis1TorqueTF = new javax.swing.JTextField();
        stop1ErrorCorrectionTF = new javax.swing.JTextField();
        stop1ErrCorLab = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        motor2AxisXTF = new javax.swing.JTextField();
        motor2AxisYTF = new javax.swing.JTextField();
        motor2AxisZTF = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        axis2AngleTF = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        stop2BounceTF = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        axis2TorqueTF = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        stop2ErrorCorrectionTF = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        motor3AxisXTF = new javax.swing.JTextField();
        motor3AxisYTF = new javax.swing.JTextField();
        motor3AxisZTF = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        axis3AngleTF = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        stop3BounceTF = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        axis3TorqueTF = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        stop3ErrorCorrectionTF = new javax.swing.JTextField();

        setToolTipText("motor axis vector (0..1)");
        setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(dEFUSEpanel1, gridBagConstraints);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel1.setText("forceOutput");
        jLabel1.setToolTipText("output fields generated for next frame: ALL, NONE, or exact names of output fields");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(jLabel1, gridBagConstraints);

        jScrollPane1.setToolTipText("output fields generated for next frame: ALL, NONE, or exact names of output fields");

        forceOutputTA.setColumns(20);
        forceOutputTA.setRows(2);
        forceOutputTA.setToolTipText("output fields generated for next frame: ALL, NONE, or exact names of output fields");
        jScrollPane1.setViewportView(forceOutputTA);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(jScrollPane1, gridBagConstraints);

        jLabel7.setText("enabledAxes");
        jLabel7.setToolTipText("which motor axes are active: (0) none, (1) axis 1, (2) axes 1 and 2, or (3) all three axes. ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(jLabel7, gridBagConstraints);

        enabledAxesCB.setModel(new javax.swing.DefaultComboBoxModel<String>(new String[] { "0", "1", "2", "3" }));
        enabledAxesCB.setToolTipText("which motor axes are active: (0) none, (1) axis 1, (2) axes 1 and 2, or (3) all three axes. ");
        enabledAxesCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enabledAxesCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(enabledAxesCB, gridBagConstraints);

        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel21.setText("autoCalc");
        jLabel21.setToolTipText("whether user manually provides individual angle rotations each frame (false) or if angle values are automatically calculated by motor implementations (true)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 30, 3, 3);
        add(jLabel21, gridBagConstraints);

        autoCalcCB.setToolTipText("whether user manually provides individual angle rotations each frame (false) or if angle values are automatically calculated by motor implementations (true)");
        autoCalcCB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(autoCalcCB, gridBagConstraints);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("1"));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        motor1AxisLab.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        motor1AxisLab.setText("motor1Axis");
        motor1AxisLab.setToolTipText("motor axis vector (0..1)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 30, 3, 3);
        jPanel1.add(motor1AxisLab, gridBagConstraints);

        motor1AxisXTF.setColumns(5);
        motor1AxisXTF.setToolTipText("motor axis vector (0..1)");
        motor1AxisXTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                motor1AxisXTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel1.add(motor1AxisXTF, gridBagConstraints);

        motor1AxisYTF.setColumns(5);
        motor1AxisYTF.setToolTipText("motor axis vector (0..1)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel1.add(motor1AxisYTF, gridBagConstraints);

        motor1AxisZTF.setColumns(5);
        motor1AxisZTF.setToolTipText("motor axis vector (0..1)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel1.add(motor1AxisZTF, gridBagConstraints);

        axis1AngLab.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        axis1AngLab.setText("axis1Angle");
        axis1AngLab.setToolTipText("rotation angle when in user-calculated mode");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 30, 3, 3);
        jPanel1.add(axis1AngLab, gridBagConstraints);

        axis1AngleTF.setColumns(5);
        axis1AngleTF.setToolTipText("rotation angle when in user-calculated mode");
        axis1AngleTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                axis1AngleTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel1.add(axis1AngleTF, gridBagConstraints);

        stop1BounceTF.setColumns(5);
        stop1BounceTF.setToolTipText("velocity factor for bounce back once stop point is reached");
        stop1BounceTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stop1BounceTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel1.add(stop1BounceTF, gridBagConstraints);

        stop1BounceLab.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        stop1BounceLab.setText("stop1Bounce");
        stop1BounceLab.setToolTipText("velocity factor for bounce back once stop point is reached");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel1.add(stop1BounceLab, gridBagConstraints);

        axis1TorqLab.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        axis1TorqLab.setText("axis1Torque");
        axis1TorqLab.setToolTipText("rotational torque applied when in user-calculated mode");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 30, 3, 3);
        jPanel1.add(axis1TorqLab, gridBagConstraints);

        axis1TorqueTF.setColumns(5);
        axis1TorqueTF.setToolTipText("rotational torque applied when in user-calculated mode");
        axis1TorqueTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                axis1TorqueTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel1.add(axis1TorqueTF, gridBagConstraints);

        stop1ErrorCorrectionTF.setColumns(5);
        stop1ErrorCorrectionTF.setToolTipText("fraction of error correction performed during time step once stop point is reached (0 = no error correction, 1 = all error corrected in single step)");
        stop1ErrorCorrectionTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stop1ErrorCorrectionTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel1.add(stop1ErrorCorrectionTF, gridBagConstraints);

        stop1ErrCorLab.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        stop1ErrCorLab.setText("stop1ErrorCorrection");
        stop1ErrCorLab.setToolTipText("fraction of error correction performed during time step once stop point is reached (0 = no error correction, 1 = all error corrected in single step)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel1.add(stop1ErrCorLab, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(jPanel1, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("2"));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel8.setText("motor2Axis");
        jLabel8.setToolTipText("motor axis vector (0..1)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 30, 3, 3);
        jPanel2.add(jLabel8, gridBagConstraints);

        motor2AxisXTF.setColumns(5);
        motor2AxisXTF.setToolTipText("motor axis vector (0..1)");
        motor2AxisXTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                motor2AxisXTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel2.add(motor2AxisXTF, gridBagConstraints);

        motor2AxisYTF.setColumns(5);
        motor2AxisYTF.setToolTipText("motor axis vector (0..1)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel2.add(motor2AxisYTF, gridBagConstraints);

        motor2AxisZTF.setColumns(5);
        motor2AxisZTF.setToolTipText("motor axis vector (0..1)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel2.add(motor2AxisZTF, gridBagConstraints);

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel9.setText("axis2Angle");
        jLabel9.setToolTipText("rotation angle when in user-calculated mode");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 30, 3, 3);
        jPanel2.add(jLabel9, gridBagConstraints);

        axis2AngleTF.setColumns(5);
        axis2AngleTF.setToolTipText("rotation angle when in user-calculated mode");
        axis2AngleTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                axis2AngleTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel2.add(axis2AngleTF, gridBagConstraints);

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel12.setText("stop2Bounce");
        jLabel12.setToolTipText("velocity factor for bounce back once stop point is reached");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel2.add(jLabel12, gridBagConstraints);

        stop2BounceTF.setColumns(5);
        stop2BounceTF.setToolTipText("velocity factor for bounce back once stop point is reached");
        stop2BounceTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stop2BounceTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel2.add(stop2BounceTF, gridBagConstraints);

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel10.setText("axis2Torque");
        jLabel10.setToolTipText("rotational torque applied when in user-calculated mode");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 30, 3, 3);
        jPanel2.add(jLabel10, gridBagConstraints);

        axis2TorqueTF.setColumns(5);
        axis2TorqueTF.setToolTipText("rotational torque applied when in user-calculated mode");
        axis2TorqueTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                axis2TorqueTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel2.add(axis2TorqueTF, gridBagConstraints);

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel11.setText("stop2ErrorCorrection");
        jLabel11.setToolTipText("fraction of error correction performed during time step once stop point is reached (0 = no error correction, 1 = all error corrected in single step)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel2.add(jLabel11, gridBagConstraints);

        stop2ErrorCorrectionTF.setColumns(5);
        stop2ErrorCorrectionTF.setToolTipText("fraction of error correction performed during time step once stop point is reached (0 = no error correction, 1 = all error corrected in single step)");
        stop2ErrorCorrectionTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stop2ErrorCorrectionTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel2.add(stop2ErrorCorrectionTF, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(jPanel2, gridBagConstraints);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("3"));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel13.setText("motor3Axis");
        jLabel13.setToolTipText("motor axis vector (0..1)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 30, 3, 3);
        jPanel3.add(jLabel13, gridBagConstraints);

        motor3AxisXTF.setEditable(false);
        motor3AxisXTF.setBackground(new java.awt.Color(255, 255, 255));
        motor3AxisXTF.setColumns(5);
        motor3AxisXTF.setToolTipText("motor axis vector (0..1)");
        motor3AxisXTF.setHighlighter(null);
        motor3AxisXTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                motor3AxisXTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel3.add(motor3AxisXTF, gridBagConstraints);

        motor3AxisYTF.setEditable(false);
        motor3AxisYTF.setBackground(new java.awt.Color(255, 255, 255));
        motor3AxisYTF.setColumns(5);
        motor3AxisYTF.setToolTipText("motor axis vector (0..1)");
        motor3AxisYTF.setHighlighter(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel3.add(motor3AxisYTF, gridBagConstraints);

        motor3AxisZTF.setEditable(false);
        motor3AxisZTF.setBackground(new java.awt.Color(255, 255, 255));
        motor3AxisZTF.setColumns(5);
        motor3AxisZTF.setToolTipText("motor axis vector (0..1)");
        motor3AxisZTF.setHighlighter(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel3.add(motor3AxisZTF, gridBagConstraints);

        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel17.setText("axis3Angle");
        jLabel17.setToolTipText("rotation angle when in user-calculated mode");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 30, 3, 3);
        jPanel3.add(jLabel17, gridBagConstraints);

        axis3AngleTF.setEditable(false);
        axis3AngleTF.setBackground(new java.awt.Color(255, 255, 255));
        axis3AngleTF.setColumns(5);
        axis3AngleTF.setToolTipText("rotation angle when in user-calculated mode");
        axis3AngleTF.setHighlighter(null);
        axis3AngleTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                axis3AngleTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel3.add(axis3AngleTF, gridBagConstraints);

        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel16.setText("stop3Bounce");
        jLabel16.setToolTipText("velocity factor for bounce back once stop point is reached");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel3.add(jLabel16, gridBagConstraints);

        stop3BounceTF.setColumns(5);
        stop3BounceTF.setToolTipText("velocity factor for bounce back once stop point is reached");
        stop3BounceTF.setHighlighter(null);
        stop3BounceTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stop3BounceTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel3.add(stop3BounceTF, gridBagConstraints);

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel14.setText("axis3Torque");
        jLabel14.setToolTipText("rotational torque applied when in user-calculated mode");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 30, 3, 3);
        jPanel3.add(jLabel14, gridBagConstraints);

        axis3TorqueTF.setEditable(false);
        axis3TorqueTF.setBackground(new java.awt.Color(255, 255, 255));
        axis3TorqueTF.setColumns(5);
        axis3TorqueTF.setToolTipText("rotational torque applied when in user-calculated mode");
        axis3TorqueTF.setHighlighter(null);
        axis3TorqueTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                axis3TorqueTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel3.add(axis3TorqueTF, gridBagConstraints);

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel15.setText("stop3ErrorCorrection");
        jLabel15.setToolTipText("fraction of error correction performed during time step once stop point is reached (0 = no error correction, 1 = all error corrected in single step)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel3.add(jLabel15, gridBagConstraints);

        stop3ErrorCorrectionTF.setColumns(5);
        stop3ErrorCorrectionTF.setToolTipText("fraction of error correction performed during time step once stop point is reached (0 = no error correction, 1 = all error corrected in single step)");
        stop3ErrorCorrectionTF.setHighlighter(null);
        stop3ErrorCorrectionTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stop3ErrorCorrectionTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel3.add(stop3ErrorCorrectionTF, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(jPanel3, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

private void motor1AxisXTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_motor1AxisXTFActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_motor1AxisXTFActionPerformed

private void axis1AngleTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_axis1AngleTFActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_axis1AngleTFActionPerformed

private void axis1TorqueTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_axis1TorqueTFActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_axis1TorqueTFActionPerformed

private void stop1BounceTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stop1BounceTFActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_stop1BounceTFActionPerformed

private void stop1ErrorCorrectionTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stop1ErrorCorrectionTFActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_stop1ErrorCorrectionTFActionPerformed

private void motor2AxisXTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_motor2AxisXTFActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_motor2AxisXTFActionPerformed

private void axis2AngleTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_axis2AngleTFActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_axis2AngleTFActionPerformed

private void axis2TorqueTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_axis2TorqueTFActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_axis2TorqueTFActionPerformed

private void stop2BounceTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stop2BounceTFActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_stop2BounceTFActionPerformed

private void stop2ErrorCorrectionTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stop2ErrorCorrectionTFActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_stop2ErrorCorrectionTFActionPerformed

private void stop3BounceTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stop3BounceTFActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_stop3BounceTFActionPerformed

private void stop3ErrorCorrectionTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stop3ErrorCorrectionTFActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_stop3ErrorCorrectionTFActionPerformed

private void axis3TorqueTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_axis3TorqueTFActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_axis3TorqueTFActionPerformed

private void motor3AxisXTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_motor3AxisXTFActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_motor3AxisXTFActionPerformed

private void axis3AngleTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_axis3AngleTFActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_axis3AngleTFActionPerformed

    private void enabledAxesCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enabledAxesCBActionPerformed
        enableSubPanels ();
    }//GEN-LAST:event_enabledAxesCBActionPerformed
  
    private void enableSubPanels ()
    {
        Color backgroundColor = this.getBackground();
        int axes = enabledAxesCB.getSelectedIndex();
        switch (axes)
        {
            case 0:
                jPanel1.setBackground(Color.LIGHT_GRAY);
                jPanel2.setBackground(Color.LIGHT_GRAY);
                jPanel3.setBackground(Color.LIGHT_GRAY);
                jPanel1.setToolTipText("all axis settings are inactive when enabledAxes=" + axes);
                jPanel2.setToolTipText("all axis settings are inactive when enabledAxes=" + axes);
                jPanel3.setToolTipText("all axis settings are inactive when enabledAxes=" + axes);
                break;
            case 1:
                jPanel1.setBackground(backgroundColor);
                jPanel2.setBackground(Color.LIGHT_GRAY);
                jPanel3.setBackground(Color.LIGHT_GRAY);
                jPanel1.setToolTipText("axis #1 settings are active when enabledAxes="   + axes);
                jPanel2.setToolTipText("axis #2 settings are inactive when enabledAxes=" + axes);
                jPanel3.setToolTipText("axis #3 settings are inactive when enabledAxes=" + axes);
                break;
            case 2:
                jPanel1.setBackground(backgroundColor);
                jPanel2.setBackground(backgroundColor);
                jPanel3.setBackground(Color.LIGHT_GRAY);
                jPanel1.setToolTipText("axis #1 settings are active when enabledAxes="   + axes);
                jPanel2.setToolTipText("axis #2 settings are active when enabledAxes="   + axes);
                jPanel3.setToolTipText("axis #3 settings are inactive when enabledAxes=" + axes);
                break;
            case 3:
                jPanel1.setBackground(backgroundColor);
                jPanel2.setBackground(backgroundColor);
                jPanel3.setBackground(backgroundColor);
                jPanel1.setToolTipText("all axis settings are active when enabledAxes="   + axes);
                jPanel2.setToolTipText("all axis settings are active when enabledAxes="   + axes);
                jPanel3.setToolTipText("all axis settings are active when enabledAxes="   + axes);
                break;
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox autoCalcCB;
    private javax.swing.JLabel axis1AngLab;
    private javax.swing.JTextField axis1AngleTF;
    private javax.swing.JLabel axis1TorqLab;
    private javax.swing.JTextField axis1TorqueTF;
    private javax.swing.JTextField axis2AngleTF;
    private javax.swing.JTextField axis2TorqueTF;
    private javax.swing.JTextField axis3AngleTF;
    private javax.swing.JTextField axis3TorqueTF;
    private org.web3d.x3d.palette.items.DEFUSEpanel dEFUSEpanel1;
    private javax.swing.JComboBox<String> enabledAxesCB;
    private javax.swing.JTextArea forceOutputTA;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel motor1AxisLab;
    private javax.swing.JTextField motor1AxisXTF;
    private javax.swing.JTextField motor1AxisYTF;
    private javax.swing.JTextField motor1AxisZTF;
    private javax.swing.JTextField motor2AxisXTF;
    private javax.swing.JTextField motor2AxisYTF;
    private javax.swing.JTextField motor2AxisZTF;
    private javax.swing.JTextField motor3AxisXTF;
    private javax.swing.JTextField motor3AxisYTF;
    private javax.swing.JTextField motor3AxisZTF;
    private javax.swing.JLabel stop1BounceLab;
    private javax.swing.JTextField stop1BounceTF;
    private javax.swing.JLabel stop1ErrCorLab;
    private javax.swing.JTextField stop1ErrorCorrectionTF;
    private javax.swing.JTextField stop2BounceTF;
    private javax.swing.JTextField stop2ErrorCorrectionTF;
    private javax.swing.JTextField stop3BounceTF;
    private javax.swing.JTextField stop3ErrorCorrectionTF;
    // End of variables declaration//GEN-END:variables
 
  @Override
  public String getNameKey()
  {
    return "NAME_X3D_MOTORJOINT";
  }

  @Override
  public void unloadInput() throws IllegalArgumentException
  {
    motorJoint.setForceOutput(forceOutputTA.getText().trim());
    
    motorJoint.setEnabledAxes(String.valueOf(enabledAxesCB.getSelectedIndex()));
    motorJoint.setAutoCalc(autoCalcCB.isSelected());
    
    motorJoint.setMotor1AxisX(motor1AxisXTF.getText().trim());
    motorJoint.setMotor1AxisY(motor1AxisYTF.getText().trim());
    motorJoint.setMotor1AxisZ(motor1AxisZTF.getText().trim());
    motorJoint.setMotor2AxisX(motor2AxisXTF.getText().trim());
    motorJoint.setMotor2AxisY(motor2AxisYTF.getText().trim());
    motorJoint.setMotor2AxisZ(motor2AxisZTF.getText().trim());
    motorJoint.setMotor3AxisX(motor3AxisXTF.getText().trim());
    motorJoint.setMotor3AxisY(motor3AxisYTF.getText().trim());
    motorJoint.setMotor3AxisZ(motor3AxisZTF.getText().trim());
    
    motorJoint.setAxis1Angle(axis1AngleTF.getText().trim());
    motorJoint.setAxis2Angle(axis2AngleTF.getText().trim());
    motorJoint.setAxis3Angle(axis3AngleTF.getText().trim());
    motorJoint.setAxis1Torque(axis1TorqueTF.getText().trim());
    motorJoint.setAxis2Torque(axis2TorqueTF.getText().trim());
    motorJoint.setAxis3Torque(axis3TorqueTF.getText().trim());
    motorJoint.setStop1Bounce(stop1BounceTF.getText().trim());
    motorJoint.setStop2Bounce(stop2BounceTF.getText().trim());
    motorJoint.setStop3Bounce(stop3BounceTF.getText().trim());
    motorJoint.setStop1ErrorCorrection(stop1ErrorCorrectionTF.getText().trim());   
    motorJoint.setStop2ErrorCorrection(stop2ErrorCorrectionTF.getText().trim());   
    motorJoint.setStop3ErrorCorrection(stop3ErrorCorrectionTF.getText().trim());    
  }
}
