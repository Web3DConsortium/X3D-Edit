/*
Copyright (c) 1995-2022 held by the author(s) .  All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

 * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer
      in the documentation and/or other materials provided with the
      distribution.
 * Neither the names of the Naval Postgraduate School (NPS)
      Modeling Virtual Environments and Simulation (MOVES) Institute
      (http://www.nps.edu and https://MovesInstitute.nps.edu)
      nor the names of its contributors may be used to endorse or
      promote products derived from this software without specific
      prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
 */

package org.web3d.x3d.palette.items;
import java.awt.Color;
import javax.swing.DefaultComboBoxModel;
import javax.swing.text.JTextComponent;
import org.openide.util.HelpCtx;
import static org.web3d.x3d.types.X3DSchemaData.*;

/**
 * X3DCustomizer.java
 * Created on March 7, 2008, 2:46 PM
 *
 * MOVES Institute
 * Naval Postgraduate School, Monterey, CA, USA
 * www.nps.edu
 *
 * @author Mike Bailey, Don Brutzman
 * @version $Id$
 */
public class X3DCustomizer extends BaseCustomizer
{
  private final X3D x3d;
  private final JTextComponent target;

  public X3DCustomizer(X3D x3d, JTextComponent target)
  {
    super(x3d);
    this.x3d = x3d;
    this.target = target;

    HelpCtx.setHelpIDString(X3DCustomizer.this, "X3D_ELEM_X3DID");

    initComponents();

    profileComboBox.setSelectedItem(x3d.getProfile());
    versionComboBox.setSelectedItem(x3d.getVersion());
    
    // TODO add attributes used for X3DOM export during inclusion in HTML page
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        attributesPanel = new javax.swing.JPanel();
        versionLabel = new javax.swing.JLabel();
        versionComboBox = new javax.swing.JComboBox<>();
        versionHintLabel = new javax.swing.JLabel();
        profileLabel = new javax.swing.JLabel();
        profileComboBox = new javax.swing.JComboBox<>();
        nodeHintLabel1 = new javax.swing.JLabel();
        followerFigureLabel = new javax.swing.JLabel();
        followerFigureLabel1 = new javax.swing.JLabel();
        nodeHintLabel2 = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(580, 600));
        setPreferredSize(new java.awt.Dimension(580, 600));
        setLayout(new java.awt.GridBagLayout());

        attributesPanel.setLayout(new java.awt.GridBagLayout());

        versionLabel.setText("<html> <p>X3D&nbsp; <i>version</i> </p> </html>");
        versionLabel.setToolTipText("X3D Specification version for this scene, required");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        attributesPanel.add(versionLabel, gridBagConstraints);

        versionComboBox.setEditable(true);
        versionComboBox.setModel(new DefaultComboBoxModel<>(X3D_ATTR_VERSION_CHOICES));
        versionComboBox.setToolTipText("X3D Specification version for this scene, required");
        versionComboBox.setMaximumSize(new java.awt.Dimension(40, 22));
        versionComboBox.setMinimumSize(new java.awt.Dimension(40, 22));
        versionComboBox.setPreferredSize(new java.awt.Dimension(30, 22));
        versionComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                versionComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        attributesPanel.add(versionComboBox, gridBagConstraints);

        versionHintLabel.setText("Recommended");
        versionHintLabel.setToolTipText("version hint");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        attributesPanel.add(versionHintLabel, gridBagConstraints);

        profileLabel.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        profileLabel.setText("profile");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 13, 3, 3);
        attributesPanel.add(profileLabel, gridBagConstraints);

        profileComboBox.setEditable(true);
        profileComboBox.setModel(new DefaultComboBoxModel<>(X3D_ATTR_PROFILE_CHOICES));
        profileComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                profileComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        attributesPanel.add(profileComboBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        add(attributesPanel, gridBagConstraints);

        nodeHintLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        nodeHintLabel1.setText("<html> <hr /> <p><b>X3D</b> is the root XML element for an X3D scene graph, containing <b>head</b> and <b>Scene</b> elements.</p> <hr />  <p> &nbsp; &nbsp; <i>version</i> value is required, and <i>version</i> <b>4.0</b> is recommended</i></li> </ul> <hr /> <p> &nbsp; &nbsp; <i>profile</i> value tells an X3D application how large the node vocabulary might be for this scene. </p> <ul> <li><i>profile</i> <b>Core</b>: <i>Empty profile containing only Metadata nodes</i></li> <li><i>profile</i> <b>Interchange</b>: <i>Minimum set of nodes to author lightweight compelling content</i></li> <li><i>profile</i> <b>Interactive</b>: <i>Interchange geometry plus simple user interaction</i></li> <li><i>profile</i> <b>Immersive</b>: <i>is common and approximately matches VRML97 with Script and Prototypes</i></li> <li><i>profile</i> <b>CADInterchange</b>: <i>Basic models plus computer-aided design (CAD) model distillation</i></li> <li><i>profile</i> <b>MedicalInterchange</b>: <i>Interchange support plus VolumeRendering for medical records</i></li> <li><i>profile</i> <b>Full</b>: <i>contains all nodes defined in X3D specification.</i></li> </ul> <hr /> </html>");
        nodeHintLabel1.setToolTipText("close this panel to addor modify children nodes");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.insets = new java.awt.Insets(3, 6, 3, 6);
        add(nodeHintLabel1, gridBagConstraints);

        followerFigureLabel.setBackground(new java.awt.Color(255, 255, 255));
        followerFigureLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        followerFigureLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/web3d/x3d/palette/items/resources/X3dVersionsOnionDiagram_01_03.half.png"))); // NOI18N
        followerFigureLabel.setToolTipText("X3D profiles (the \"Onion\" diagram)");
        followerFigureLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        followerFigureLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 3, 3, 3));
        followerFigureLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        followerFigureLabel.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(followerFigureLabel, gridBagConstraints);

        followerFigureLabel1.setBackground(new java.awt.Color(255, 255, 255));
        followerFigureLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        followerFigureLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/web3d/x3d/palette/items/resources/HelloSceneGraphStructure.visio.png"))); // NOI18N
        followerFigureLabel1.setToolTipText("X3D scene graph structure");
        followerFigureLabel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 3, 3, 3));
        followerFigureLabel1.setMaximumSize(new java.awt.Dimension(302, 129));
        followerFigureLabel1.setMinimumSize(new java.awt.Dimension(302, 129));
        followerFigureLabel1.setPreferredSize(new java.awt.Dimension(302, 129));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 6, 3, 6);
        add(followerFigureLabel1, gridBagConstraints);

        nodeHintLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        nodeHintLabel2.setText("<html>  <p>Add <b>head</b> with <b>component</b> elements to support additional nodes above a given profile.</p> <p>Add <b>head</b> with <b>unit</b> elements to provide unit conversions for numeric data.</p> <p>Add <b>head</b> with <b>meta</b> elements to provide metadata about this document.</p> <p>Add <b>Scene</b> element to contain X3D shapes, animation and interaction.</p> <p>&nbsp;</p> <p> Validation checkmark button confirms X3D version, profile, components for a scene.</p>");
        nodeHintLabel2.setToolTipText("close this panel to addor modify children nodes");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 7;
        gridBagConstraints.ipady = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE;
        gridBagConstraints.insets = new java.awt.Insets(3, 46, 3, 6);
        add(nodeHintLabel2, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void versionComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_versionComboBoxActionPerformed
        int versionIndex = versionComboBox.getSelectedIndex();
        
        if (versionIndex == -1) // not selected
        {
                 versionHintLabel.setText("REQUIRED");
                 versionHintLabel.setForeground(Color.RED);
                 return;
        }
        
        versionHintLabel.setText(X3D_ATTR_VERSION_HINTS[versionIndex]);
        if      (versionComboBox.getSelectedIndex() <= 2) // 3.0, 3.1, 3.2
        {
                 versionHintLabel.setForeground(Color.BLACK);
        }
        else if (versionComboBox.getSelectedIndex() == 3) // 3.3
        {
                 versionHintLabel.setForeground(new Color(0,128,0)); // dark green
        }
        else if (versionComboBox.getSelectedIndex() > 3) // 4.0, 4.1
        {
                 versionHintLabel.setForeground(new Color(128, 64, 12)); // dark Orange
        }
    }//GEN-LAST:event_versionComboBoxActionPerformed

    private void profileComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_profileComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_profileComboBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel attributesPanel;
    private javax.swing.JLabel followerFigureLabel;
    private javax.swing.JLabel followerFigureLabel1;
    private javax.swing.JLabel nodeHintLabel1;
    private javax.swing.JLabel nodeHintLabel2;
    private javax.swing.JComboBox<String> profileComboBox;
    private javax.swing.JLabel profileLabel;
    private javax.swing.JComboBox<String> versionComboBox;
    private javax.swing.JLabel versionHintLabel;
    private javax.swing.JLabel versionLabel;
    // End of variables declaration//GEN-END:variables

  @Override
  public String getNameKey()
  {
    return "NAME_X3D_X3D";
  }

  @Override
  public void unloadInput()
  {
      x3d.setProfile (((String) profileComboBox.getSelectedItem()).trim());
      x3d.setVersion (((String) versionComboBox.getSelectedItem()).trim());
      int  versionIndex = versionComboBox.getSelectedIndex();
      if ((versionIndex >= 0) && (versionIndex <= 5)) // 3.0, 3.1, 3.2, 3.3, 4.0, 4.1
      {
          x3d.setXsd_noNamespaceSchemaLocation((X3D_ATTR_XSDNONAMESPACESCHEMALOCATION_CHOICES[versionIndex]).trim());
      }
      // TODO update X3D-Edit meta tag to match version number, if needed
  }
}
