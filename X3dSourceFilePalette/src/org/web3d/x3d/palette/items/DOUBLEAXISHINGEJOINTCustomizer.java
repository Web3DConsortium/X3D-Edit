/*
Copyright (c) 1995-2021 held by the author(s) .  All rights reserved.
 
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
 
 * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer
      in the documentation and/or other materials provided with the
      distribution.
 * Neither the names of the Naval Postgraduate School (NPS)
      Modeling Virtual Environments and Simulation (MOVES) Institute
      (http://www.nps.edu and https://MovesInstitute.nps.edu)
      nor the names of its contributors may be used to endorse or
      promote products derived from this software without specific
      prior written permission.
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
 */

package org.web3d.x3d.palette.items;

import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.text.JTextComponent;
import org.openide.util.HelpCtx;

/**
 * DOUBLEAXISHINGEJOINTCustomizer.java
 * Created on 4 January 2009
 *
 * MOVES Institute
 * Naval Postgraduate School, Monterey, CA, USA
 * www.nps.edu
 *
 * @author Mike Bailey, Don Brutzman
 * @version $Id$
 */
public class DOUBLEAXISHINGEJOINTCustomizer extends BaseCustomizer
{
  private DOUBLEAXISHINGEJOINT doublexisHingeJoint;
  private JTextComponent target;
  
  /** Creates new form DOUBLEAXISHINGEJOINTCustomizer */
  public DOUBLEAXISHINGEJOINTCustomizer(DOUBLEAXISHINGEJOINT doubleAxisHingeJoint, JTextComponent target)
  {
    super(doubleAxisHingeJoint);
    this.doublexisHingeJoint = doubleAxisHingeJoint;
    this.target = target;
                              
    HelpCtx.setHelpIDString(this, "DOUBLEAXISHINGEJOINT_ELEM_HELPID");   
    
    initComponents();
    
    String textValue = doubleAxisHingeJoint.getUnformattedForceOutput();
    if (textValue.startsWith("'") && textValue.endsWith("'") && (textValue.length() > 1))
         forceOutputTA.setText(textValue.substring(1, textValue.length()-2));
    else forceOutputTA.setText(textValue);
    
    anchorPointXTF.setText(doubleAxisHingeJoint.getAnchorPointX());
    anchorPointYTF.setText(doubleAxisHingeJoint.getAnchorPointY());
    anchorPointZTF.setText(doubleAxisHingeJoint.getAnchorPointZ());
    
    axis1XTF.setText(doubleAxisHingeJoint.getAxis1X());
    axis1YTF.setText(doubleAxisHingeJoint.getAxis1Y());
    axis1ZTF.setText(doubleAxisHingeJoint.getAxis1Z());
    axis2XTF.setText(doubleAxisHingeJoint.getAxis2X());
    axis2YTF.setText(doubleAxisHingeJoint.getAxis2Y());
    axis2ZTF.setText(doubleAxisHingeJoint.getAxis2Z());
    
    desiredAngularVelocity1TF.setText(doubleAxisHingeJoint.getDesiredAngularVelocity1());
    desiredAngularVelocity2TF.setText(doubleAxisHingeJoint.getDesiredAngularVelocity2());
    
    maxAngle1TF.setText(doubleAxisHingeJoint.getMaxAngle1());
    maxTorque1TF.setText(doubleAxisHingeJoint.getMaxTorque1());
    maxTorque2TF.setText(doubleAxisHingeJoint.getMaxTorque2());
    minAngle1TF.setText(doubleAxisHingeJoint.getMinAngle1());
    
    stop1BounceTF.setText(doubleAxisHingeJoint.getStop1Bounce());
    stop1ErrorCorrectionTF.setText(doubleAxisHingeJoint.getStop1ErrorCorrection());
    stop1ConstantForceMixTF.setText(doubleAxisHingeJoint.getStop1ConstantForceMix());
    suspensionErrorCorrectionTF.setText(doubleAxisHingeJoint.getSuspensionErrorCorrection());
    suspensionForceTF.setText(doubleAxisHingeJoint.getSuspensionForce());
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    GridBagConstraints gridBagConstraints;

    dEFUSEpanel1 = getDEFUSEpanel();
    forceOutputLab = new JLabel();
    forceOutputSP = new JScrollPane();
    forceOutputTA = new JTextArea();
    anchorPointLab = new JLabel();
    anchorPointXTF = new JTextField();
    anchorPointYTF = new JTextField();
    anchorPointZTF = new JTextField();
    suspensionForceLab = new JLabel();
    suspensionForceTF = new JTextField();
    suspensionForceCorrLab = new JLabel();
    suspensionErrorCorrectionTF = new JTextField();
    axis1Pan = new JPanel();
    axis1Lab = new JLabel();
    axis1XTF = new JTextField();
    axis1YTF = new JTextField();
    axis1ZTF = new JTextField();
    maxTorq1Lab = new JLabel();
    maxTorque1TF = new JTextField();
    stop1BounceLab = new JLabel();
    stop1BounceTF = new JTextField();
    desireAngVel1Lab = new JLabel();
    desiredAngularVelocity1TF = new JTextField();
    stop1ErrCorrLab = new JLabel();
    stop1ErrorCorrectionTF = new JTextField();
    minAngle1Lab = new JLabel();
    minAngle1TF = new JTextField();
    stop1ConstForceMixLab = new JLabel();
    stop1ConstantForceMixTF = new JTextField();
    maxAngle1Lab = new JLabel();
    maxAngle1TF = new JTextField();
    jPanel1 = new JPanel();
    axis2Label = new JLabel();
    axis2XTF = new JTextField();
    axis2YTF = new JTextField();
    axis2ZTF = new JTextField();
    maxTorq2Lab = new JLabel();
    maxTorque2TF = new JTextField();
    desiredAngVel2Lab = new JLabel();
    desiredAngularVelocity2TF = new JTextField();

    setToolTipText("motor axis vector (0..1)");
    setLayout(new GridBagLayout());
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridwidth = GridBagConstraints.REMAINDER;
    gridBagConstraints.insets = new Insets(3, 3, 3, 3);
    add(dEFUSEpanel1, gridBagConstraints);

    forceOutputLab.setHorizontalAlignment(SwingConstants.TRAILING);
    forceOutputLab.setText("forceOutput");
    forceOutputLab.setToolTipText("output fields generated for next frame: ALL, NONE, or exact names of output fields");
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.anchor = GridBagConstraints.EAST;
    gridBagConstraints.insets = new Insets(3, 3, 3, 3);
    add(forceOutputLab, gridBagConstraints);

    forceOutputSP.setToolTipText("output fields generated for next frame: ALL, NONE, or exact names of output fields");

    forceOutputTA.setColumns(20);
    forceOutputTA.setRows(2);
    forceOutputTA.setToolTipText("output fields generated for next frame: ALL, NONE, or exact names of output fields");
    forceOutputSP.setViewportView(forceOutputTA);

    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.gridwidth = GridBagConstraints.REMAINDER;
    gridBagConstraints.fill = GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new Insets(3, 3, 3, 3);
    add(forceOutputSP, gridBagConstraints);

    anchorPointLab.setHorizontalAlignment(SwingConstants.TRAILING);
    anchorPointLab.setText("anchorPoint");
    anchorPointLab.setToolTipText("anchorPoint is joint center, specified in world coordinates");
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.anchor = GridBagConstraints.EAST;
    gridBagConstraints.insets = new Insets(3, 3, 3, 3);
    add(anchorPointLab, gridBagConstraints);

    anchorPointXTF.setToolTipText("anchorPoint is joint center, specified in world coordinates");
    anchorPointXTF.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        anchorPointXTFActionPerformed(evt);
      }
    });
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 0.3333;
    gridBagConstraints.insets = new Insets(3, 3, 3, 3);
    add(anchorPointXTF, gridBagConstraints);

    anchorPointYTF.setToolTipText("anchorPoint is joint center, specified in world coordinates");
    anchorPointYTF.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        anchorPointYTFActionPerformed(evt);
      }
    });
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 0.3333;
    gridBagConstraints.insets = new Insets(3, 3, 3, 3);
    add(anchorPointYTF, gridBagConstraints);

    anchorPointZTF.setToolTipText("anchorPoint is joint center, specified in world coordinates");
    anchorPointZTF.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        anchorPointZTFActionPerformed(evt);
      }
    });
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 0.3333;
    gridBagConstraints.insets = new Insets(3, 3, 3, 3);
    add(anchorPointZTF, gridBagConstraints);

    suspensionForceLab.setHorizontalAlignment(SwingConstants.TRAILING);
    suspensionForceLab.setText("suspensionForce");
    suspensionForceLab.setToolTipText("describes how quickly the system resolves intersection errors due to floating point inaccuracies");
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.anchor = GridBagConstraints.EAST;
    gridBagConstraints.insets = new Insets(3, 3, 3, 3);
    add(suspensionForceLab, gridBagConstraints);

    suspensionForceTF.setToolTipText("describes how quickly the system resolves intersection errors due to floating point inaccuracies");
    suspensionForceTF.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        suspensionForceTFActionPerformed(evt);
      }
    });
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 0.3333;
    gridBagConstraints.insets = new Insets(3, 3, 3, 3);
    add(suspensionForceTF, gridBagConstraints);

    suspensionForceCorrLab.setHorizontalAlignment(SwingConstants.TRAILING);
    suspensionForceCorrLab.setText("suspensionErrorCorrection");
    suspensionForceCorrLab.setToolTipText("describes how quickly the system resolves intersection errors due to floating point inaccuracies");
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.anchor = GridBagConstraints.EAST;
    gridBagConstraints.weightx = 0.3333;
    gridBagConstraints.insets = new Insets(3, 3, 3, 3);
    add(suspensionForceCorrLab, gridBagConstraints);

    suspensionErrorCorrectionTF.setToolTipText("describes how quickly the system resolves intersection errors due to floating point inaccuracies");
    suspensionErrorCorrectionTF.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        suspensionErrorCorrectionTFActionPerformed(evt);
      }
    });
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 0.3333;
    gridBagConstraints.insets = new Insets(3, 3, 3, 3);
    add(suspensionErrorCorrectionTF, gridBagConstraints);

    axis1Pan.setBorder(BorderFactory.createTitledBorder("1"));
    axis1Pan.setLayout(new GridBagLayout());

    axis1Lab.setHorizontalAlignment(SwingConstants.TRAILING);
    axis1Lab.setText("axis1");
    axis1Lab.setToolTipText("axis1 defines axis vector of joint connection to body1");
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.anchor = GridBagConstraints.EAST;
    gridBagConstraints.insets = new Insets(3, 3, 3, 3);
    axis1Pan.add(axis1Lab, gridBagConstraints);

    axis1XTF.setToolTipText("axis1 defines axis vector of joint connection to body1");
    axis1XTF.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        axis1XTFActionPerformed(evt);
      }
    });
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 0.3333;
    gridBagConstraints.insets = new Insets(3, 3, 3, 3);
    axis1Pan.add(axis1XTF, gridBagConstraints);

    axis1YTF.setToolTipText("axis1 defines axis vector of joint connection to body1");
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 0.3333;
    gridBagConstraints.insets = new Insets(3, 3, 3, 3);
    axis1Pan.add(axis1YTF, gridBagConstraints);

    axis1ZTF.setToolTipText("axis1 defines axis vector of joint connection to body1");
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 0.3333;
    gridBagConstraints.insets = new Insets(3, 3, 3, 3);
    axis1Pan.add(axis1ZTF, gridBagConstraints);

    maxTorq1Lab.setText("maxTorque1");
    maxTorq1Lab.setToolTipText("maximum rotational torque applied by corresponding motor axis to achieve desiredAngularVelocity1");
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.anchor = GridBagConstraints.EAST;
    gridBagConstraints.insets = new Insets(3, 3, 3, 3);
    axis1Pan.add(maxTorq1Lab, gridBagConstraints);

    maxTorque1TF.setToolTipText("maximum rotational torque applied by corresponding motor axis to achieve desiredAngularVelocity1");
    maxTorque1TF.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        maxTorque1TFActionPerformed(evt);
      }
    });
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 0.3333;
    gridBagConstraints.insets = new Insets(3, 3, 3, 3);
    axis1Pan.add(maxTorque1TF, gridBagConstraints);

    stop1BounceLab.setHorizontalAlignment(SwingConstants.TRAILING);
    stop1BounceLab.setText("stop1Bounce");
    stop1BounceLab.setToolTipText("velocity factor for bounce back once stop point is reached");
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.anchor = GridBagConstraints.EAST;
    gridBagConstraints.weightx = 0.3333;
    gridBagConstraints.insets = new Insets(3, 3, 3, 3);
    axis1Pan.add(stop1BounceLab, gridBagConstraints);

    stop1BounceTF.setToolTipText("velocity factor for bounce back once stop point is reached");
    stop1BounceTF.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        stop1BounceTFActionPerformed(evt);
      }
    });
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 0.3333;
    gridBagConstraints.insets = new Insets(3, 3, 3, 3);
    axis1Pan.add(stop1BounceTF, gridBagConstraints);

    desireAngVel1Lab.setHorizontalAlignment(SwingConstants.TRAILING);
    desireAngVel1Lab.setText("desiredAngularVelocity1");
    desireAngVel1Lab.setToolTipText("goal rotation rate for hinge connection to body1");
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.anchor = GridBagConstraints.EAST;
    gridBagConstraints.insets = new Insets(3, 3, 3, 3);
    axis1Pan.add(desireAngVel1Lab, gridBagConstraints);

    desiredAngularVelocity1TF.setToolTipText("goal rotation rate for hinge connection to body1");
    desiredAngularVelocity1TF.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        desiredAngularVelocity1TFActionPerformed(evt);
      }
    });
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 0.3333;
    gridBagConstraints.insets = new Insets(3, 3, 3, 3);
    axis1Pan.add(desiredAngularVelocity1TF, gridBagConstraints);

    stop1ErrCorrLab.setHorizontalAlignment(SwingConstants.TRAILING);
    stop1ErrCorrLab.setText("stop1ErrorCorrection");
    stop1ErrCorrLab.setToolTipText("fraction of error correction performed during time step once stop point is reached (0 = no error correction, 1 = all error corrected in single step)");
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.anchor = GridBagConstraints.EAST;
    gridBagConstraints.weightx = 0.3333;
    gridBagConstraints.insets = new Insets(3, 3, 3, 3);
    axis1Pan.add(stop1ErrCorrLab, gridBagConstraints);

    stop1ErrorCorrectionTF.setToolTipText("fraction of error correction performed during time step once stop point is reached (0 = no error correction, 1 = all error corrected in single step)");
    stop1ErrorCorrectionTF.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        stop1ErrorCorrectionTFActionPerformed(evt);
      }
    });
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 0.3333;
    gridBagConstraints.insets = new Insets(3, 3, 3, 3);
    axis1Pan.add(stop1ErrorCorrectionTF, gridBagConstraints);

    minAngle1Lab.setText("minAngle1");
    minAngle1Lab.setToolTipText("minimum rotation angle for hinge");
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.anchor = GridBagConstraints.EAST;
    gridBagConstraints.insets = new Insets(3, 3, 3, 3);
    axis1Pan.add(minAngle1Lab, gridBagConstraints);

    minAngle1TF.setToolTipText("minimum rotation angle for hinge");
    minAngle1TF.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        minAngle1TFActionPerformed(evt);
      }
    });
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 0.3333;
    gridBagConstraints.insets = new Insets(3, 3, 3, 3);
    axis1Pan.add(minAngle1TF, gridBagConstraints);

    stop1ConstForceMixLab.setHorizontalAlignment(SwingConstants.TRAILING);
    stop1ConstForceMixLab.setText("stop1ConstantForceMix");
    stop1ConstForceMixLab.setToolTipText("applies a constant force value to make colliding surfaces appear to be somewhat soft");
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.anchor = GridBagConstraints.EAST;
    gridBagConstraints.weightx = 0.3333;
    gridBagConstraints.insets = new Insets(3, 3, 3, 3);
    axis1Pan.add(stop1ConstForceMixLab, gridBagConstraints);

    stop1ConstantForceMixTF.setToolTipText("applies a constant force value to make colliding surfaces appear to be somewhat soft");
    stop1ConstantForceMixTF.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        stop1ConstantForceMixTFActionPerformed(evt);
      }
    });
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 0.3333;
    gridBagConstraints.insets = new Insets(3, 3, 3, 3);
    axis1Pan.add(stop1ConstantForceMixTF, gridBagConstraints);

    maxAngle1Lab.setText("maxAngle1");
    maxAngle1Lab.setToolTipText("maximum rotation angle for hinge");
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.anchor = GridBagConstraints.EAST;
    gridBagConstraints.insets = new Insets(3, 3, 3, 3);
    axis1Pan.add(maxAngle1Lab, gridBagConstraints);

    maxAngle1TF.setToolTipText("maximum rotation angle for hinge");
    maxAngle1TF.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        maxAngle1TFActionPerformed(evt);
      }
    });
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 0.3333;
    gridBagConstraints.insets = new Insets(3, 3, 3, 3);
    axis1Pan.add(maxAngle1TF, gridBagConstraints);

    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.gridwidth = GridBagConstraints.REMAINDER;
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new Insets(3, 3, 3, 3);
    add(axis1Pan, gridBagConstraints);

    jPanel1.setBorder(BorderFactory.createTitledBorder("2"));
    jPanel1.setLayout(new GridBagLayout());

    axis2Label.setHorizontalAlignment(SwingConstants.TRAILING);
    axis2Label.setText("axis2");
    axis2Label.setToolTipText("axis2 defines axis vector of joint connection to body2");
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.anchor = GridBagConstraints.EAST;
    gridBagConstraints.insets = new Insets(3, 3, 3, 3);
    jPanel1.add(axis2Label, gridBagConstraints);

    axis2XTF.setToolTipText("axis2 defines axis vector of joint connection to body2");
    axis2XTF.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        axis2XTFActionPerformed(evt);
      }
    });
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 0.3333;
    gridBagConstraints.insets = new Insets(3, 3, 3, 3);
    jPanel1.add(axis2XTF, gridBagConstraints);

    axis2YTF.setToolTipText("axis2 defines axis vector of joint connection to body2");
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 0.3333;
    gridBagConstraints.insets = new Insets(3, 3, 3, 3);
    jPanel1.add(axis2YTF, gridBagConstraints);

    axis2ZTF.setToolTipText("axis2 defines axis vector of joint connection to body2");
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 0.3333;
    gridBagConstraints.insets = new Insets(3, 3, 3, 3);
    jPanel1.add(axis2ZTF, gridBagConstraints);

    maxTorq2Lab.setText("maxTorque2");
    maxTorq2Lab.setToolTipText("maximum rotational torque applied by corresponding motor axis to achieve desiredAngularVelocity2");
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.anchor = GridBagConstraints.EAST;
    gridBagConstraints.insets = new Insets(3, 3, 3, 3);
    jPanel1.add(maxTorq2Lab, gridBagConstraints);

    maxTorque2TF.setToolTipText("maximum rotational torque applied by corresponding motor axis to achieve desiredAngularVelocity2");
    maxTorque2TF.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        maxTorque2TFActionPerformed(evt);
      }
    });
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 0.3333;
    gridBagConstraints.insets = new Insets(3, 3, 3, 3);
    jPanel1.add(maxTorque2TF, gridBagConstraints);

    desiredAngVel2Lab.setHorizontalAlignment(SwingConstants.TRAILING);
    desiredAngVel2Lab.setText("desiredAngularVelocity2");
    desiredAngVel2Lab.setToolTipText("fraction of error correction performed during time step once stop point is reached (0 = no error correction, 1 = all error corrected in single step)");
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.anchor = GridBagConstraints.EAST;
    gridBagConstraints.insets = new Insets(3, 3, 3, 3);
    jPanel1.add(desiredAngVel2Lab, gridBagConstraints);

    desiredAngularVelocity2TF.setToolTipText("goal rotation rate for hinge connection to body2");
    desiredAngularVelocity2TF.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        desiredAngularVelocity2TFActionPerformed(evt);
      }
    });
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 0.3333;
    gridBagConstraints.insets = new Insets(3, 3, 3, 3);
    jPanel1.add(desiredAngularVelocity2TF, gridBagConstraints);

    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 5;
    gridBagConstraints.gridwidth = GridBagConstraints.REMAINDER;
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new Insets(3, 3, 3, 3);
    add(jPanel1, gridBagConstraints);
  }// </editor-fold>//GEN-END:initComponents

private void axis1XTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_axis1XTFActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_axis1XTFActionPerformed

private void anchorPointXTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anchorPointXTFActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_anchorPointXTFActionPerformed

private void anchorPointYTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anchorPointYTFActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_anchorPointYTFActionPerformed

private void stop1BounceTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stop1BounceTFActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_stop1BounceTFActionPerformed

private void stop1ErrorCorrectionTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stop1ErrorCorrectionTFActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_stop1ErrorCorrectionTFActionPerformed

private void axis2XTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_axis2XTFActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_axis2XTFActionPerformed

private void anchorPointZTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anchorPointZTFActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_anchorPointZTFActionPerformed

private void minAngle1TFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minAngle1TFActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_minAngle1TFActionPerformed

private void maxAngle1TFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxAngle1TFActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_maxAngle1TFActionPerformed

private void desiredAngularVelocity1TFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_desiredAngularVelocity1TFActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_desiredAngularVelocity1TFActionPerformed

private void desiredAngularVelocity2TFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_desiredAngularVelocity2TFActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_desiredAngularVelocity2TFActionPerformed

private void maxTorque1TFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxTorque1TFActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_maxTorque1TFActionPerformed

private void maxTorque2TFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxTorque2TFActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_maxTorque2TFActionPerformed

private void stop1ConstantForceMixTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stop1ConstantForceMixTFActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_stop1ConstantForceMixTFActionPerformed

private void suspensionErrorCorrectionTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suspensionErrorCorrectionTFActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_suspensionErrorCorrectionTFActionPerformed

private void suspensionForceTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suspensionForceTFActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_suspensionForceTFActionPerformed
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private JLabel anchorPointLab;
  private JTextField anchorPointXTF;
  private JTextField anchorPointYTF;
  private JTextField anchorPointZTF;
  private JLabel axis1Lab;
  private JPanel axis1Pan;
  private JTextField axis1XTF;
  private JTextField axis1YTF;
  private JTextField axis1ZTF;
  private JLabel axis2Label;
  private JTextField axis2XTF;
  private JTextField axis2YTF;
  private JTextField axis2ZTF;
  private DEFUSEpanel dEFUSEpanel1;
  private JLabel desireAngVel1Lab;
  private JLabel desiredAngVel2Lab;
  private JTextField desiredAngularVelocity1TF;
  private JTextField desiredAngularVelocity2TF;
  private JLabel forceOutputLab;
  private JScrollPane forceOutputSP;
  private JTextArea forceOutputTA;
  private JPanel jPanel1;
  private JLabel maxAngle1Lab;
  private JTextField maxAngle1TF;
  private JLabel maxTorq1Lab;
  private JLabel maxTorq2Lab;
  private JTextField maxTorque1TF;
  private JTextField maxTorque2TF;
  private JLabel minAngle1Lab;
  private JTextField minAngle1TF;
  private JLabel stop1BounceLab;
  private JTextField stop1BounceTF;
  private JLabel stop1ConstForceMixLab;
  private JTextField stop1ConstantForceMixTF;
  private JLabel stop1ErrCorrLab;
  private JTextField stop1ErrorCorrectionTF;
  private JTextField suspensionErrorCorrectionTF;
  private JLabel suspensionForceCorrLab;
  private JLabel suspensionForceLab;
  private JTextField suspensionForceTF;
  // End of variables declaration//GEN-END:variables
 
  public String getNameKey()
  {
    return "NAME_X3D_DOUBLEAXISHINGEJOINT";
  }

  public void unloadInput() throws IllegalArgumentException
  {
    doublexisHingeJoint.setForceOutput(forceOutputTA.getText().trim());
    
    doublexisHingeJoint.setAnchorPointX(anchorPointXTF.getText().trim());
    doublexisHingeJoint.setAnchorPointY(anchorPointYTF.getText().trim());
    doublexisHingeJoint.setAnchorPointZ(anchorPointZTF.getText().trim());
    
    doublexisHingeJoint.setAxis1X(axis1XTF.getText().trim());
    doublexisHingeJoint.setAxis1Y(axis1YTF.getText().trim());
    doublexisHingeJoint.setAxis1Z(axis1ZTF.getText().trim());
    doublexisHingeJoint.setAxis2X(axis2XTF.getText().trim());
    doublexisHingeJoint.setAxis2Y(axis2YTF.getText().trim());
    doublexisHingeJoint.setAxis2Z(axis2ZTF.getText().trim());
    
    doublexisHingeJoint.setDesiredAngularVelocity1(desiredAngularVelocity1TF.getText().trim());
    doublexisHingeJoint.setDesiredAngularVelocity2(desiredAngularVelocity2TF.getText().trim());
    
    doublexisHingeJoint.setMaxAngle1(maxAngle1TF.getText().trim());
    doublexisHingeJoint.setMaxTorque1(maxTorque1TF.getText().trim());
    doublexisHingeJoint.setMaxTorque2(maxTorque2TF.getText().trim());
    doublexisHingeJoint.setMinAngle1(minAngle1TF.getText().trim());
    
    doublexisHingeJoint.setStop1Bounce(stop1BounceTF.getText().trim());   
    doublexisHingeJoint.setStop1ConstantForceMix(stop1ConstantForceMixTF.getText().trim());
    doublexisHingeJoint.setStop1ErrorCorrection(stop1ErrorCorrectionTF.getText().trim());
    doublexisHingeJoint.setSuspensionErrorCorrection(suspensionErrorCorrectionTF.getText().trim());   
    doublexisHingeJoint.setSuspensionForce(suspensionForceTF.getText().trim());   
  }
}
