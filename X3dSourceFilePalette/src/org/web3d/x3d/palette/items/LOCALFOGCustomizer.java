/*
Copyright (c) 1995-2021 held by the author(s) .  All rights reserved.
 
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
 
 * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer
      in the documentation and/or other materials provided with the
      distribution.
 * Neither the names of the Naval Postgraduate School (NPS)
      Modeling Virtual Environments and Simulation (MOVES) Institute
      (http://www.nps.edu and https://MovesInstitute.nps.edu)
      nor the names of its contributors may be used to endorse or
      promote products derived from this software without specific
      prior written permission.
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
 */

package org.web3d.x3d.palette.items;

import java.awt.Color;
import javax.swing.DefaultComboBoxModel;
import javax.swing.text.JTextComponent;
import org.openide.util.HelpCtx;
import static org.web3d.x3d.types.X3DSchemaData.*;
/**
 * LOCALFOGCustomizer.java
 * Created on Sep 11, 2007, 1:15 PM
 *
 * MOVES Institute
 * Naval Postgraduate School, Monterey, CA, USA
 * www.nps.edu
 *
 * @author Mike Bailey
 * @version $Id$
 */
public class LOCALFOGCustomizer extends BaseCustomizer
{
  private LOCALFOG localFog;
  private JTextComponent target;
  
  /** Creates new form LOCALFOGCustomizer */
  public LOCALFOGCustomizer(LOCALFOG localFog, JTextComponent target)
  {
    super(localFog);
    this.localFog = localFog;
    this.target = target;
    
    HelpCtx.setHelpIDString(this, "LOCALFOG_ELEM_HELPID");
    
    initComponents();

    enabledCB.setSelected(localFog.isEnabled());

    String rStr, gStr, bStr;
    
    color0TF.setText(rStr=localFog.getColor0());
    color1TF.setText(gStr=localFog.getColor1());
    color2TF.setText(bStr=localFog.getColor2());
    initChooser(colorChooser,rStr,gStr,bStr);
    
    fogTypeCombo.setSelectedItem(localFog.getFogType());
    visibilityTF.setText(localFog.getVisibilityRange());
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        dEFUSEpanel1 = getDEFUSEpanel();
        jLabel7 = new javax.swing.JLabel();
        color0TF = new javax.swing.JTextField();
        color1TF = new javax.swing.JTextField();
        color2TF = new javax.swing.JTextField();
        colorChooser = new net.java.dev.colorchooser.ColorChooser();
        jLabel1 = new javax.swing.JLabel();
        fogTypeCombo = new javax.swing.JComboBox<String>();
        jLabel2 = new javax.swing.JLabel();
        visibilityTF = new javax.swing.JTextField();
        enabledCB = new javax.swing.JCheckBox();
        eventHintPanel = new javax.swing.JPanel();
        eventsLabel = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        dEFUSEpanel1.setMinimumSize(new java.awt.Dimension(198, 77));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(dEFUSEpanel1, gridBagConstraints);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel7.setText("color");
        jLabel7.setToolTipText("fog color, needs to match color of background geometry");
        jLabel7.setPreferredSize(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(jLabel7, gridBagConstraints);

        color0TF.setColumns(5);
        color0TF.setEditable(false);
        color0TF.setToolTipText("fog color, needs to match color of background geometry");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(color0TF, gridBagConstraints);

        color1TF.setColumns(5);
        color1TF.setEditable(false);
        color1TF.setToolTipText("fog color, needs to match color of background geometry");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(color1TF, gridBagConstraints);

        color2TF.setColumns(5);
        color2TF.setEditable(false);
        color2TF.setToolTipText("fog color, needs to match color of background geometry");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(color2TF, gridBagConstraints);

        colorChooser.setPreferredSize(null);
        colorChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorChooserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout colorChooserLayout = new javax.swing.GroupLayout(colorChooser);
        colorChooser.setLayout(colorChooserLayout);
        colorChooserLayout.setHorizontalGroup(
            colorChooserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 22, Short.MAX_VALUE)
        );
        colorChooserLayout.setVerticalGroup(
            colorChooserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 22, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(colorChooser, gridBagConstraints);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel1.setText("fogType");
        jLabel1.setToolTipText("algorithm for rate of increasing Fog, either LINEAR or EXPONENTIAL");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(jLabel1, gridBagConstraints);

        fogTypeCombo.setModel(new DefaultComboBoxModel<String>(FOG_ATTR_FOGTYPE_CHOICES));
        fogTypeCombo.setToolTipText("algorithm for rate of increasing Fog, either LINEAR or EXPONENTIAL");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(fogTypeCombo, gridBagConstraints);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel2.setText("visibilityRange");
        jLabel2.setToolTipText("Distance in meters where objects are totally obscured by the fog (visibilityRange 0 disables Fog)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(jLabel2, gridBagConstraints);

        visibilityTF.setColumns(5);
        visibilityTF.setEditable(false);
        visibilityTF.setToolTipText("Distance in meters where objects are totally obscured by the fog (visibilityRange 0 disables Fog)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(visibilityTF, gridBagConstraints);

        enabledCB.setText("enabled");
        enabledCB.setToolTipText("enables/disables node operation");
        enabledCB.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        enabledCB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(enabledCB, gridBagConstraints);

        eventHintPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        eventHintPanel.setLayout(new java.awt.GridBagLayout());

        eventsLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        eventsLabel.setText("<html>\n<p align=\"center\"><b>LocalFog</b> simulates atmospheric effects by blending distant objects with fog color.</p>\n<p align=\"center\"><b>LocalFog</b> effects occur around the local transformation center, rather than the viewer. </p>\n<p align=\"center\"><b>LocalFog</b> is <i>not</i> a bindable node. </p>");
        eventsLabel.setToolTipText("Fog nodes have their own binding stack, no more than one is active at a time.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        eventHintPanel.add(eventsLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 3);
        add(eventHintPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

  private void colorChooserActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_colorChooserActionPerformed
  {//GEN-HEADEREND:event_colorChooserActionPerformed
    Color c = colorChooser.getColor();
    color0TF.setText(formatDecimal((float)c.getRed()/255));
    color1TF.setText(formatDecimal((float)c.getGreen()/255));
    color2TF.setText(formatDecimal((float)c.getBlue()/255));
}//GEN-LAST:event_colorChooserActionPerformed
  
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField color0TF;
    private javax.swing.JTextField color1TF;
    private javax.swing.JTextField color2TF;
    private net.java.dev.colorchooser.ColorChooser colorChooser;
    private org.web3d.x3d.palette.items.DEFUSEpanel dEFUSEpanel1;
    private javax.swing.JCheckBox enabledCB;
    private javax.swing.JPanel eventHintPanel;
    private javax.swing.JLabel eventsLabel;
    private javax.swing.JComboBox<String> fogTypeCombo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JTextField visibilityTF;
    // End of variables declaration//GEN-END:variables

  @Override
  public String getNameKey()
  {
    return "NAME_X3D_LOCALFOG";
  }

  @Override
  public void unloadInput()
  {
    unLoadDEFUSE();
    localFog.setColor0(color0TF.getText().trim());
    localFog.setColor1(color1TF.getText().trim());
    localFog.setColor2(color2TF.getText().trim());
    
    localFog.setFogType((String)fogTypeCombo.getSelectedItem());
    localFog.setVisibilityRange(visibilityTF.getText().trim());
   }   
}
