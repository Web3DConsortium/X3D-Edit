/*
Copyright (c) 1995-2021 held by the author(s) .  All rights reserved.
 
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
 
 * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer
      in the documentation and/or other materials provided with the
      distribution.
 * Neither the names of the Naval Postgraduate School (NPS)
      Modeling Virtual Environments and Simulation (MOVES) Institute
      (http://www.nps.edu and https://MovesInstitute.nps.edu)
      nor the names of its contributors may be used to endorse or
      promote products derived from this software without specific
      prior written permission.
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
 */

package org.web3d.x3d.palette.items;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.*;
import javax.swing.text.JTextComponent;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.HelpCtx;
import org.web3d.x3d.PixelTextureGenerator;
import org.web3d.x3d.types.X3DPrimitiveTypes.SFInt32;
import static org.web3d.x3d.types.X3DSchemaData.COMPOSEDTEXTURE3D_ATTR_CONTAINERFIELD_CHOICES;
import static org.web3d.x3d.types.X3DSchemaData.COMPOSEDTEXTURE3D_ATTR_CONTAINERFIELD_TOOLTIPS;

/**
 * PIXELTEXTURE3DCustomizer.java
 * Created on 20 November 2011
 *
 * MOVES Institute
 * Naval Postgraduate School, Monterey, CA, USA
 * www.nps.edu
 *
 * @author Mike Bailey
 * @version $Id$
 */
public class PIXELTEXTURE3DCustomizer extends BaseCustomizer
{
  private PIXELTEXTURE3D pixelTexture3D;
  private JTextComponent target;
  private JFileChooser fileChooser;
  private int totalPixelCount, totalComponentCount;
 
  public PIXELTEXTURE3DCustomizer(PIXELTEXTURE3D pixelTexture3D, JTextComponent target)
  {
    super(pixelTexture3D);
    this.pixelTexture3D = pixelTexture3D;
    this.target = target;
          
    HelpCtx.setHelpIDString(this, "PIXELTEXTURE3D_ELEM_HELPID");
    
    initComponents();
    
    super.getDEFUSEpanel().setContainerFieldChoices(
            COMPOSEDTEXTURE3D_ATTR_CONTAINERFIELD_CHOICES,
            COMPOSEDTEXTURE3D_ATTR_CONTAINERFIELD_TOOLTIPS);
    // DEFUSEpanel initialization must NOT be repeated or else array of choices will be overwritten
     
     numWidthTF.setText(pixelTexture3D.getNumWidth());
    numHeightTF.setText(pixelTexture3D.getNumHeight());
     numDepthTF.setText(pixelTexture3D.getNumDepth());
    
    SFInt32 colorCount = new SFInt32(pixelTexture3D.getNumColor());
    if ((colorCount.getValue() >= 0) && (colorCount.getValue() <= 4))
         numberColorsCB.setSelectedIndex(colorCount.getValue());
    else numberColorsCB.setSelectedIndex(0);
    
    imageDataTA.setText(pixelTexture3D.getImageData());
    repeatSCB.setSelected(pixelTexture3D.isRepeatS());
    repeatTCB.setSelected(pixelTexture3D.isRepeatT());
    repeatRCB.setSelected(pixelTexture3D.isRepeatR());
    
    computeTotalValues ();
  }
  
  private void computeTotalValues ()
  {
          totalPixelCount = 
              new SFInt32( numWidthTF.getText()).getValue() * 
              new SFInt32(numHeightTF.getText()).getValue() * 
              new SFInt32( numDepthTF.getText()).getValue();
      totalComponentCount = 
              totalPixelCount * 
              new SFInt32(numberColorsCB.getSelectedItem().toString()).getValue();
              
      totalPixelValues.setText(" " + String.valueOf(totalPixelCount));
      totalComponentValues.setText(" " + String.valueOf(totalComponentCount));
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        GridBagConstraints gridBagConstraints;

        DEFUSEpanel dEFUSEpanel1 = getDEFUSEpanel();
        jPanel1 = new JPanel();
        widthPixelsLabel = new JLabel();
        numWidthTF = new JTextField();
        heightPixelsLabel = new JLabel();
        numHeightTF = new JTextField();
        depthPixelsLabel = new JLabel();
        numDepthTF = new JTextField();
        repeatSLabel = new JLabel();
        repeatTLabel = new JLabel();
        repeatRLabel = new JLabel();
        repeatSCB = new JCheckBox();
        repeatTCB = new JCheckBox();
        repeatRCB = new JCheckBox();
        colorComponentsComboBoxLabel = new JLabel();
        jScrollPane1 = new JScrollPane();
        imageDataTA = new JTextArea();
        numberColorsCB = new JComboBox<String>();
        colorComponentsKeyLabel = new JLabel();
        importImageButton = new JButton();
        importImageFileTextField = new JTextField();
        totalPixelValuesLabel = new JLabel();
        totalPixelValues = new JLabel();
        totalComponentValuesLabel = new JLabel();
        totalComponentValues = new JLabel();
        zeroAllValuesButton = new JButton();
        nodeHintPanel = new JPanel();
        descriptionLabel = new JLabel();

        setLayout(new GridBagLayout());
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new Insets(3, 3, 3, 3);
        add(dEFUSEpanel1, gridBagConstraints);

        jPanel1.setBorder(BorderFactory.createTitledBorder("image"));
        jPanel1.setLayout(new GridBagLayout());

        widthPixelsLabel.setHorizontalAlignment(SwingConstants.TRAILING);
        widthPixelsLabel.setText("width in pixels");
        widthPixelsLabel.setToolTipText("width of image array");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = GridBagConstraints.EAST;
        gridBagConstraints.insets = new Insets(3, 3, 3, 3);
        jPanel1.add(widthPixelsLabel, gridBagConstraints);

        numWidthTF.setText("0");
        numWidthTF.setToolTipText("width of image array");
        numWidthTF.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                numWidthTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new Insets(3, 3, 3, 3);
        jPanel1.add(numWidthTF, gridBagConstraints);

        heightPixelsLabel.setHorizontalAlignment(SwingConstants.TRAILING);
        heightPixelsLabel.setText("height in pixels");
        heightPixelsLabel.setToolTipText("height of image array");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = GridBagConstraints.EAST;
        gridBagConstraints.insets = new Insets(3, 3, 3, 3);
        jPanel1.add(heightPixelsLabel, gridBagConstraints);

        numHeightTF.setText("0");
        numHeightTF.setToolTipText("height of image array");
        numHeightTF.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                numHeightTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new Insets(3, 3, 3, 3);
        jPanel1.add(numHeightTF, gridBagConstraints);

        depthPixelsLabel.setHorizontalAlignment(SwingConstants.TRAILING);
        depthPixelsLabel.setText("depth in pixels");
        depthPixelsLabel.setToolTipText("height of image array");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = GridBagConstraints.EAST;
        gridBagConstraints.insets = new Insets(3, 3, 3, 3);
        jPanel1.add(depthPixelsLabel, gridBagConstraints);

        numDepthTF.setText("0");
        numDepthTF.setToolTipText("height of image array");
        numDepthTF.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                numDepthTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new Insets(3, 3, 3, 3);
        jPanel1.add(numDepthTF, gridBagConstraints);

        repeatSLabel.setHorizontalAlignment(SwingConstants.TRAILING);
        repeatSLabel.setText("repeatS");
        repeatSLabel.setToolTipText("Horizontally repeat texture along S axis using child TextureTransform");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        gridBagConstraints.insets = new Insets(6, 20, 3, 3);
        jPanel1.add(repeatSLabel, gridBagConstraints);

        repeatTLabel.setHorizontalAlignment(SwingConstants.TRAILING);
        repeatTLabel.setText("repeatT");
        repeatTLabel.setToolTipText("Horizontally repeat texture along T axis using child TextureTransform");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        gridBagConstraints.insets = new Insets(6, 20, 3, 3);
        jPanel1.add(repeatTLabel, gridBagConstraints);

        repeatRLabel.setHorizontalAlignment(SwingConstants.TRAILING);
        repeatRLabel.setText("repeatR");
        repeatRLabel.setToolTipText("Horizontally repeat texture along T axis using child TextureTransform");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        gridBagConstraints.insets = new Insets(6, 20, 3, 3);
        jPanel1.add(repeatRLabel, gridBagConstraints);

        repeatSCB.setSelected(true);
        repeatSCB.setToolTipText("Horizontally repeat texture along S axis using child TextureTransform");
        repeatSCB.setMargin(new Insets(0, 0, 0, 0));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        gridBagConstraints.insets = new Insets(6, 3, 3, 3);
        jPanel1.add(repeatSCB, gridBagConstraints);

        repeatTCB.setSelected(true);
        repeatTCB.setToolTipText("Horizontally repeat texture along T axis using child TextureTransform");
        repeatTCB.setMargin(new Insets(0, 0, 0, 0));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        gridBagConstraints.insets = new Insets(6, 3, 3, 3);
        jPanel1.add(repeatTCB, gridBagConstraints);

        repeatRCB.setSelected(true);
        repeatRCB.setToolTipText("Horizontally repeat texture along T axis using child TextureTransform");
        repeatRCB.setMargin(new Insets(0, 0, 0, 0));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        gridBagConstraints.insets = new Insets(6, 3, 3, 3);
        jPanel1.add(repeatRCB, gridBagConstraints);

        colorComponentsComboBoxLabel.setHorizontalAlignment(SwingConstants.TRAILING);
        colorComponentsComboBoxLabel.setText("color components per pixel");
        colorComponentsComboBoxLabel.setToolTipText("values defined per pixel entry");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = GridBagConstraints.EAST;
        gridBagConstraints.insets = new Insets(3, 3, 3, 3);
        jPanel1.add(colorComponentsComboBoxLabel, gridBagConstraints);

        jScrollPane1.setBorder(BorderFactory.createTitledBorder("image array of pixel values"));
        jScrollPane1.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        imageDataTA.setColumns(20);
        imageDataTA.setLineWrap(true);
        imageDataTA.setRows(5);
        imageDataTA.setToolTipText("array of pixel values, each holding 0..4 hex values");
        imageDataTA.setWrapStyleWord(true);
        imageDataTA.setMinimumSize(new Dimension(10, 19));
        jScrollPane1.setViewportView(imageDataTA);

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new Insets(3, 3, 3, 3);
        jPanel1.add(jScrollPane1, gridBagConstraints);

        numberColorsCB.setModel(new DefaultComboBoxModel<String>(new String[] { "0", "1", "2", "3", "4" }));
        numberColorsCB.setToolTipText("values defined per pixel entry");
        numberColorsCB.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                numberColorsCBActionPerformed(evt);
            }
        });
        numberColorsCB.addPropertyChangeListener(new PropertyChangeListener() {
            public void propertyChange(PropertyChangeEvent evt) {
                numberColorsCBPropertyChange(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new Insets(3, 3, 3, 3);
        jPanel1.add(numberColorsCB, gridBagConstraints);

        colorComponentsKeyLabel.setHorizontalAlignment(SwingConstants.LEFT);
        colorComponentsKeyLabel.setText("0 none, 1 BW, 2 BW alpha, 3 RGB, 4 RGBA");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.6666;
        gridBagConstraints.insets = new Insets(3, 3, 3, 3);
        jPanel1.add(colorComponentsKeyLabel, gridBagConstraints);

        importImageButton.setText("Import image file");
        importImageButton.setToolTipText("Select image file for conversion to X3D PixelTexture");
        importImageButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                importImageButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = GridBagConstraints.EAST;
        gridBagConstraints.insets = new Insets(3, 3, 3, 3);
        jPanel1.add(importImageButton, gridBagConstraints);

        importImageFileTextField.setToolTipText("option: select image for conversion into PixelTexture");
        importImageFileTextField.setBorder(null);
        importImageFileTextField.setEnabled(false);
        importImageFileTextField.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                importImageFileTextFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new Insets(3, 3, 3, 5);
        jPanel1.add(importImageFileTextField, gridBagConstraints);

        totalPixelValuesLabel.setText("total pixel count");
        totalPixelValuesLabel.setToolTipText("number of values in image array");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = GridBagConstraints.EAST;
        gridBagConstraints.insets = new Insets(3, 3, 3, 3);
        jPanel1.add(totalPixelValuesLabel, gridBagConstraints);

        totalPixelValues.setText(" 0");
        totalPixelValues.setToolTipText("number of values in image array");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new Insets(3, 3, 3, 3);
        jPanel1.add(totalPixelValues, gridBagConstraints);

        totalComponentValuesLabel.setText("total components x count");
        totalComponentValuesLabel.setToolTipText("color components x pixel count");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = GridBagConstraints.EAST;
        gridBagConstraints.insets = new Insets(3, 3, 3, 3);
        jPanel1.add(totalComponentValuesLabel, gridBagConstraints);

        totalComponentValues.setText(" 0");
        totalComponentValues.setToolTipText("color components x pixel count");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new Insets(3, 3, 3, 3);
        jPanel1.add(totalComponentValues, gridBagConstraints);

        zeroAllValuesButton.setText("zero all values");
        zeroAllValuesButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                zeroAllValuesButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = GridBagConstraints.EAST;
        gridBagConstraints.insets = new Insets(3, 3, 3, 3);
        jPanel1.add(zeroAllValuesButton, gridBagConstraints);

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new Insets(3, 3, 3, 3);
        add(jPanel1, gridBagConstraints);

        nodeHintPanel.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0)));
        nodeHintPanel.setLayout(new GridBagLayout());

        descriptionLabel.setHorizontalAlignment(SwingConstants.CENTER);
        descriptionLabel.setText("<html>Texture nodes are contained by <b>Appearance</b> and map an image to peer geometry");
        descriptionLabel.setToolTipText("TextureProperties, TextureTransform and TextureCoordinate can further adjust texture application");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new Insets(10, 3, 10, 3);
        nodeHintPanel.add(descriptionLabel, gridBagConstraints);

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new Insets(3, 3, 3, 3);
        add(nodeHintPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void numberColorsCBActionPerformed (java.awt.event.ActionEvent evt)//GEN-FIRST:event_numberColorsCBActionPerformed
    {//GEN-HEADEREND:event_numberColorsCBActionPerformed
        pixelTexture3D.setNumColor(numberColorsCB.getSelectedItem().toString());
    }//GEN-LAST:event_numberColorsCBActionPerformed

    private void importImageButtonActionPerformed (java.awt.event.ActionEvent evt)//GEN-FIRST:event_importImageButtonActionPerformed
    {//GEN-HEADEREND:event_importImageButtonActionPerformed
    if(fileChooser == null) {
      fileChooser = new JFileChooser();
      fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
      fileChooser.setDialogTitle("Select image file");
      fileChooser.setToolTipText("Select image file for conversion to X3D PixelTexture");
      fileChooser.setMultiSelectionEnabled(false);
    }
    
    int retVal = fileChooser.showOpenDialog(this);
    if(retVal != JFileChooser.APPROVE_OPTION)
      return;
    
    String fileName = fileChooser.getSelectedFile().getAbsolutePath();
    importImageFileTextField.setText(fileName);
    
    PixelTextureGenerator pixelTextureGenerator = new PixelTextureGenerator (fileName);
    
    if (pixelTextureGenerator.getOutputPixelString().length() == 0)
    {
        System.out.println ("pixelTextureGenerator has no output");
        return;
    }
    else 
    {
        System.out.println ("pixelTextureGenerator.getOutputPixelString().length()=" + pixelTextureGenerator.getOutputPixelString().length()
                + ", width=" + String.valueOf(pixelTextureGenerator.getImageWidth())
                + ", height=" + String.valueOf(pixelTextureGenerator.getImageHeight()));
    }
    
    imageDataTA.setText(pixelTextureGenerator.getOutputPixelString().toString());    
    numWidthTF.setText(String.valueOf(pixelTextureGenerator.getImageWidth()));
    numHeightTF.setText(String.valueOf(pixelTextureGenerator.getImageHeight()));
    
    // TODO:  how many color components?
    numberColorsCB.setSelectedIndex(3);
    
    computeTotalValues ();
}//GEN-LAST:event_importImageButtonActionPerformed

    private void importImageFileTextFieldActionPerformed (java.awt.event.ActionEvent evt)//GEN-FIRST:event_importImageFileTextFieldActionPerformed
    {//GEN-HEADEREND:event_importImageFileTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_importImageFileTextFieldActionPerformed

    private void numWidthTFActionPerformed (java.awt.event.ActionEvent evt)//GEN-FIRST:event_numWidthTFActionPerformed
    {//GEN-HEADEREND:event_numWidthTFActionPerformed
       computeTotalValues ();
    }//GEN-LAST:event_numWidthTFActionPerformed

    private void numHeightTFActionPerformed (java.awt.event.ActionEvent evt)//GEN-FIRST:event_numHeightTFActionPerformed
    {//GEN-HEADEREND:event_numHeightTFActionPerformed
       computeTotalValues ();
    }//GEN-LAST:event_numHeightTFActionPerformed

    private void numberColorsCBPropertyChange (java.beans.PropertyChangeEvent evt)//GEN-FIRST:event_numberColorsCBPropertyChange
    {//GEN-HEADEREND:event_numberColorsCBPropertyChange
       computeTotalValues ();
    }//GEN-LAST:event_numberColorsCBPropertyChange

    private void numDepthTFActionPerformed(ActionEvent evt) {//GEN-FIRST:event_numDepthTFActionPerformed
        computeTotalValues ();
    }//GEN-LAST:event_numDepthTFActionPerformed

    private void zeroAllValuesButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_zeroAllValuesButtonActionPerformed
                StringBuilder zeroArray = new StringBuilder();
        SFInt32 width  = new SFInt32( numWidthTF.getText(), 0, null);
        SFInt32 height = new SFInt32(numHeightTF.getText(), 0, null);
        for (int i=0; i < totalPixelCount; i++)
        {
            if      (numberColorsCB.getSelectedItem().toString().trim().equals("1"))
                     zeroArray.append("0");
            else if (numberColorsCB.getSelectedItem().toString().trim().equals("2"))
                     zeroArray.append("0x0000");
            else if (numberColorsCB.getSelectedItem().toString().trim().equals("3"))
                     zeroArray.append("0x000000");
            else if (numberColorsCB.getSelectedItem().toString().trim().equals("4"))
                     zeroArray.append("0x00000000");
            if      ((i > 0) && ((i+1) % (width.getValue()*height.getValue()) == 0))
                     zeroArray.append("\n\n");
            else if ((i > 0) && ((i+1) % width.getValue() == 0))
                     zeroArray.append("\n");
            else     zeroArray.append(" ");
        }
        imageDataTA.setText(zeroArray.toString().trim());
    }//GEN-LAST:event_zeroAllValuesButtonActionPerformed
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JLabel colorComponentsComboBoxLabel;
    private JLabel colorComponentsKeyLabel;
    private JLabel depthPixelsLabel;
    private JLabel descriptionLabel;
    private JLabel heightPixelsLabel;
    private JTextArea imageDataTA;
    private JButton importImageButton;
    private JTextField importImageFileTextField;
    private JPanel jPanel1;
    private JScrollPane jScrollPane1;
    private JPanel nodeHintPanel;
    private JTextField numDepthTF;
    private JTextField numHeightTF;
    private JTextField numWidthTF;
    private JComboBox<String> numberColorsCB;
    private JCheckBox repeatRCB;
    private JLabel repeatRLabel;
    private JCheckBox repeatSCB;
    private JLabel repeatSLabel;
    private JCheckBox repeatTCB;
    private JLabel repeatTLabel;
    private JLabel totalComponentValues;
    private JLabel totalComponentValuesLabel;
    private JLabel totalPixelValues;
    private JLabel totalPixelValuesLabel;
    private JLabel widthPixelsLabel;
    private JButton zeroAllValuesButton;
    // End of variables declaration//GEN-END:variables

  @Override
  public String getNameKey()
  {
    return "NAME_X3D_PIXELTEXTURE3D";
  }

  @Override 
  public void unloadInput() throws IllegalArgumentException {
        // check image values
        int valueCount = new SFInt32(  numWidthTF.getText()).getValue() * 
                         new SFInt32(numHeightTF.getText()).getValue()  * 
                         new SFInt32( numDepthTF.getText()).getValue();
        int arrayCount = imageDataTA.getText().replace(',', ' ').trim().split("\\s").length;
        String notificationMessage = new String();

        if      ((valueCount == 0) && (imageDataTA.getText().trim().length() == 0))
        {
            // OK
        }
        else if      (valueCount < arrayCount)
        {
            notificationMessage = "Found insufficient number of image values (need " + valueCount + ", found " + (arrayCount) + ")";
        }
        else if (valueCount < arrayCount)
        {
            notificationMessage = "Found too many image values (need " + valueCount + ", found " + (arrayCount) + ")";
        }
        if (notificationMessage.length() > 0)
        {
            NotifyDescriptor descriptor = new NotifyDescriptor.Message(
                notificationMessage, NotifyDescriptor.WARNING_MESSAGE);
            DialogDisplayer.getDefault().notify(descriptor);
        }

        unLoadDEFUSE();

        pixelTexture3D.setNumWidth ( numWidthTF.getText().trim());
        pixelTexture3D.setNumHeight(numHeightTF.getText().trim());
        pixelTexture3D.setNumDepth ( numDepthTF.getText().trim());
        pixelTexture3D.setNumColor (numberColorsCB.getSelectedItem().toString());

        pixelTexture3D.setImageData(imageDataTA.getText().trim());
        pixelTexture3D.setRepeatS(repeatSCB.isSelected());
        pixelTexture3D.setRepeatT(repeatTCB.isSelected());
        pixelTexture3D.setRepeatR(repeatRCB.isSelected());
    }
}
