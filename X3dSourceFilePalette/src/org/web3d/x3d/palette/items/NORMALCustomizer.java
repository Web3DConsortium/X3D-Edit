/*
Copyright (c) 1995-2021 held by the author(s) .  All rights reserved.
 
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
 
 * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer
      in the documentation and/or other materials provided with the
      distribution.
 * Neither the names of the Naval Postgraduate School (NPS)
      Modeling Virtual Environments and Simulation (MOVES) Institute
      (http://www.nps.edu and https://MovesInstitute.nps.edu)
      nor the names of its contributors may be used to endorse or
      promote products derived from this software without specific
      prior written permission.
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
 */

package org.web3d.x3d.palette.items;

import javax.swing.text.JTextComponent;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.HelpCtx;
import static org.web3d.x3d.types.X3DPrimitiveTypes.*;

/**
 * SHAPECustomizer.java
 * Created on August 15, 2007, 2:25 PM
 *
 * MOVES Institute
 * Naval Postgraduate School, Monterey, CA, USA
 * www.nps.edu
 *
 * @author Mike Bailey, Don Brutzman
 * @version $Id$
 */
public class NORMALCustomizer extends BaseCustomizer
{
  private NORMAL normal;
  private JTextComponent target;
  
  /** Creates new form SHAPECustomizer
   * @param normal
   * @param target  
   */
  public NORMALCustomizer(NORMAL normal, JTextComponent target)
  {
    super(normal);
    this.normal = normal;
    this.target = target;
          
    HelpCtx.setHelpIDString(this, "NORMAL_ELEM_HELPID");
    
    initComponents();
    
    expandableList1.setTitle("vector");
    expandableList1.setColumnTitles  (new String[]{"#","x","y","z"});
    expandableList1.setColumnToolTips(new String[]{"index","normal x value","normal y value","normal z value"});
    expandableList1.setHeaderTooltip("Normal vector (x y z) values in range [0..1]");
    expandableList1.doIndexInFirstColumn(true);
    expandableList1.setNewRowData(new Object[]{"0","1","0"}); // unit vector

    String[][] sa = normal.getVector();
    expandableList1.setData(sa);
    expandableList1.setDoNormals(true);
    expandableList1.setShowAppendCommasLineBreaks(true);
    expandableList1.setInsertCommas    (normal.isInsertCommas());
    expandableList1.setInsertLineBreaks(normal.isInsertLineBreaks());
        
    if  (expandableList1.getData().length > 1)
         normalizeAxisValuesButton.setEnabled(true);
    else normalizeAxisValuesButton.setEnabled(false);
        
    // TODO InputVerifier check for any single normal vector having degenerate values (0 0 0)
  }
   
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        dEFUSEpanel1 = getDEFUSEpanel();
        expandableList1 = new org.web3d.x3d.palette.items.ExpandableList();
        normalizeAxisValuesButton = new javax.swing.JButton();
        hintLabel = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(dEFUSEpanel1, gridBagConstraints);

        expandableList1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.LEADING, javax.swing.border.TitledBorder.TOP));
        expandableList1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                expandableList1PropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(expandableList1, gridBagConstraints);

        normalizeAxisValuesButton.setText("unit length for normal values");
        normalizeAxisValuesButton.setToolTipText("set unit-magnitude vector values for normals (unit length, ranges 0..1)");
        normalizeAxisValuesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                normalizeAxisValuesButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 6);
        add(normalizeAxisValuesButton, gridBagConstraints);

        hintLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        hintLabel.setText("<html><p align='center'><b>Normal</b> node contains orthogonal vector values, applied either per-vertex or per-face. </p>");
        hintLabel.setToolTipText("Normal vector values are either for sibling Coordinate/CoordinateDouble or parent ElevationGrid node");
        hintLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        hintLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 4;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(hintLabel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void normalizeAxisValuesButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_normalizeAxisValuesButtonActionPerformed
    {//GEN-HEADEREND:event_normalizeAxisValuesButtonActionPerformed
        String[][] saa = expandableList1.getData();
        if      (saa.length == 0) return;
        else
        {
            double normalizationFactor, x, y, z;
            for (int i=0; i < saa.length; i++)
            {
                x = new SFDouble(saa [i][0]).getValue();
                y = new SFDouble(saa [i][1]).getValue();
                z = new SFDouble(saa [i][2]).getValue();
                normalizationFactor = Math.sqrt(x*x + y*y + z*z);
                if (normalizationFactor == 0.0)
                {
                    NotifyDescriptor descriptor = new NotifyDescriptor.Message(
                            "Found zero-magnitude normal, reset to 0 1 0",NotifyDescriptor.WARNING_MESSAGE);
                    DialogDisplayer.getDefault().notify(descriptor);
                    saa [i][0] = "0";
                    saa [i][1] = "1";
                    saa [i][2] = "0";
                }
                else
                {
                    saa [i][0] = fiveDigitFormat.format(x/normalizationFactor);
                    saa [i][1] = fiveDigitFormat.format(y/normalizationFactor);
                    saa [i][2] = fiveDigitFormat.format(z/normalizationFactor);
                }
            }
        }
        expandableList1.setData(saa);
}//GEN-LAST:event_normalizeAxisValuesButtonActionPerformed

    private void expandableList1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_expandableList1PropertyChange
        if (expandableList1.getData().length > 1)
             normalizeAxisValuesButton.setEnabled(true);
        else normalizeAxisValuesButton.setEnabled(false);
    }//GEN-LAST:event_expandableList1PropertyChange
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.web3d.x3d.palette.items.DEFUSEpanel dEFUSEpanel1;
    private org.web3d.x3d.palette.items.ExpandableList expandableList1;
    private javax.swing.JLabel hintLabel;
    private javax.swing.JButton normalizeAxisValuesButton;
    // End of variables declaration//GEN-END:variables

  @Override
  public String getNameKey()
  {
    return "NAME_X3D_NORMAL";
  }

  @Override
  public void unloadInput() throws IllegalArgumentException
  {
    unLoadDEFUSE();
    
    normal.setVector          (expandableList1.getData());
    normal.setInsertCommas    (expandableList1.isInsertCommasSet());
    normal.setInsertLineBreaks(expandableList1.isInsertLineBreaksSet());
  }  
}
