/*
Copyright (c) 1995-2021 held by the author(s) .  All rights reserved.
 
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
 
 * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer
      in the documentation and/or other materials provided with the
      distribution.
 * Neither the names of the Naval Postgraduate School (NPS)
      Modeling Virtual Environments and Simulation (MOVES) Institute
      (http://www.nps.edu and https://MovesInstitute.nps.edu)
      nor the names of its contributors may be used to endorse or
      promote products derived from this software without specific
      prior written permission.
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
 */

package org.web3d.x3d.palette.items;

import java.awt.Color;
import javax.swing.text.JTextComponent;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.HelpCtx;
import static org.web3d.x3d.types.X3DPrimitiveTypes.*;

/**
 * DIRECTIONALLIGHTCustomizer.java
 * Created on July 11, 2007, 5:00 PM
 *
 * MOVES Institute
 * Naval Postgraduate School, Monterey, CA, USA
 * www.nps.edu
 *
 * @author Mike Bailey
 * @version $Id$
 */
public class DIRECTIONALLIGHTCustomizer extends BaseCustomizer
{
  private DIRECTIONALLIGHT dLight;
  private JTextComponent target;
  
  /** Creates new form DIRECTIONALLIGHTCustomizer */
  public DIRECTIONALLIGHTCustomizer(DIRECTIONALLIGHT dLight, JTextComponent target)
  {
    super(dLight);
    this.dLight = dLight;
    this.target = target;
    
    HelpCtx.setHelpIDString(this, "DIRECTIONALLIGHT_ELEM_HELPID");
    
    initComponents();
    
    ambientIntensityTF.setText(dLight.getAmbientIntensity());
    
    color0TF.setText(dLight.getColor0());
    color1TF.setText(dLight.getColor1());
    color2TF.setText(dLight.getColor2());

    bindColorChooserToBetterJTextFields(color0TF,color1TF,color2TF,colorChooser1);

    globalCB.setSelected(dLight.isGlobal());
    intensityTF.setText(dLight.getIntensity());
    
    directionXTF.setText(dLight.getDirectionX());
    directionYTF.setText(dLight.getDirectionY());
    directionZTF.setText(dLight.getDirectionZ());
    if (directionXTF.getText().equals("0") && directionYTF.getText().equals("0") && directionZTF.getText().equals("0")) normalizeButton.doClick();
    
    onCB.setSelected(dLight.isOn());
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    org.web3d.x3d.palette.items.DEFUSEpanel dEFUSEpanel = getDEFUSEpanel();
    ambientLab = new javax.swing.JLabel();
    ambientIntensityTF = new javax.swing.JTextField();
    colorLab = new javax.swing.JLabel();
    directionLab = new javax.swing.JLabel();
    directionXTF = new javax.swing.JTextField();
    intensityLab = new javax.swing.JLabel();
    intensityTF = new javax.swing.JTextField();
    onLab = new javax.swing.JLabel();
    onCB = new javax.swing.JCheckBox();
    globalLab = new javax.swing.JLabel();
    colorChooser1 = new net.java.dev.colorchooser.ColorChooser();
    directionYTF = new javax.swing.JTextField();
    directionZTF = new javax.swing.JTextField();
    globalCB = new javax.swing.JCheckBox();
    color0TF = new org.web3d.x3d.palette.BetterJTextField();
    color1TF = new org.web3d.x3d.palette.BetterJTextField();
    color2TF = new org.web3d.x3d.palette.BetterJTextField();
    normalizeButton = new javax.swing.JButton();

    setLayout(new java.awt.GridBagLayout());

    dEFUSEpanel.setMinimumSize(new java.awt.Dimension(198, 77));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 2);
    add(dEFUSEpanel, gridBagConstraints);

    ambientLab.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
    ambientLab.setText("ambientIntensity");
    ambientLab.setToolTipText("[0,1] brightness of ambient (nondirectional background) light");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
    add(ambientLab, gridBagConstraints);

    ambientIntensityTF.setToolTipText("[0,1] brightness of ambient (nondirectional background) light");
    ambientIntensityTF.setMaximumSize(null);
    ambientIntensityTF.setMinimumSize(new java.awt.Dimension(40, 20));
    ambientIntensityTF.setPreferredSize(new java.awt.Dimension(40, 20));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 0.3333;
    gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
    add(ambientIntensityTF, gridBagConstraints);

    colorLab.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
    colorLab.setText("color");
    colorLab.setToolTipText("color of light, applied to colors of objects");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
    add(colorLab, gridBagConstraints);

    directionLab.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
    directionLab.setText("direction");
    directionLab.setToolTipText("direction vector of light axis relative to local coordinate system");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
    add(directionLab, gridBagConstraints);

    directionXTF.setToolTipText("x direction vector of light axis relative to local coordinate system");
    directionXTF.setMaximumSize(null);
    directionXTF.setMinimumSize(new java.awt.Dimension(40, 20));
    directionXTF.setPreferredSize(new java.awt.Dimension(40, 20));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 0.3333;
    gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
    add(directionXTF, gridBagConstraints);

    intensityLab.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
    intensityLab.setText("intensity");
    intensityLab.setToolTipText("[0,1] brightness of direct light");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 5;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
    add(intensityLab, gridBagConstraints);

    intensityTF.setToolTipText("[0,1] brightness of direct light");
    intensityTF.setMaximumSize(null);
    intensityTF.setMinimumSize(new java.awt.Dimension(40, 20));
    intensityTF.setPreferredSize(new java.awt.Dimension(40, 20));
    intensityTF.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        intensityTFActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 5;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 0.3333;
    gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
    add(intensityTF, gridBagConstraints);

    onLab.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
    onLab.setText("on");
    onLab.setToolTipText("enables/disables this light source");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
    add(onLab, gridBagConstraints);

    onCB.setToolTipText("enables/disables this light source");
    onCB.setMargin(new java.awt.Insets(0, 0, 0, 0));
    onCB.setMaximumSize(null);
    onCB.setMinimumSize(new java.awt.Dimension(40, 20));
    onCB.setPreferredSize(new java.awt.Dimension(40, 20));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 0.3333;
    gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
    add(onCB, gridBagConstraints);

    globalLab.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
    globalLab.setText("global");
    globalLab.setToolTipText("global lights illuminate all objects, scoped lights only affect local transformation hierarchy");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 6;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
    add(globalLab, gridBagConstraints);

    colorChooser1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        colorChooser1ActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout colorChooser1Layout = new javax.swing.GroupLayout(colorChooser1);
    colorChooser1.setLayout(colorChooser1Layout);
    colorChooser1Layout.setHorizontalGroup(
      colorChooser1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 22, Short.MAX_VALUE)
    );
    colorChooser1Layout.setVerticalGroup(
      colorChooser1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 22, Short.MAX_VALUE)
    );

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
    add(colorChooser1, gridBagConstraints);

    directionYTF.setToolTipText("y direction vector of light axis relative to local coordinate system");
    directionYTF.setMaximumSize(null);
    directionYTF.setMinimumSize(new java.awt.Dimension(40, 20));
    directionYTF.setPreferredSize(new java.awt.Dimension(40, 20));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 0.3333;
    gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
    add(directionYTF, gridBagConstraints);

    directionZTF.setToolTipText("z direction vector of light axis relative to local coordinate system");
    directionZTF.setMaximumSize(null);
    directionZTF.setMinimumSize(new java.awt.Dimension(40, 20));
    directionZTF.setPreferredSize(new java.awt.Dimension(40, 20));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 0.3333;
    gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
    add(directionZTF, gridBagConstraints);

    globalCB.setToolTipText("global lights illuminate all objects, scoped lights only affect local transformation hierarchy");
    globalCB.setMargin(new java.awt.Insets(0, 0, 0, 0));
    globalCB.setMaximumSize(null);
    globalCB.setMinimumSize(new java.awt.Dimension(40, 20));
    globalCB.setPreferredSize(new java.awt.Dimension(40, 20));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 6;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 0.3333;
    gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
    add(globalCB, gridBagConstraints);

    color0TF.setToolTipText("color of light, applied to colors of objects");
    color0TF.setMaximumSize(null);
    color0TF.setMinimumSize(new java.awt.Dimension(40, 20));
    color0TF.setPreferredSize(new java.awt.Dimension(40, 20));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 0.3333;
    gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
    add(color0TF, gridBagConstraints);

    color1TF.setToolTipText("color of light, applied to colors of objects");
    color1TF.setMaximumSize(null);
    color1TF.setMinimumSize(new java.awt.Dimension(40, 20));
    color1TF.setPreferredSize(new java.awt.Dimension(40, 20));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 0.3333;
    gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
    add(color1TF, gridBagConstraints);

    color2TF.setToolTipText("color of light, applied to colors of objects");
    color2TF.setMaximumSize(null);
    color2TF.setMinimumSize(new java.awt.Dimension(40, 20));
    color2TF.setPreferredSize(new java.awt.Dimension(40, 20));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 0.3333;
    gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
    add(color2TF, gridBagConstraints);

    normalizeButton.setText("normalize");
    normalizeButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        normalizeButtonActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
    add(normalizeButton, gridBagConstraints);
  }// </editor-fold>//GEN-END:initComponents

  private void colorChooser1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorChooser1ActionPerformed
    Color c = colorChooser1.getColor();
    color0TF.setText(formatDecimal((float)c.getRed()/255));
    color1TF.setText(formatDecimal((float)c.getGreen()/255));
    color2TF.setText(formatDecimal((float)c.getBlue()/255));
  }//GEN-LAST:event_colorChooser1ActionPerformed

  private void intensityTFActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_intensityTFActionPerformed
  {//GEN-HEADEREND:event_intensityTFActionPerformed
      // TODO add your handling code here:
  }//GEN-LAST:event_intensityTFActionPerformed

  private void normalizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_normalizeButtonActionPerformed
        double normalizationFactor, x, y, z;

        x     = new SFDouble(directionXTF.getText()).getValue();
        y     = new SFDouble(directionYTF.getText()).getValue();
        z     = new SFDouble(directionZTF.getText()).getValue();

        normalizationFactor = Math.sqrt(x * x + y * y + z * z);
        if (normalizationFactor == 0.0)
        {
            NotifyDescriptor descriptor = new NotifyDescriptor.Message(
                    "<html>Found zero-magnitude axis for <b>direction</b> vector, reset to 0 0 -1</html>", NotifyDescriptor.WARNING_MESSAGE);
            DialogDisplayer.getDefault().notify(descriptor);
            directionXTF.setText("0");
            directionYTF.setText("0");
            directionZTF.setText("-1");
        }
        else
        {
            directionXTF.setText(fiveDigitFormat.format(x / normalizationFactor));
            directionYTF.setText(fiveDigitFormat.format(y / normalizationFactor));
            directionZTF.setText(fiveDigitFormat.format(z / normalizationFactor));
        }
  }//GEN-LAST:event_normalizeButtonActionPerformed
  
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JTextField ambientIntensityTF;
  private javax.swing.JLabel ambientLab;
  private org.web3d.x3d.palette.BetterJTextField color0TF;
  private org.web3d.x3d.palette.BetterJTextField color1TF;
  private org.web3d.x3d.palette.BetterJTextField color2TF;
  private net.java.dev.colorchooser.ColorChooser colorChooser1;
  private javax.swing.JLabel colorLab;
  private javax.swing.JLabel directionLab;
  private javax.swing.JTextField directionXTF;
  private javax.swing.JTextField directionYTF;
  private javax.swing.JTextField directionZTF;
  private javax.swing.JCheckBox globalCB;
  private javax.swing.JLabel globalLab;
  private javax.swing.JLabel intensityLab;
  private javax.swing.JTextField intensityTF;
  private javax.swing.JButton normalizeButton;
  private javax.swing.JCheckBox onCB;
  private javax.swing.JLabel onLab;
  // End of variables declaration//GEN-END:variables

   @Override
   public String getNameKey()
  {
    return "NAME_X3D_DIRECTIONALLIGHT";
  }
   @Override
   public void unloadInput()
   {
     unLoadDEFUSE();
     
    dLight.setAmbientIntensity(ambientIntensityTF.getText().trim());
    
    dLight.setColor0(color0TF.getText().trim());
    dLight.setColor1(color1TF.getText().trim());
    dLight.setColor2(color2TF.getText().trim());
    
    dLight.setGlobal(globalCB.isSelected());
    
    dLight.setIntensity(intensityTF.getText().trim());

    if (directionXTF.getText().equals("0") && directionYTF.getText().equals("0") && directionZTF.getText().equals("0")) normalizeButton.doClick();
    dLight.setDirectionX(directionXTF.getText().trim());
    dLight.setDirectionY(directionYTF.getText().trim());
    dLight.setDirectionZ(directionZTF.getText().trim());
    
    dLight.setOn(onCB.isSelected());
   }
}
