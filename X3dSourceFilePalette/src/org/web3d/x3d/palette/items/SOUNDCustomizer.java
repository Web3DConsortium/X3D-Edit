/*
Copyright (c) 1995-2021 held by the author(s) .  All rights reserved.
 
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
 
 * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer
      in the documentation and/or other materials provided with the
      distribution.
 * Neither the names of the Naval Postgraduate School (NPS)
      Modeling Virtual Environments and Simulation (MOVES) Institute
      (http://www.nps.edu and https://MovesInstitute.nps.edu)
      nor the names of its contributors may be used to endorse or
      promote products derived from this software without specific
      prior written permission.
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
 */

package org.web3d.x3d.palette.items;

import java.awt.Color;
import javax.swing.text.JTextComponent;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.HelpCtx;
import static org.web3d.x3d.types.X3DPrimitiveTypes.*;

/**
 * SOUNDCustomizer.java
 * Created on August 15, 2007, 2:25 PM
 *
 * MOVES Institute
 * Naval Postgraduate School, Monterey, CA, USA
 * www.nps.edu
 *
 * @author Mike Bailey
 * @version $Id$
 */
public class SOUNDCustomizer extends BaseCustomizer
{
  private final SOUND sound;
  private JTextComponent target;

  public static Color redForeground = new Color(245, 116, 106);
  private final Color defaultForegroundColor;
  
  /** Creates new form SOUNDCustomizer
     * @param sound
     * @param target */
  public SOUNDCustomizer(SOUND sound, JTextComponent target)
  {
    super(sound);
    this.sound = sound;
    this.target = target;
                           
    HelpCtx.setHelpIDString(this, "SOUND_ELEM_HELPID");

    sound.setVisualizationSelectionAvailable(true); // must precede initComponents() interface initialization
    sound.setVisualizationTooltip("Add wireframe ellipsoid for inner (min) intensity and transparent ellipsoid for outer (max) intensity");
    
    initComponents();
    
    defaultForegroundColor = raiseButton.getForeground(); // save for reuse

    locationXTF.setText(sound.getLocationX());
    locationYTF.setText(sound.getLocationY());
    locationZTF.setText(sound.getLocationZ());
    checkLocationAdjustmentNeeded();
        
    directionXTF.setText(sound.getDirectionX());
    directionYTF.setText(sound.getDirectionY());
    directionZTF.setText(sound.getDirectionZ());
    if (directionXTF.getText().equals("0") && directionYTF.getText().equals("0") && directionZTF.getText().equals("0")) 
        normalizeButton.doClick();
    
    intensityTF.setText(sound.getIntensity());
    priorityTF.setText(sound.getPriority());
    spatializeCB.setSelected(sound.isSpatialize());
    
    minFrontTF.setText(sound.getMinFront());
    minBackTF.setText(sound.getMinBack());
    maxFrontTF.setText(sound.getMaxFront());
    maxBackTF.setText(sound.getMaxBack());
    checkMinMax ();
    
    // TODO add visualization option
 }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        dEFUSEpanel1 = getDEFUSEpanel();
        locationLabel = new javax.swing.JLabel();
        locationXTF = new javax.swing.JTextField();
        locationYTF = new javax.swing.JTextField();
        locationZTF = new javax.swing.JTextField();
        raiseButton = new javax.swing.JButton();
        directionLabel = new javax.swing.JLabel();
        directionXTF = new javax.swing.JTextField();
        directionYTF = new javax.swing.JTextField();
        directionZTF = new javax.swing.JTextField();
        spatializeLabel = new javax.swing.JLabel();
        spatializeCB = new javax.swing.JCheckBox();
        intensityLabel = new javax.swing.JLabel();
        intensityTF = new javax.swing.JTextField();
        priorityLabel = new javax.swing.JLabel();
        priorityTF = new javax.swing.JTextField();
        minFrontLabel = new javax.swing.JLabel();
        minBackLabel = new javax.swing.JLabel();
        maxFrontLabel = new javax.swing.JLabel();
        maxBackLabel = new javax.swing.JLabel();
        minFrontTF = new javax.swing.JTextField();
        minBackTF = new javax.swing.JTextField();
        maxFrontTF = new javax.swing.JTextField();
        maxBackTF = new javax.swing.JTextField();
        normalizeButton = new javax.swing.JButton();
        nodeHintPanel = new javax.swing.JPanel();
        hintLabel1 = new javax.swing.JLabel();

        setToolTipText("normalize direction vector");
        setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(dEFUSEpanel1, gridBagConstraints);

        locationLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        locationLabel.setText("location");
        locationLabel.setToolTipText("position of sound center, relative to local coordinate system");
        locationLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        locationLabel.setMaximumSize(null);
        locationLabel.setMinimumSize(new java.awt.Dimension(60, 20));
        locationLabel.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(locationLabel, gridBagConstraints);

        locationXTF.setToolTipText("x position of sound center, relative to local coordinate system");
        locationXTF.setMaximumSize(null);
        locationXTF.setMinimumSize(new java.awt.Dimension(60, 20));
        locationXTF.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(locationXTF, gridBagConstraints);

        locationYTF.setToolTipText("y position of sound center, relative to local coordinate system");
        locationYTF.setMaximumSize(null);
        locationYTF.setMinimumSize(new java.awt.Dimension(60, 20));
        locationYTF.setPreferredSize(new java.awt.Dimension(60, 20));
        locationYTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                locationYTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(locationYTF, gridBagConstraints);

        locationZTF.setToolTipText("z position of sound center, relative to local coordinate system");
        locationZTF.setMaximumSize(null);
        locationZTF.setMinimumSize(new java.awt.Dimension(60, 20));
        locationZTF.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(locationZTF, gridBagConstraints);

        raiseButton.setText("raise height");
        raiseButton.setToolTipText("raise height of Sound location by 1.6m to match default avatar height");
        raiseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                raiseButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(raiseButton, gridBagConstraints);

        directionLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        directionLabel.setText("direction");
        directionLabel.setToolTipText("direction of sound axis, relative to local coordinate system");
        directionLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        directionLabel.setMaximumSize(null);
        directionLabel.setMinimumSize(new java.awt.Dimension(60, 20));
        directionLabel.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(directionLabel, gridBagConstraints);

        directionXTF.setToolTipText("x direction of sound axis, relative to local coordinate system");
        directionXTF.setMaximumSize(null);
        directionXTF.setMinimumSize(new java.awt.Dimension(60, 20));
        directionXTF.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(directionXTF, gridBagConstraints);

        directionYTF.setToolTipText("y direction of sound axis, relative to local coordinate system");
        directionYTF.setMaximumSize(null);
        directionYTF.setMinimumSize(new java.awt.Dimension(60, 20));
        directionYTF.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(directionYTF, gridBagConstraints);

        directionZTF.setToolTipText("z direction of sound axis, relative to local coordinate system");
        directionZTF.setMaximumSize(null);
        directionZTF.setMinimumSize(new java.awt.Dimension(60, 20));
        directionZTF.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(directionZTF, gridBagConstraints);

        spatializeLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        spatializeLabel.setText("spatialize");
        spatializeLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        spatializeLabel.setMaximumSize(null);
        spatializeLabel.setMinimumSize(new java.awt.Dimension(60, 20));
        spatializeLabel.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(spatializeLabel, gridBagConstraints);

        spatializeCB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        spatializeCB.setMaximumSize(null);
        spatializeCB.setMinimumSize(new java.awt.Dimension(60, 20));
        spatializeCB.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(spatializeCB, gridBagConstraints);

        intensityLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        intensityLabel.setText("intensity");
        intensityLabel.setToolTipText("factor [0,1] adjusting loudness (decibels) of emitted sound");
        intensityLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        intensityLabel.setMaximumSize(null);
        intensityLabel.setMinimumSize(new java.awt.Dimension(60, 20));
        intensityLabel.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(intensityLabel, gridBagConstraints);

        intensityTF.setToolTipText("factor [0,1] adjusting loudness (decibels) of emitted sound");
        intensityTF.setMaximumSize(null);
        intensityTF.setMinimumSize(new java.awt.Dimension(60, 20));
        intensityTF.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(intensityTF, gridBagConstraints);

        priorityLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        priorityLabel.setText("priority");
        priorityLabel.setToolTipText("player hint [0,1] to choose which sounds to play, if needed");
        priorityLabel.setMaximumSize(null);
        priorityLabel.setMinimumSize(new java.awt.Dimension(60, 20));
        priorityLabel.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(priorityLabel, gridBagConstraints);

        priorityTF.setToolTipText("player hint [0,1] to choose which sounds to play, if needed");
        priorityTF.setMaximumSize(null);
        priorityTF.setMinimumSize(new java.awt.Dimension(60, 20));
        priorityTF.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(priorityTF, gridBagConstraints);

        minFrontLabel.setText("minFront");
        minFrontLabel.setToolTipText("Inner (full volume) ellipsoid distance along front direction");
        minFrontLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        minFrontLabel.setMaximumSize(null);
        minFrontLabel.setMinimumSize(new java.awt.Dimension(60, 20));
        minFrontLabel.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(minFrontLabel, gridBagConstraints);

        minBackLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        minBackLabel.setText("minBack");
        minBackLabel.setToolTipText("Inner (full volume) ellipsoid distance along back direction");
        minBackLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        minBackLabel.setMaximumSize(null);
        minBackLabel.setMinimumSize(new java.awt.Dimension(60, 20));
        minBackLabel.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(minBackLabel, gridBagConstraints);

        maxFrontLabel.setText("maxFront");
        maxFrontLabel.setToolTipText("Outer (zero volume) ellipsoid distance along front direction");
        maxFrontLabel.setMaximumSize(null);
        maxFrontLabel.setMinimumSize(new java.awt.Dimension(60, 20));
        maxFrontLabel.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(maxFrontLabel, gridBagConstraints);

        maxBackLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        maxBackLabel.setText("maxBack");
        maxBackLabel.setToolTipText("Outer (zero volume) ellipsoid distance along back direction");
        maxBackLabel.setMaximumSize(null);
        maxBackLabel.setMinimumSize(new java.awt.Dimension(60, 20));
        maxBackLabel.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(maxBackLabel, gridBagConstraints);

        minFrontTF.setToolTipText("Inner (full volume) ellipsoid distance along front direction");
        minFrontTF.setMaximumSize(null);
        minFrontTF.setMinimumSize(new java.awt.Dimension(60, 20));
        minFrontTF.setPreferredSize(new java.awt.Dimension(60, 20));
        minFrontTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minFrontTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(minFrontTF, gridBagConstraints);

        minBackTF.setToolTipText("Inner (full volume) ellipsoid distance along back direction");
        minBackTF.setMaximumSize(null);
        minBackTF.setMinimumSize(new java.awt.Dimension(60, 20));
        minBackTF.setPreferredSize(new java.awt.Dimension(60, 20));
        minBackTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minBackTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(minBackTF, gridBagConstraints);

        maxFrontTF.setToolTipText("Outer (zero volume) ellipsoid distance along front direction");
        maxFrontTF.setMaximumSize(null);
        maxFrontTF.setMinimumSize(new java.awt.Dimension(60, 20));
        maxFrontTF.setPreferredSize(new java.awt.Dimension(60, 20));
        maxFrontTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxFrontTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(maxFrontTF, gridBagConstraints);

        maxBackTF.setToolTipText("Outer (zero volume) ellipsoid distance along back direction");
        maxBackTF.setMaximumSize(null);
        maxBackTF.setMinimumSize(new java.awt.Dimension(60, 20));
        maxBackTF.setPreferredSize(new java.awt.Dimension(60, 20));
        maxBackTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxBackTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(maxBackTF, gridBagConstraints);

        normalizeButton.setText("normalize");
        normalizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                normalizeButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(normalizeButton, gridBagConstraints);

        nodeHintPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        nodeHintPanel.setLayout(new java.awt.GridBagLayout());

        hintLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        hintLabel1.setText("<html><p align=\"\"center\"><b>Sound</b> controls spatialized 3D sound playback for a child <b>AudioClip</b> or <b>MovieTexture</b> node.<br> Stereo support is included, intensity varies according to user location and direction. <br/> Multichannel audio sources are maintained during playback.</p>");
        hintLabel1.setToolTipText("close this panel to add children nodes");
        hintLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        nodeHintPanel.add(hintLabel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(nodeHintPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void minBackTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minBackTFActionPerformed
        checkMinMax ();
    }//GEN-LAST:event_minBackTFActionPerformed

    private void maxFrontTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxFrontTFActionPerformed
        checkMinMax ();
    }//GEN-LAST:event_maxFrontTFActionPerformed

    private void minFrontTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minFrontTFActionPerformed
        checkMinMax ();
    }//GEN-LAST:event_minFrontTFActionPerformed

    private void maxBackTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxBackTFActionPerformed
        checkMinMax ();
    }//GEN-LAST:event_maxBackTFActionPerformed

    private void normalizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_normalizeButtonActionPerformed
        double normalizationFactor, x, y, z;

        x     = new SFDouble(directionXTF.getText()).getValue();
        y     = new SFDouble(directionYTF.getText()).getValue();
        z     = new SFDouble(directionZTF.getText()).getValue();

        normalizationFactor = Math.sqrt(x * x + y * y + z * z);
        if (normalizationFactor == 0.0)
        {
            NotifyDescriptor descriptor = new NotifyDescriptor.Message(
                    "<html>Found zero-magnitude axis for <b>direction</b> vector, reset to 0 0 1</html>", NotifyDescriptor.WARNING_MESSAGE);
            DialogDisplayer.getDefault().notify(descriptor);
            directionXTF.setText("0");
            directionYTF.setText("0");
            directionZTF.setText("1");
        }
        else
        {
            directionXTF.setText(fiveDigitFormat.format(x / normalizationFactor));
            directionYTF.setText(fiveDigitFormat.format(y / normalizationFactor));
            directionZTF.setText(fiveDigitFormat.format(z / normalizationFactor));
        }
    }//GEN-LAST:event_normalizeButtonActionPerformed

    private void raiseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_raiseButtonActionPerformed
        Float y = Float.parseFloat(locationYTF.getText().trim()) + 1.6f;
        locationYTF.setText(y.toString());
        checkLocationAdjustmentNeeded();
    }//GEN-LAST:event_raiseButtonActionPerformed

    private void locationYTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_locationYTFActionPerformed
        checkLocationAdjustmentNeeded();
    }//GEN-LAST:event_locationYTFActionPerformed
    private void checkLocationAdjustmentNeeded ()
    {
        if (locationYTF.getText().trim().isEmpty() || locationYTF.getText().trim().equals("0") || locationYTF.getText().trim().equals("0.0"))
        {
            raiseButton.setForeground(redForeground);
            raiseButton.setEnabled (true);
        }
        else 
        {
            raiseButton.setForeground(defaultForegroundColor);
            raiseButton.setEnabled (false);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.web3d.x3d.palette.items.DEFUSEpanel dEFUSEpanel1;
    private javax.swing.JLabel directionLabel;
    private javax.swing.JTextField directionXTF;
    private javax.swing.JTextField directionYTF;
    private javax.swing.JTextField directionZTF;
    private javax.swing.JLabel hintLabel1;
    private javax.swing.JLabel intensityLabel;
    private javax.swing.JTextField intensityTF;
    private javax.swing.JLabel locationLabel;
    private javax.swing.JTextField locationXTF;
    private javax.swing.JTextField locationYTF;
    private javax.swing.JTextField locationZTF;
    private javax.swing.JLabel maxBackLabel;
    private javax.swing.JTextField maxBackTF;
    private javax.swing.JLabel maxFrontLabel;
    private javax.swing.JTextField maxFrontTF;
    private javax.swing.JLabel minBackLabel;
    private javax.swing.JTextField minBackTF;
    private javax.swing.JLabel minFrontLabel;
    private javax.swing.JTextField minFrontTF;
    private javax.swing.JPanel nodeHintPanel;
    private javax.swing.JButton normalizeButton;
    private javax.swing.JLabel priorityLabel;
    private javax.swing.JTextField priorityTF;
    private javax.swing.JButton raiseButton;
    private javax.swing.JCheckBox spatializeCB;
    private javax.swing.JLabel spatializeLabel;
    // End of variables declaration//GEN-END:variables

  private void checkMinMax ()
  {
      if (new SFDouble(minFrontTF.getText()).getValue() > new SFDouble(maxFrontTF.getText()).getValue())
      {
            String message;
            message = "<html><center>Value mismatch: <b>minFront</b> (" + minFrontTF.getText() + "m) " +
                           "cannot be greater than <b>maxFront</b> ("   + maxFrontTF.getText() + "m).<br/><br/>" +
                           "Swap values?";
          NotifyDescriptor descriptor = new NotifyDescriptor.Confirmation(
                  message, "Value mismatch", NotifyDescriptor.YES_NO_OPTION);
          if (DialogDisplayer.getDefault().notify(descriptor) == NotifyDescriptor.YES_OPTION)
          {
              String minFrontValue = minFrontTF.getText();
              minFrontTF.setText(maxFrontTF.getText());
              maxFrontTF.setText(minFrontValue);
          }
      }
      if (new SFDouble(minBackTF.getText()).getValue() > new SFDouble(maxBackTF.getText()).getValue())
      {
            String message;
            message = "<html><center>Value mismatch: <b>minBack</b> (" + minBackTF.getText() + "m) " +
                           "cannot be greater than <b>maxBack</b> ("   + maxBackTF.getText() + "m).<br/><br/>" +
                           "Swap values?";
          NotifyDescriptor descriptor = new NotifyDescriptor.Confirmation(
                  message, "Value mismatch", NotifyDescriptor.YES_NO_OPTION);
          if (DialogDisplayer.getDefault().notify(descriptor) == NotifyDescriptor.YES_OPTION)
          {
              String minBackValue = minBackTF.getText();
              minBackTF.setText(maxBackTF.getText());
              maxBackTF.setText(minBackValue);
          }
      }
  }
  @Override
  public String getNameKey()
  {
    return "NAME_X3D_SOUND";
  }

  @Override
  public void unloadInput() throws IllegalArgumentException
  {
    unLoadDEFUSE();

    sound.setLocationX(locationXTF.getText().trim());
    sound.setLocationY(locationYTF.getText().trim());
    sound.setLocationZ(locationZTF.getText().trim());

    if (directionXTF.getText().equals("0") && directionYTF.getText().equals("0") && directionZTF.getText().equals("0")) normalizeButton.doClick();
    sound.setDirectionX(directionXTF.getText().trim());
    sound.setDirectionY(directionYTF.getText().trim());
    sound.setDirectionZ(directionZTF.getText().trim());

    sound.setIntensity(intensityTF.getText().trim());
    sound.setPriority(priorityTF.getText().trim());    
    sound.setSpatialize(spatializeCB.isSelected());
    
    checkMinMax ();
    sound.setMinFront(minFrontTF.getText().trim());
    sound.setMinBack(minBackTF.getText().trim());
    sound.setMaxFront(maxFrontTF.getText().trim());
    sound.setMaxBack(maxBackTF.getText().trim());
  }  
}
