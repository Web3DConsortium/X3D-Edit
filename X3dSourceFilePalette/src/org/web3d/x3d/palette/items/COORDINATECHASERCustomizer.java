/*
Copyright (c) 1995-2021 held by the author(s) .  All rights reserved.
 
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
 
 * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer
      in the documentation and/or other materials provided with the
      distribution.
 * Neither the names of the Naval Postgraduate School (NPS)
      Modeling Virtual Environments and Simulation (MOVES) Institute
      (http://www.nps.edu and https://MovesInstitute.nps.edu)
      nor the names of its contributors may be used to endorse or
      promote products derived from this software without specific
      prior written permission.
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
 */

package org.web3d.x3d.palette.items;

import javax.swing.text.JTextComponent;
import org.openide.util.HelpCtx;
import org.openide.util.NbBundle;
import static org.web3d.x3d.types.X3DPrimitiveTypes.*;
/**
 * COORDINATECHASERCustomizer.java
 * Created on 6 February 2010
 *
 * MOVES Institute
 * Naval Postgraduate School, Monterey, CA, USA
 * www.nps.edu
 *
 * @author Mike Bailey, Don Brutzman
 * @version $Id$
 */
public class COORDINATECHASERCustomizer extends BaseCustomizer
{
  private COORDINATECHASER coordinateChaser;
  private JTextComponent target;

  public COORDINATECHASERCustomizer(COORDINATECHASER coordinateChaser, JTextComponent target)
  {
    super(coordinateChaser);
    this.coordinateChaser = coordinateChaser;
    this.target = target;
                   
    HelpCtx.setHelpIDString(this, "COORDINATECHASER_ELEM_HELPID");
    
    initComponents();

    durationTF.setText (coordinateChaser.getDuration());

    initialValueExpandableList.setTitle("initialValue array");
    initialValueExpandableList.setColumnTitles(new String[]{"#","x","y","z"});
    initialValueExpandableList.setColumnToolTips(new String[]{"index","initialValue x","initialValue y","initialValue z"});
    initialValueExpandableList.setHeaderTooltip("initial starting value");
    initialValueExpandableList.doIndexInFirstColumn(true);
    initialValueExpandableList.setFlippableRowData(true);

    String[][] saa = coordinateChaser.getInitialValue(); // may be 0-length
    initialValueExpandableList.setData(saa);

    initialDestinationExpandableList.setTitle("initialDestination array");
    initialDestinationExpandableList.setColumnTitles(new String[]{"#","x","y","z"});
    initialDestinationExpandableList.setColumnToolTips(new String[]{"index","initialDestination x","initialDestination y","initialDestination z"});
    initialDestinationExpandableList.setHeaderTooltip("initial goal value");
    initialDestinationExpandableList.doIndexInFirstColumn(true);
    initialDestinationExpandableList.setFlippableRowData(true);

    saa = coordinateChaser.getInitialDestination(); // may be 0-length
    initialDestinationExpandableList.setData(saa);
    
        insertCommasCheckBox.setSelected(coordinateChaser.isInsertCommas());
    insertLineBreaksCheckBox.setSelected(coordinateChaser.isInsertLineBreaks());
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        appendLineBreaksCommasPanel = new javax.swing.JPanel();
        appendLabel = new javax.swing.JLabel();
        insertCommasCheckBox = new javax.swing.JCheckBox();
        insertLineBreaksCheckBox = new javax.swing.JCheckBox();
        durationLabel = new javax.swing.JLabel();
        durationTF = new javax.swing.JTextField();
        followerFigureLabel = new javax.swing.JLabel();
        org.web3d.x3d.palette.items.DEFUSEpanel dEFUSEpanel1 = getDEFUSEpanel();
        initialValueExpandableList = new org.web3d.x3d.palette.items.ExpandableList();
        initialDestinationExpandableList = new org.web3d.x3d.palette.items.ExpandableList();

        setToolTipText("number of internal filters (larger means smoother response and longer delay)");
        setLayout(new java.awt.GridBagLayout());

        appendLineBreaksCommasPanel.setLayout(new java.awt.GridBagLayout());

        appendLabel.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        appendLabel.setText(org.openide.util.NbBundle.getMessage(COORDINATECHASERCustomizer.class, "ExpandableList.appendLabel.text")); // NOI18N
        appendLabel.setToolTipText("Append commas or line breaks after each row");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        appendLineBreaksCommasPanel.add(appendLabel, gridBagConstraints);

        insertCommasCheckBox.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        insertCommasCheckBox.setText(org.openide.util.NbBundle.getMessage(COORDINATECHASERCustomizer.class, "ExpandableList.insertCommasCheckBox.text")); // NOI18N
        insertCommasCheckBox.setToolTipText(NbBundle.getMessage(getClass(),"ExpandableList.TTIP_COMMAS"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        appendLineBreaksCommasPanel.add(insertCommasCheckBox, gridBagConstraints);

        insertLineBreaksCheckBox.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        insertLineBreaksCheckBox.setText(org.openide.util.NbBundle.getMessage(COORDINATECHASERCustomizer.class, "ExpandableList.insertLineBreaksCheckBox.text")); // NOI18N
        insertLineBreaksCheckBox.setToolTipText(NbBundle.getMessage(getClass(),"ExpandableList.TTIP_LINE_BREAKS"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        appendLineBreaksCommasPanel.add(insertLineBreaksCheckBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LAST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 20);
        add(appendLineBreaksCommasPanel, gridBagConstraints);

        durationLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        durationLabel.setText("duration");
        durationLabel.setToolTipText("time interval for filter response in seconds");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 20, 3, 3);
        add(durationLabel, gridBagConstraints);

        durationTF.setToolTipText("time interval for filter response in seconds");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 80;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(durationTF, gridBagConstraints);

        followerFigureLabel.setBackground(new java.awt.Color(255, 255, 255));
        followerFigureLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        followerFigureLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/web3d/x3d/palette/items/resources/follower_1.png"))); // NOI18N
        followerFigureLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 3, 3, 3));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(followerFigureLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(dEFUSEpanel1, gridBagConstraints);

        initialValueExpandableList.setMinimumSize(new java.awt.Dimension(240, 160));
        initialValueExpandableList.setPreferredSize(new java.awt.Dimension(240, 160));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 240;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(initialValueExpandableList, gridBagConstraints);

        initialDestinationExpandableList.setMinimumSize(new java.awt.Dimension(240, 160));
        initialDestinationExpandableList.setPreferredSize(new java.awt.Dimension(240, 160));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 240;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(initialDestinationExpandableList, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel appendLabel;
    private javax.swing.JPanel appendLineBreaksCommasPanel;
    private javax.swing.JLabel durationLabel;
    private javax.swing.JTextField durationTF;
    private javax.swing.JLabel followerFigureLabel;
    private org.web3d.x3d.palette.items.ExpandableList initialDestinationExpandableList;
    private org.web3d.x3d.palette.items.ExpandableList initialValueExpandableList;
    private javax.swing.JCheckBox insertCommasCheckBox;
    private javax.swing.JCheckBox insertLineBreaksCheckBox;
    // End of variables declaration//GEN-END:variables

  @Override
  public String getNameKey()
  {
    return "NAME_X3D_COORDINATECHASER";
  }

  @Override
  public void unloadInput() throws IllegalArgumentException
  {
    unLoadDEFUSE();

    coordinateChaser.setDuration            (new SFFloat(         durationTF.getText().trim(), 0.0f, null)); // no upper limit
    
	coordinateChaser.setInitialValue       (initialValueExpandableList.getData());
    coordinateChaser.setInitialDestination (initialDestinationExpandableList.getData());
    
    coordinateChaser.setInsertCommas    (insertCommasCheckBox.isSelected());
    coordinateChaser.setInsertLineBreaks(insertLineBreaksCheckBox.isSelected());
    
    // check array sizes
    if ((initialValueExpandableList.getData().length) != (initialDestinationExpandableList.getData().length))
    {
        throw new IllegalArgumentException("Length mismatch, initialValue and destinationValue arrays");
    }
  }  
}
