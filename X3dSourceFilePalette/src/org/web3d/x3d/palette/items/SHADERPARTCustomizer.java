/*
Copyright (c) 1995-2021 held by the author(s) .  All rights reserved.
 
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
 
 * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer
      in the documentation and/or other materials provided with the
      distribution.
 * Neither the names of the Naval Postgraduate School (NPS)
      Modeling Virtual Environments and Simulation (MOVES) Institute
      (http://www.nps.edu and https://MovesInstitute.nps.edu)
      nor the names of its contributors may be used to endorse or
      promote products derived from this software without specific
      prior written permission.
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
 */

package org.web3d.x3d.palette.items;

import java.awt.Dimension;
import javax.swing.DefaultComboBoxModel;
import javax.swing.text.JTextComponent;
import org.openide.util.HelpCtx;
import org.web3d.x3d.X3DDataObject;
import static org.web3d.x3d.types.X3DSchemaData.*;

/**
 * SHADERPARTCustomizer.java
 * Created on 16 January 2010
 *
 * MOVES Institute
 * Naval Postgraduate School, Monterey, CA, USA
 * www.nps.edu
 *
 * @author Mike Bailey, Don Brutzman
 * @version $Id$
 */
public class SHADERPARTCustomizer extends BaseCustomizer
{
  private final SHADERPART shaderPart;
  private final JTextComponent target;
  private final X3DDataObject xObj;

  /** Creates new form SHADERPARTCustomizer */
  public SHADERPARTCustomizer(SHADERPART shaderPart, JTextComponent target, X3DDataObject xObj)
  {
    super(shaderPart);
    this.shaderPart = shaderPart;
    this.target = target;
    this.xObj = xObj;
    
    HelpCtx.setHelpIDString(this, "SHADERPART_ELEM_HELPID");
    
    initComponents();
    
    super.getDEFUSEpanel().setContainerField("parts");

    typeComboBox.setSelectedItem(shaderPart.getType());
    
    scriptHeader1Lab.setText(SHADERPART.ecmaScriptHeader1);
    scriptHeader2Lab.setText(SHADERPART.ecmaScriptHeader2);
    scriptTrailer1Lab.setText(SHADERPART.ecmaScriptTrailer);
    
   // urlList.setTitle(NbBundle.getMessage(getClass(), "LBL_URLS"));
    urlList.setMasterDocumentLocation(xObj.getPrimaryFile());
    urlList.setUrlData(shaderPart.getUrls());
    urlList.setTarget(target); // enable urlList to reach back into jdom tree to getHeaderIdentifierPath()
    urlList.setMinimumSize(new Dimension(50,50));
    Dimension d = urlList.getPreferredSize();
    urlList.setPreferredSize(new Dimension(d.width,Math.max(50,d.height-70)));
    urlList.setFileChooserScript ();
    urlList.checkUrlValues();

    ECMA_Ta.setText(shaderPart.getEcmaContent());
    boolean doScript = shaderPart.isShowECMA();
    
    includeECMACB.setSelected(doScript);
    toggleECMAWidgets(doScript);

    setDefaultDEFname ();
  }
  private void setDefaultDEFname ()
  {
	if (((urlList == null) || (urlList.getUrlData() == null) || urlList.getUrlData().length == 0))
	{
		super.getDEFUSEpanel().setDefaultDEFname("New" + "ShaderPart");
		return;
	}
    // extract file name (minus extension) as candidate DEF name
    String fileName = urlList.getUrlData()[0];
    if (fileName.contains("/"))
        fileName = fileName.substring(fileName.lastIndexOf("/") + 1);
    if (fileName.contains("\\"))
        fileName = fileName.substring(fileName.lastIndexOf("\\") + 1);
    if (fileName.contains("."))
        fileName = fileName.substring(0,fileName.lastIndexOf("."));
    if (fileName.length() > 0)
        fileName += "ShaaderPart"; // otherwise empty
    
    super.getDEFUSEpanel().setDefaultDEFname(fileName);
   }
   
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        hintPanel = new javax.swing.JPanel();
        contentModelLabel = new javax.swing.JLabel();
        dEFUSEpanel1 = getDEFUSEpanel();
        tablesScriptSplitter = new javax.swing.JSplitPane();
        urlScrollPane = new javax.swing.JScrollPane();
        urlList = new org.web3d.x3d.palette.items.UrlExpandableList2();
        ecmascriptSourcePanel = new javax.swing.JPanel();
        scriptHeader2Lab = new javax.swing.JLabel();
        scriptTrailer1Lab = new javax.swing.JLabel();
        scriptHeader1Lab = new javax.swing.JLabel();
        scriptScrollPane = new javax.swing.JScrollPane();
        ECMA_Ta = new javax.swing.JTextArea();
        includeECMACB = new javax.swing.JCheckBox();
        urlLabel = new javax.swing.JLabel();
        typeLabel = new javax.swing.JLabel();
        typeComboBox = new javax.swing.JComboBox<String>();

        setPreferredSize(new java.awt.Dimension(783, 600));
        setLayout(new java.awt.GridBagLayout());

        hintPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        hintPanel.setLayout(new java.awt.GridBagLayout());

        contentModelLabel.setText("<html><b>ShaderPart</b> defines shader source and is contained by a <b>ComposedShader</b> node");
        contentModelLabel.setToolTipText("ShaderPart defines the source for a single object to be used by a ComposedShader node");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        hintPanel.add(contentModelLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 12, 10, 12);
        add(hintPanel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(dEFUSEpanel1, gridBagConstraints);

        tablesScriptSplitter.setBorder(null);
        tablesScriptSplitter.setDividerLocation(200);
        tablesScriptSplitter.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        tablesScriptSplitter.setResizeWeight(0.5);
        tablesScriptSplitter.setLastDividerLocation(200);
        tablesScriptSplitter.setPreferredSize(new java.awt.Dimension(763, 400));

        urlScrollPane.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 5, 1));
        urlScrollPane.setPreferredSize(new java.awt.Dimension(590, 120));

        urlList.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        urlList.setPreferredSize(new java.awt.Dimension(590, 120));
        urlList.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                urlListPropertyChange(evt);
            }
        });
        urlScrollPane.setViewportView(urlList);

        tablesScriptSplitter.setTopComponent(urlScrollPane);

        ecmascriptSourcePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.BELOW_TOP, new java.awt.Font("Dialog", 0, 12))); // NOI18N
        ecmascriptSourcePanel.setMaximumSize(new java.awt.Dimension(763, 400));
        ecmascriptSourcePanel.setMinimumSize(new java.awt.Dimension(763, 120));
        ecmascriptSourcePanel.setPreferredSize(new java.awt.Dimension(763, 240));

        scriptHeader2Lab.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        scriptHeader2Lab.setText("ecmascript:");

        scriptTrailer1Lab.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        scriptTrailer1Lab.setText("]]>");

        scriptHeader1Lab.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        scriptHeader1Lab.setText("<![CDATA[");

        ECMA_Ta.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        ECMA_Ta.setTabSize(2);
        ECMA_Ta.setPreferredSize(new java.awt.Dimension(500, 160));
        scriptScrollPane.setViewportView(ECMA_Ta);

        includeECMACB.setText(" embed ECMAscript source code");
        includeECMACB.setToolTipText("enable embedded source editor, rather than using external .js file");
        includeECMACB.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        includeECMACB.setMargin(new java.awt.Insets(2, 0, 2, 2));
        includeECMACB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                includeECMACBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ecmascriptSourcePanelLayout = new javax.swing.GroupLayout(ecmascriptSourcePanel);
        ecmascriptSourcePanel.setLayout(ecmascriptSourcePanelLayout);
        ecmascriptSourcePanelLayout.setHorizontalGroup(
            ecmascriptSourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ecmascriptSourcePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ecmascriptSourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scriptScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 735, Short.MAX_VALUE)
                    .addGroup(ecmascriptSourcePanelLayout.createSequentialGroup()
                        .addGroup(ecmascriptSourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scriptHeader1Lab)
                            .addComponent(scriptHeader2Lab))
                        .addGap(94, 94, 94)
                        .addComponent(includeECMACB))
                    .addComponent(scriptTrailer1Lab))
                .addContainerGap())
        );
        ecmascriptSourcePanelLayout.setVerticalGroup(
            ecmascriptSourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ecmascriptSourcePanelLayout.createSequentialGroup()
                .addGroup(ecmascriptSourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ecmascriptSourcePanelLayout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(scriptHeader1Lab)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scriptHeader2Lab))
                    .addGroup(ecmascriptSourcePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(includeECMACB, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scriptScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scriptTrailer1Lab))
        );

        tablesScriptSplitter.setRightComponent(ecmascriptSourcePanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(tablesScriptSplitter, gridBagConstraints);

        urlLabel.setText("<html><b>url array");
        urlLabel.setToolTipText("ordered list of alternate url addresses for script, if not embedded");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(urlLabel, gridBagConstraints);

        typeLabel.setText("type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(typeLabel, gridBagConstraints);

        typeComboBox.setModel(new DefaultComboBoxModel<String>(SHADERPART_ATTR_TYPE_CHOICES));
        typeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(typeComboBox, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

  private void includeECMACBActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_includeECMACBActionPerformed
  {//GEN-HEADEREND:event_includeECMACBActionPerformed
    toggleECMAWidgets(includeECMACB.isSelected());
}//GEN-LAST:event_includeECMACBActionPerformed

  private void typeComboBoxActionPerformed (java.awt.event.ActionEvent evt)//GEN-FIRST:event_typeComboBoxActionPerformed
  {//GEN-HEADEREND:event_typeComboBoxActionPerformed
      // TODO add your handling code here:
  }//GEN-LAST:event_typeComboBoxActionPerformed

    private void urlListPropertyChange(java.beans.PropertyChangeEvent evt)//GEN-FIRST:event_urlListPropertyChange
    {//GEN-HEADEREND:event_urlListPropertyChange
        setDefaultDEFname ();
    }//GEN-LAST:event_urlListPropertyChange
  
  private void toggleECMAWidgets(boolean enable)
  {
    ECMA_Ta.setEnabled(enable);
    scriptHeader1Lab.setEnabled(enable);
    scriptHeader2Lab.setEnabled(enable);
    scriptTrailer1Lab.setEnabled(enable);
  }
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea ECMA_Ta;
    private javax.swing.JLabel contentModelLabel;
    private org.web3d.x3d.palette.items.DEFUSEpanel dEFUSEpanel1;
    private javax.swing.JPanel ecmascriptSourcePanel;
    private javax.swing.JPanel hintPanel;
    private javax.swing.JCheckBox includeECMACB;
    private javax.swing.JLabel scriptHeader1Lab;
    private javax.swing.JLabel scriptHeader2Lab;
    private javax.swing.JScrollPane scriptScrollPane;
    private javax.swing.JLabel scriptTrailer1Lab;
    private javax.swing.JSplitPane tablesScriptSplitter;
    private javax.swing.JComboBox<String> typeComboBox;
    private javax.swing.JLabel typeLabel;
    private javax.swing.JLabel urlLabel;
    private org.web3d.x3d.palette.items.UrlExpandableList2 urlList;
    private javax.swing.JScrollPane urlScrollPane;
    // End of variables declaration//GEN-END:variables

  @Override
  public String getNameKey()
  {
    return "NAME_X3D_SHADERPART";
  }

  @Override
  public void unloadInput()
  {
    unLoadDEFUSE();
    urlList.checkUrlValues();

    shaderPart.setType((String)typeComboBox.getSelectedItem());
    
    shaderPart.setUrls(urlList.getUrlData());
    
    if(includeECMACB.isSelected())
      shaderPart.setEcmaContent(ECMA_Ta.getText());
    else
      shaderPart.setEcmaContent(null);
  }
}
