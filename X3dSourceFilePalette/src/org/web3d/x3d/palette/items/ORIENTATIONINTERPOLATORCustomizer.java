/*
Copyright (c) 1995-2021 held by the author(s) .  All rights reserved.
 
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
 
 * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer
      in the documentation and/or other materials provided with the
      distribution.
 * Neither the names of the Naval Postgraduate School (NPS)
      Modeling Virtual Environments and Simulation (MOVES) Institute
      (http://www.nps.edu and https://MovesInstitute.nps.edu)
      nor the names of its contributors may be used to endorse or
      promote products derived from this software without specific
      prior written permission.
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
 */

package org.web3d.x3d.palette.items;

import javax.swing.text.JTextComponent;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.HelpCtx;
import static org.web3d.x3d.types.X3DPrimitiveTypes.*;

/**
 * ORIENTATIONINTERPOLATORCustomizer.java
 * Created on Sep 11, 2007, 3:05 PM
 *
 * MOVES Institute
 * Naval Postgraduate School, Monterey, CA, USA
 * www.nps.edu
 *
 * @author Mike Bailey, Don Brutzman
 * @version $Id$
 */
public class ORIENTATIONINTERPOLATORCustomizer extends BaseCustomizer
{
  private ORIENTATIONINTERPOLATOR oi;
  private JTextComponent target;
  
  public ORIENTATIONINTERPOLATORCustomizer(ORIENTATIONINTERPOLATOR oi, JTextComponent target)
  {
    super(oi);
    this.oi = oi;
    this.target = target;
                   
    HelpCtx.setHelpIDString(this, "ORIENTATIONINTERPOLATOR_ELEM_HELPID");
    
    initComponents();

    expandableListOrientations.setTitle("key, keyValue arrays");
    expandableListOrientations.setColumnTitles  (new String[]{"#","key","axis-x","axis-y","axis-z","angle"});
    expandableListOrientations.setColumnToolTips(new String[]{"index","key fraction input","rotation axis-x value","rotation axis-y value","rotation axis-z value","rotation angle"});
    expandableListOrientations.setHeaderTooltip ("Interpolator key/keyValue pairs define the output function");
    expandableListOrientations.setNewRowData(new Object[]{"0","0","1","0","0"}); //  key=0, values for zero-degree rotation about Y axis
    expandableListOrientations.doIndexInFirstColumn(true);
    expandableListOrientations.setBoldColumn(1);
    expandableListOrientations.setAngleColumn(5);  // one key entry plus 4-tuple keyValue entry means column 5

    expandableListOrientations.setShowAppendCommasLineBreaks(true);
    expandableListOrientations.setKeyColumnIncluded(true);
    expandableListOrientations.setDoOrientations   (true);
    expandableListOrientations.setInsertCommas    (oi.isInsertCommas());
    expandableListOrientations.setInsertLineBreaks(oi.isInsertLineBreaks());
    
    String[][] saa = oi.getKeysAndValues(); // may be 0-length
    expandableListOrientations.setData(saa);
    
    checkAngles(false);
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        org.web3d.x3d.palette.items.DEFUSEpanel dEFUSEpanel1 = getDEFUSEpanel();
        expandableListOrientations = new org.web3d.x3d.palette.items.ExpandableList();
        normalizeOrientationValuesButton = new javax.swing.JButton();
        computeOrientationAnglesButton = new javax.swing.JButton();
        initialOrientationLabel = new javax.swing.JLabel();
        initialOrientationTextField = new javax.swing.JTextField();
        finalOrientationLabel = new javax.swing.JLabel();
        finalOrientationTextField = new javax.swing.JTextField();
        eventHintPanel = new javax.swing.JPanel();
        eventLabel1 = new javax.swing.JLabel();
        eventLabel2 = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 200;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(dEFUSEpanel1, gridBagConstraints);

        expandableListOrientations.setPreferredSize(new java.awt.Dimension(400, 200));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 338;
        gridBagConstraints.ipady = 54;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(expandableListOrientations, gridBagConstraints);

        normalizeOrientationValuesButton.setText("normalize orientation values");
        normalizeOrientationValuesButton.setToolTipText("rescale axis values as normalized vector (unit length, ranges 0..1), reset angles [0..2pi)");
        normalizeOrientationValuesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                normalizeOrientationValuesButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 6);
        add(normalizeOrientationValuesButton, gridBagConstraints);

        computeOrientationAnglesButton.setText("compute");
        computeOrientationAnglesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                computeOrientationAnglesButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(computeOrientationAnglesButton, gridBagConstraints);

        initialOrientationLabel.setText("initial orientation");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(3, 6, 3, 3);
        add(initialOrientationLabel, gridBagConstraints);

        initialOrientationTextField.setText("0.0");
        initialOrientationTextField.setToolTipText("initial value to modify orientation array");
        initialOrientationTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initialOrientationTextFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 80;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 6);
        add(initialOrientationTextField, gridBagConstraints);

        finalOrientationLabel.setText("final orientation");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(3, 6, 3, 3);
        add(finalOrientationLabel, gridBagConstraints);

        finalOrientationTextField.setText("0.0");
        finalOrientationTextField.setToolTipText("final value to modify orientation array");
        finalOrientationTextField.setName(""); // NOI18N
        finalOrientationTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finalOrientationTextFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 80;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 6);
        add(finalOrientationTextField, gridBagConstraints);

        eventHintPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        eventHintPanel.setLayout(new java.awt.GridBagLayout());

        eventLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        eventLabel1.setText("<html>Primary input event is <b>set_fraction</b>");
        eventLabel1.setToolTipText("Create a ROUTE to connect input and output events");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        eventHintPanel.add(eventLabel1, gridBagConstraints);

        eventLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        eventLabel2.setText("<html>Primary output event is <b>value_changed</b>");
        eventLabel2.setToolTipText("Create a ROUTE to connect input and output events");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        eventHintPanel.add(eventLabel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 3);
        add(eventHintPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void normalizeOrientationValuesButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_normalizeOrientationValuesButtonActionPerformed
    {//GEN-HEADEREND:event_normalizeOrientationValuesButtonActionPerformed
        checkAngles(true);
        double normalizationFactor, x, y, z, angle;
        String[][] saa = expandableListOrientations.getData();
        if      (saa.length == 0) return;
        else
        {
            for (int i=0; i < saa.length; i++)
            {
                x     = new SFDouble(saa[i][1]).getValue();
                y     = new SFDouble(saa[i][2]).getValue();
                z     = new SFDouble(saa[i][3]).getValue();
                angle = new SFDouble(saa[i][4]).getValue();
                normalizationFactor = Math.sqrt(x * x + y * y + z * z);
                if (normalizationFactor == 0.0)
                {
                    NotifyDescriptor descriptor = new NotifyDescriptor.Message(
                            "<html><p align='center'>Found orientation[" + i + "] has zero-magnitude axis, reset to 0 1 0<br /><br />" +
                            "(<b>0 0 0 " + angle + "</b>) becomes (<b>0 1 0 " + angle + "</b>)", NotifyDescriptor.WARNING_MESSAGE);
                    DialogDisplayer.getDefault().notify(descriptor);
                    saa[i][1] = "0";
                    saa[i][2] = "1";
                    saa[i][3] = "0";
                }
                else
                {
                    saa[i][1] = fiveDigitFormat.format(x / normalizationFactor);
                    saa[i][2] = fiveDigitFormat.format(y / normalizationFactor);
                    saa[i][3] = fiveDigitFormat.format(z / normalizationFactor);
                }
                if (angle == -0.0) angle = 0.0;
                while (angle < 0.0)
                {
                    angle += 2.0 * Math.PI;
                }
                while (angle > 2.0 * Math.PI)
                {
                    angle -= 2.0 * Math.PI;
                }
                saa[i][4] = radiansFormat.format(angle);
            }
        }
        expandableListOrientations.setData(saa);
}//GEN-LAST:event_normalizeOrientationValuesButtonActionPerformed

    private void initialOrientationTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initialOrientationTextFieldActionPerformed

        checkOrientationLimitAngles(false);     }//GEN-LAST:event_initialOrientationTextFieldActionPerformed

    private void finalOrientationTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finalOrientationTextFieldActionPerformed

        checkOrientationLimitAngles(false);     }//GEN-LAST:event_finalOrientationTextFieldActionPerformed

    private void computeOrientationAnglesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_computeOrientationAnglesButtonActionPerformed
        checkOrientationLimitAngles (false);
        SFFloat initialAngle = new SFFloat(0.0f);
        SFFloat   finalAngle = new SFFloat(0.0f);
        if (initialOrientationTextField.getText().trim().length() > 0)
           initialAngle = new SFFloat(initialOrientationTextField.getText().trim());
        if (  finalOrientationTextField.getText().trim().length() > 0)
             finalAngle = new SFFloat(  finalOrientationTextField.getText().trim());
        expandableListOrientations.computeRotationAngles(initialAngle.getValue(), finalAngle.getValue());
    }//GEN-LAST:event_computeOrientationAnglesButtonActionPerformed
  
    private boolean largeRadianAnglesConfirmed = false;

    private void checkOrientationLimitAngles(boolean precedesNormalization)
    {
        if (initialOrientationTextField.getText().trim().isEmpty())
            initialOrientationTextField.setText("0.0");
        if (  finalOrientationTextField.getText().trim().isEmpty())
              finalOrientationTextField.setText("0.0");
        // indicate degree values in tooltips
        // usability note:  can enter degree values (-6..+6) as (354..366) to provoke this conversion check
        double angle = Double.valueOf(initialOrientationTextField.getText());
        initialOrientationTextField.setToolTipText(radiansFormat.format(angle) + " radians = " + singleDigitFormat.format(angle * 180.0 / Math.PI) + " degrees");
        if ((Math.abs(angle) > 2.0 * Math.PI) && !largeRadianAnglesConfirmed)
        {
            String message;
            message = "<html><center>Large value provided for <b>finalOrientation</b> angle, which is a radians value.<br/><br/>Convert <b>" + angle + " degrees</b> to <b>" +
                    radiansFormat.format((angle) * Math.PI / 180.0) + " radians</b>"; // do not normalize % 360.0
            if (precedesNormalization)
                 message += " before normalization?";
            else message += "?";
          NotifyDescriptor descriptor = new NotifyDescriptor.Confirmation(
                  message, "X3D angles are in radians", NotifyDescriptor.YES_NO_OPTION);
          if (DialogDisplayer.getDefault().notify(descriptor) == NotifyDescriptor.YES_OPTION)
          {
              angle = (angle) * Math.PI / 180.0; // do not normalize % 360.0
              initialOrientationTextField.setText(radiansFormat.format(angle));
              initialOrientationTextField.setToolTipText(radiansFormat.format(angle) + " radians = " + singleDigitFormat.format(angle * 180.0 / Math.PI) + " degrees");
          }
          if ((angle < 0.0) || (angle > 2.0 * Math.PI))
          {
              largeRadianAnglesConfirmed = true;
              expandableListOrientations.setLargeRadianAnglesConfirmed (true); // ensure correct tooltips on array values
          }
        }
        // do not comment on negative values
        
        angle = Double.valueOf(finalOrientationTextField.getText());
        finalOrientationTextField.setToolTipText(radiansFormat.format(angle) + " radians = " + singleDigitFormat.format(angle * 180.0 / Math.PI) + " degrees");
        if ((Math.abs(angle) > 2.0 * Math.PI) && !largeRadianAnglesConfirmed)
        {
            String message;
            message = "<html><center>Large value provided for <b>finalOrientation</b> angle, which is a radians value.<br/><br/>Convert <b>" + angle + " degrees</b> to <b>" +
                    radiansFormat.format((angle) * Math.PI / 180.0) + " radians</b>"; // do not normalize % 360.0
            if (precedesNormalization)
                 message += " before normalization?";
            else message += "?";
          NotifyDescriptor descriptor = new NotifyDescriptor.Confirmation(
                  message, "X3D angles are in radians", NotifyDescriptor.YES_NO_OPTION);
          if (DialogDisplayer.getDefault().notify(descriptor) == NotifyDescriptor.YES_OPTION)
          {
              angle = (angle) * Math.PI / 180.0; // do not normalize % 360.0
              finalOrientationTextField.setText(radiansFormat.format(angle));
              finalOrientationTextField.setToolTipText(radiansFormat.format(angle) + " radians = " + singleDigitFormat.format(angle * 180.0 / Math.PI) + " degrees");
          }
          if ((angle < 0.0) || (angle > 2.0 * Math.PI))
          {
              largeRadianAnglesConfirmed = true;
              expandableListOrientations.setLargeRadianAnglesConfirmed (true); // ensure correct tooltips on array values
          }
        }
        // do not comment on negative values
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton computeOrientationAnglesButton;
    private javax.swing.JPanel eventHintPanel;
    private javax.swing.JLabel eventLabel1;
    private javax.swing.JLabel eventLabel2;
    private org.web3d.x3d.palette.items.ExpandableList expandableListOrientations;
    private javax.swing.JLabel finalOrientationLabel;
    private javax.swing.JTextField finalOrientationTextField;
    private javax.swing.JLabel initialOrientationLabel;
    private javax.swing.JTextField initialOrientationTextField;
    private javax.swing.JButton normalizeOrientationValuesButton;
    // End of variables declaration//GEN-END:variables

  @Override
  public String getNameKey()
  {
    return "NAME_X3D_ORIENTATIONINTERPOLATOR";
  }

  private void checkAngles(boolean precedesNormalization)
  {
        // usability note:  can enter degree values (-6..+6) as (354..366) to provoke this conversion check
        String[][] saa = expandableListOrientations.getData();

        for (int i = 0; i < saa.length; i++)
        {
            double angle = new SFDouble(saa[i][4]).getValue();
            if (Math.abs(angle) > 2.0 * Math.PI)
            {
                String message;
                message = "<html><center>Large value provided for angle of rotation <b>keyValue[" + i + "]</b>, which is a radians value.<br/><br/>Convert <b>" + angle + " degrees</b> to <b>" +
                        radiansFormat.format((angle % 360.0) * Math.PI / 180.0) + " radians</b>";
                if (precedesNormalization)
                     message += " before normalization?";
                else message += "?";
                NotifyDescriptor descriptor = new NotifyDescriptor.Confirmation(
                        message, "X3D angles are in radians", NotifyDescriptor.YES_NO_OPTION);
                if (DialogDisplayer.getDefault().notify(descriptor) == NotifyDescriptor.YES_OPTION)
                {
                    angle = (angle % 360.0) * Math.PI / 180.0;
                    saa[i][4] = radiansFormat.format(angle);
                }
            }
        }
        expandableListOrientations.setData(saa);
  }

  @Override
  public void unloadInput() throws IllegalArgumentException
  {
    checkAngles(false);

    unLoadDEFUSE();
    
    oi.setKeysAndValues   (expandableListOrientations.getData());
    oi.setInsertCommas    (expandableListOrientations.isInsertCommasSet());
    oi.setInsertLineBreaks(expandableListOrientations.isInsertLineBreaksSet());
  }  
}
