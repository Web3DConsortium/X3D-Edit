/*
Copyright (c) 1995-2021 held by the author(s) .  All rights reserved.
 
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
 
 * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer
      in the documentation and/or other materials provided with the
      distribution.
 * Neither the names of the Naval Postgraduate School (NPS)
      Modeling Virtual Environments and Simulation (MOVES) Institute
      (http://www.nps.edu and https://MovesInstitute.nps.edu)
      nor the names of its contributors may be used to endorse or
      promote products derived from this software without specific
      prior written permission.
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
 */

package org.web3d.x3d.palette.items;

import javax.swing.text.JTextComponent;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.HelpCtx;

/**
 * COLORCustomizer.java
 * Created on July 12, 2007, 3:05 PM
 *
 * MOVES Institute
 * Naval Postgraduate School, Monterey, CA, USA
 * www.nps.edu
 *
 * @author Mike Bailey, Don Brutzman
 * @version $Id$
 */
public class COLORCustomizer extends BaseCustomizer
{
  private final COLOR color;
  private final JTextComponent target;
  
  public COLORCustomizer(COLOR color, JTextComponent target)
  {
    super(color);
    this.color = color;
    this.target = target;
    
    HelpCtx.setHelpIDString(this, "COLOR_ELEM_HELPID");
    
    initComponents();
    
    expandableListColors.setTitle("color array");
    expandableListColors.setColumnTitles  (new String[]{"#","r","g","b","color"});
    expandableListColors.setColumnToolTips(new String[]{"index","red","green","blue","color chooser"});
    expandableListColors.setHeaderTooltip("Red, green, blue values in range [0..1]");
    expandableListColors.setNewRowData(new Object[]{"0.1","0.1","0.1"});
    expandableListColors.doTrailingColorChooser();
    expandableListColors.doIndexInFirstColumn(true);
    expandableListColors.setRedColumn(1); // 0 is index
    
    String[][] saa = color.getColors(); // may be 0-length
    expandableListColors.setData(saa);
    expandableListColors.setShowAppendCommasLineBreaks(true);
    expandableListColors.setInsertCommas    (color.isInsertCommas());
    expandableListColors.setInsertLineBreaks(color.isInsertLineBreaks());
    
    expandableListColors.setTitle("color array (" + saa.length + " total)");
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        org.web3d.x3d.palette.items.DEFUSEpanel dEFUSEpanel1 = getDEFUSEpanel();
        expandableListColors = new org.web3d.x3d.palette.items.ExpandableList();
        hintLabel = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(700, 640));
        setLayout(new java.awt.GridBagLayout());

        dEFUSEpanel1.setMinimumSize(new java.awt.Dimension(198, 77));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(dEFUSEpanel1, gridBagConstraints);

        expandableListColors.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                expandableListColorsPropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(expandableListColors, gridBagConstraints);

        hintLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        hintLabel.setText("<html><p align='center'><b>Color</b> node contains color values</p>");
        hintLabel.setToolTipText("RGB color values are either for sibling Coordinate/CoordinateDouble or parent ElevationGrid node");
        hintLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        hintLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 4;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(hintLabel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void expandableListColorsPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_expandableListColorsPropertyChange
        expandableListColors.setTitle("color array (" + expandableListColors.getRowCount() + " total)");
		checkColorValues ();
    }//GEN-LAST:event_expandableListColorsPropertyChange
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.web3d.x3d.palette.items.ExpandableList expandableListColors;
    private javax.swing.JLabel hintLabel;
    // End of variables declaration//GEN-END:variables

  private void checkColorValues ()
  {
	  String red, green, blue;
	  float  redValue, greenValue, blueValue;
      NotifyDescriptor descriptor;
	  boolean valueChanged = false;
	  String [][] saa = expandableListColors.getData();
	  
 	  for (int row = 0; row < expandableListColors.getRowCount(); row++)
	  {
		    red = saa[row][0]; // column 0 is row number
		  green = saa[row][1];
		   blue = saa[row][2];
		    if (  red.isEmpty()) 
			{
				red = "0";
				valueChanged = true;
			}
		    if (green.isEmpty()) 
			{
				green = "0";
				valueChanged = true;
			}
		    if ( blue.isEmpty()) 
			{
				blue = "0";
				valueChanged = true;
			}
		  if ((  red.matches("\\d+") && (Integer.parseInt(  red) > 1) && (Integer.parseInt(  red) < 255)) ||
			  (green.matches("\\d+") && (Integer.parseInt(green) > 1) && (Integer.parseInt(green) < 255)) ||
			  ( blue.matches("\\d+") && (Integer.parseInt( blue) > 1) && (Integer.parseInt( blue) < 255)))
		  {
			    redValue = Float.parseFloat(  red) / 255.0f;
			  greenValue = Float.parseFloat(green) / 255.0f;
			   blueValue = Float.parseFloat( blue) / 255.0f;
			   
				String message = "<html><center>Large HTML color value found for color[<b>" + (row) + "</b>]=<b>" 
						+ red + " " + green + " " + blue
						+ "</b>,<br/> which is greater than maximum X3D RGB range of [0..1]" 
						+ ".<br/><br/>Convert color[<b>" + (row) + "</b>] value to <b>"
						+ redValue + " " + greenValue + " " + blueValue + " " + "</b>?";
				descriptor = new NotifyDescriptor.Confirmation(
						message, "Color value incorrect!", NotifyDescriptor.YES_NO_CANCEL_OPTION);
				Object userChoice = DialogDisplayer.getDefault().notify(descriptor);
				if      (userChoice == NotifyDescriptor.YES_OPTION)
				{
						saa[row][0] = Float.toString(redValue);
						saa[row][1] = Float.toString(greenValue);
						saa[row][2] = Float.toString(blueValue);
						valueChanged = true;
				}
				else if (userChoice == NotifyDescriptor.CANCEL_OPTION)
				{
					return; // no more checks, do not save modifications
				}
		  }
	  }
	  if (valueChanged)
	  {
		  expandableListColors.setData(saa);
	  }
  }
  @Override
  public String getNameKey()
  {
    return "NAME_X3D_COLOR";
  }

  @Override
  public void unloadInput() throws IllegalArgumentException
  {
    unLoadDEFUSE();

    color.setColors(expandableListColors.getData());
    color.setInsertCommas    (expandableListColors.isInsertCommasSet());
    color.setInsertLineBreaks(expandableListColors.isInsertLineBreaksSet());
  }  
}
