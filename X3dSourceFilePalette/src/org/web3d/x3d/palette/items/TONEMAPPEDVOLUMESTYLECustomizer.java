/*
Copyright (c) 1995-2021 held by the author(s) .  All rights reserved.
 
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
 
 * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer
      in the documentation and/or other materials provided with the
      distribution.
 * Neither the names of the Naval Postgraduate School (NPS)
      Modeling Virtual Environments and Simulation (MOVES) Institute
      (http://www.nps.edu and https://MovesInstitute.nps.edu)
      nor the names of its contributors may be used to endorse or
      promote products derived from this software without specific
      prior written permission.
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
 */

package org.web3d.x3d.palette.items;

import java.awt.Color;
import javax.swing.text.JTextComponent;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.HelpCtx;
import static org.web3d.x3d.types.X3DPrimitiveTypes.*;

/**
 * TONEMAPPEDVOLUMESTYLECustomizer.java
 * Created on 19 November 2011
 *
 * MOVES Institute
 * Naval Postgraduate School, Monterey, CA, USA
 * www.nps.edu
 *
 * @author Mike Bailey and Don Brutzman
 * @version $Id$
 */
public class TONEMAPPEDVOLUMESTYLECustomizer extends BaseCustomizer
{
  private TONEMAPPEDVOLUMESTYLE toneMappedVolumeStyle;
  private JTextComponent target;
  
  /** Creates new form TONEMAPPEDVOLUMESTYLECustomizer
   * @param toneMappedVolumeStyle
   * @param target  
   */
  public TONEMAPPEDVOLUMESTYLECustomizer(TONEMAPPEDVOLUMESTYLE toneMappedVolumeStyle, JTextComponent target)
  {
    super(toneMappedVolumeStyle);
    this.toneMappedVolumeStyle = toneMappedVolumeStyle;
    this.target = target;
    
    HelpCtx.setHelpIDString(this, "TONEMAPPEDVOLUMESTYLE_ELEM_HELPID");
    
    initComponents();
    
            enabledCB.setSelected(toneMappedVolumeStyle.isEnabled());
    
      coolColorRedTF.setText(toneMappedVolumeStyle.getCoolColorRed());
    coolColorGreenTF.setText(toneMappedVolumeStyle.getCoolColorGreen());
     coolColorBlueTF.setText(toneMappedVolumeStyle.getCoolColorBlue());
    coolColorChooser.setColor(
             (new SFColor(coolColorRedTF.getText(), 
                          coolColorGreenTF.getText(),
                          coolColorBlueTF.getText())).getColor());
    coolColorAlphaTF.setText(toneMappedVolumeStyle.getCoolColorAlpha());
    coolColorAlphaSliderUpdate ();
    
      warmColorRedTF.setText(toneMappedVolumeStyle.getWarmColorRed());
    warmColorGreenTF.setText(toneMappedVolumeStyle.getWarmColorGreen());
     warmColorBlueTF.setText(toneMappedVolumeStyle.getWarmColorBlue());
    warmColorChooser.setColor(
             (new SFColor(warmColorRedTF.getText(), 
                          warmColorGreenTF.getText(),
                          warmColorBlueTF.getText())).getColor());
    warmColorAlphaTF.setText(toneMappedVolumeStyle.getWarmColorAlpha());
    warmColorAlphaSliderUpdate ();
  }
 
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        dEFUSEpanel1 = getDEFUSEpanel();
        enabledLabel = new javax.swing.JLabel();
        enabledCB = new javax.swing.JCheckBox();
        coolColorLabel = new javax.swing.JLabel();
        coolColorRedTF = new javax.swing.JFormattedTextField();
        coolColorGreenTF = new javax.swing.JFormattedTextField();
        coolColorBlueTF = new javax.swing.JFormattedTextField();
        coolColorChooser = new net.java.dev.colorchooser.ColorChooser();
        coolColorAlphaTF = new javax.swing.JFormattedTextField();
        coolColorAlphaSlider = new javax.swing.JSlider();
        warmColorLabel = new javax.swing.JLabel();
        warmColorRedTF = new javax.swing.JFormattedTextField();
        warmColorGreenTF = new javax.swing.JFormattedTextField();
        warmColorBlueTF = new javax.swing.JFormattedTextField();
        warmColorChooser = new net.java.dev.colorchooser.ColorChooser();
        warmColorAlphaTF = new javax.swing.JFormattedTextField();
        warmColorAlphaSlider = new javax.swing.JSlider();
        nodeHintPanel = new javax.swing.JPanel();
        hintLabel1 = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        dEFUSEpanel1.setMinimumSize(new java.awt.Dimension(198, 77));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(dEFUSEpanel1, gridBagConstraints);

        enabledLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        enabledLabel.setText("enabled");
        enabledLabel.setToolTipText("Enables/disables node operation");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(enabledLabel, gridBagConstraints);

        enabledCB.setToolTipText("Enables/disables node operation");
        enabledCB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(enabledCB, gridBagConstraints);

        coolColorLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        coolColorLabel.setText("coolColor");
        coolColorLabel.setToolTipText(org.openide.util.NbBundle.getMessage(TONEMAPPEDVOLUMESTYLECustomizer.class, "MATERIALCustomizer.diffuseColorLabel.toolTipText")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(coolColorLabel, gridBagConstraints);

        coolColorRedTF.setColumns(3);
        coolColorRedTF.setText(org.openide.util.NbBundle.getMessage(TONEMAPPEDVOLUMESTYLECustomizer.class, "NewJPanel.diffuseColorRedTF.text")); // NOI18N
        coolColorRedTF.setToolTipText(org.openide.util.NbBundle.getMessage(TONEMAPPEDVOLUMESTYLECustomizer.class, "MATERIALCustomizer.diffuseColorRedTF.toolTipText")); // NOI18N
        coolColorRedTF.setMinimumSize(new java.awt.Dimension(6, 15));
        coolColorRedTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coolColorRedTFActionPerformed(evt);
            }
        });
        coolColorRedTF.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                coolColorRedTFPropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(coolColorRedTF, gridBagConstraints);

        coolColorGreenTF.setColumns(3);
        coolColorGreenTF.setText(org.openide.util.NbBundle.getMessage(TONEMAPPEDVOLUMESTYLECustomizer.class, "NewJPanel.diffuseColorGreenTF.text")); // NOI18N
        coolColorGreenTF.setToolTipText(org.openide.util.NbBundle.getMessage(TONEMAPPEDVOLUMESTYLECustomizer.class, "MATERIALCustomizer.diffuseColorGreenTF.toolTipText")); // NOI18N
        coolColorGreenTF.setMinimumSize(new java.awt.Dimension(6, 15));
        coolColorGreenTF.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                coolColorGreenTFPropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(coolColorGreenTF, gridBagConstraints);

        coolColorBlueTF.setColumns(3);
        coolColorBlueTF.setText(org.openide.util.NbBundle.getMessage(TONEMAPPEDVOLUMESTYLECustomizer.class, "NewJPanel.diffuseColorBlueTF.text")); // NOI18N
        coolColorBlueTF.setToolTipText(org.openide.util.NbBundle.getMessage(TONEMAPPEDVOLUMESTYLECustomizer.class, "MATERIALCustomizer.diffuseColorBlueTF.toolTipText")); // NOI18N
        coolColorBlueTF.setMinimumSize(new java.awt.Dimension(6, 15));
        coolColorBlueTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coolColorBlueTFActionPerformed(evt);
            }
        });
        coolColorBlueTF.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                coolColorBlueTFPropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(coolColorBlueTF, gridBagConstraints);

        coolColorChooser.setMinimumSize(new java.awt.Dimension(15, 15));
        coolColorChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coolColorChooserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout coolColorChooserLayout = new javax.swing.GroupLayout(coolColorChooser);
        coolColorChooser.setLayout(coolColorChooserLayout);
        coolColorChooserLayout.setHorizontalGroup(
            coolColorChooserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 22, Short.MAX_VALUE)
        );
        coolColorChooserLayout.setVerticalGroup(
            coolColorChooserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 23, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(coolColorChooser, gridBagConstraints);

        coolColorAlphaTF.setColumns(3);
        coolColorAlphaTF.setText(org.openide.util.NbBundle.getMessage(TONEMAPPEDVOLUMESTYLECustomizer.class, "NewJPanel.transparencyTF.text")); // NOI18N
        coolColorAlphaTF.setToolTipText("alpha opaqueness value [0..1]");
        coolColorAlphaTF.setMinimumSize(new java.awt.Dimension(6, 15));
        coolColorAlphaTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coolColorAlphaTFActionPerformed(evt);
            }
        });
        coolColorAlphaTF.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                coolColorAlphaTFPropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(coolColorAlphaTF, gridBagConstraints);

        coolColorAlphaSlider.setToolTipText(org.openide.util.NbBundle.getMessage(TONEMAPPEDVOLUMESTYLECustomizer.class, "MATERIALCustomizer.transparencySlider.toolTipText")); // NOI18N
        coolColorAlphaSlider.setMaximumSize(new java.awt.Dimension(100, 25));
        coolColorAlphaSlider.setPreferredSize(new java.awt.Dimension(100, 25));
        coolColorAlphaSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                coolColorAlphaSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.67;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(coolColorAlphaSlider, gridBagConstraints);

        warmColorLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        warmColorLabel.setText("warmColor");
        warmColorLabel.setToolTipText(org.openide.util.NbBundle.getMessage(TONEMAPPEDVOLUMESTYLECustomizer.class, "MATERIALCustomizer.diffuseColorLabel.toolTipText")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(warmColorLabel, gridBagConstraints);

        warmColorRedTF.setColumns(3);
        warmColorRedTF.setText(org.openide.util.NbBundle.getMessage(TONEMAPPEDVOLUMESTYLECustomizer.class, "NewJPanel.diffuseColorRedTF.text")); // NOI18N
        warmColorRedTF.setToolTipText(org.openide.util.NbBundle.getMessage(TONEMAPPEDVOLUMESTYLECustomizer.class, "MATERIALCustomizer.diffuseColorRedTF.toolTipText")); // NOI18N
        warmColorRedTF.setMinimumSize(new java.awt.Dimension(6, 15));
        warmColorRedTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                warmColorRedTFActionPerformed(evt);
            }
        });
        warmColorRedTF.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                warmColorRedTFPropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(warmColorRedTF, gridBagConstraints);

        warmColorGreenTF.setColumns(3);
        warmColorGreenTF.setText(org.openide.util.NbBundle.getMessage(TONEMAPPEDVOLUMESTYLECustomizer.class, "NewJPanel.diffuseColorGreenTF.text")); // NOI18N
        warmColorGreenTF.setToolTipText(org.openide.util.NbBundle.getMessage(TONEMAPPEDVOLUMESTYLECustomizer.class, "MATERIALCustomizer.diffuseColorGreenTF.toolTipText")); // NOI18N
        warmColorGreenTF.setMinimumSize(new java.awt.Dimension(6, 15));
        warmColorGreenTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                warmColorGreenTFActionPerformed(evt);
            }
        });
        warmColorGreenTF.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                warmColorGreenTFPropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(warmColorGreenTF, gridBagConstraints);

        warmColorBlueTF.setColumns(3);
        warmColorBlueTF.setText(org.openide.util.NbBundle.getMessage(TONEMAPPEDVOLUMESTYLECustomizer.class, "NewJPanel.diffuseColorBlueTF.text")); // NOI18N
        warmColorBlueTF.setToolTipText(org.openide.util.NbBundle.getMessage(TONEMAPPEDVOLUMESTYLECustomizer.class, "MATERIALCustomizer.diffuseColorBlueTF.toolTipText")); // NOI18N
        warmColorBlueTF.setMinimumSize(new java.awt.Dimension(6, 15));
        warmColorBlueTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                warmColorBlueTFActionPerformed(evt);
            }
        });
        warmColorBlueTF.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                warmColorBlueTFPropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(warmColorBlueTF, gridBagConstraints);

        warmColorChooser.setMinimumSize(new java.awt.Dimension(15, 15));
        warmColorChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                warmColorChooserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout warmColorChooserLayout = new javax.swing.GroupLayout(warmColorChooser);
        warmColorChooser.setLayout(warmColorChooserLayout);
        warmColorChooserLayout.setHorizontalGroup(
            warmColorChooserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 22, Short.MAX_VALUE)
        );
        warmColorChooserLayout.setVerticalGroup(
            warmColorChooserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 23, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(warmColorChooser, gridBagConstraints);

        warmColorAlphaTF.setColumns(3);
        warmColorAlphaTF.setText(org.openide.util.NbBundle.getMessage(TONEMAPPEDVOLUMESTYLECustomizer.class, "NewJPanel.transparencyTF.text")); // NOI18N
        warmColorAlphaTF.setToolTipText("alpha opaqueness value [0..1]");
        warmColorAlphaTF.setMinimumSize(new java.awt.Dimension(6, 15));
        warmColorAlphaTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                warmColorAlphaTFActionPerformed(evt);
            }
        });
        warmColorAlphaTF.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                warmColorAlphaTFPropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(warmColorAlphaTF, gridBagConstraints);

        warmColorAlphaSlider.setToolTipText(org.openide.util.NbBundle.getMessage(TONEMAPPEDVOLUMESTYLECustomizer.class, "MATERIALCustomizer.transparencySlider.toolTipText")); // NOI18N
        warmColorAlphaSlider.setMaximumSize(new java.awt.Dimension(100, 25));
        warmColorAlphaSlider.setPreferredSize(new java.awt.Dimension(100, 25));
        warmColorAlphaSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                warmColorAlphaSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.67;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(warmColorAlphaSlider, gridBagConstraints);

        nodeHintPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        nodeHintPanel.setLayout(new java.awt.GridBagLayout());

        hintLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        hintLabel1.setText("<html><p align='center'><b>ToneMappedVolumeStyle</b> contains a 3D texture node defining the surfaceNormals.</p>");
        hintLabel1.setToolTipText("multiple style nodes can be applied to volume data");
        hintLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        nodeHintPanel.add(hintLabel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(nodeHintPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
  private void coolColorChooserUpdate()
  {
    coolColorChooser.setColor(
             (new SFColor(coolColorRedTF.getText(), 
                          coolColorGreenTF.getText(),
                          coolColorBlueTF.getText())).getColor());
  }
  private void warmColorChooserUpdate()
  {
    warmColorChooser.setColor(
             (new SFColor(warmColorRedTF.getText(), 
                          warmColorGreenTF.getText(),
                          warmColorBlueTF.getText())).getColor());
  }
    private void coolColorRedTFPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_coolColorRedTFPropertyChange
        coolColorChooserUpdate();
    }//GEN-LAST:event_coolColorRedTFPropertyChange

    private void coolColorGreenTFPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_coolColorGreenTFPropertyChange
        coolColorChooserUpdate();
    }//GEN-LAST:event_coolColorGreenTFPropertyChange

    private void coolColorBlueTFPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_coolColorBlueTFPropertyChange
        coolColorChooserUpdate();
    }//GEN-LAST:event_coolColorBlueTFPropertyChange

    private void coolColorAlphaTFPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_coolColorAlphaTFPropertyChange
        if (!(evt.getPropertyName().equals("value"))) { // || evt.getPropertyName().equals("editValid"))) {
            return;
        }
        coolColorAlphaSliderUpdate ();
    }//GEN-LAST:event_coolColorAlphaTFPropertyChange
    private void coolColorAlphaSliderUpdate ()
    {
        double alpha = (new SFDouble(coolColorAlphaTF.getText()).getValue());
        if ((alpha < 0.0) || (alpha > 1.0))
        {
            String warningMessage = "Illegal coolColor alpha=" + alpha + ", opaqueness value must be in range [0..1], reset to 1.0";
            System.out.println(warningMessage);
            NotifyDescriptor descriptor = new NotifyDescriptor.Message(
                    warningMessage, NotifyDescriptor.WARNING_MESSAGE);
            DialogDisplayer.getDefault().notify(descriptor);
            alpha = 1.0;
        }
        coolColorAlphaSlider.setValue((int)(alpha*100.0));
    }    
    private void warmColorAlphaSliderUpdate ()
    {
        double alpha = (new SFDouble(warmColorAlphaTF.getText()).getValue());
        if ((alpha < 0.0) || (alpha > 1.0))
        {
            String warningMessage = "Illegal warmColor alpha=" + alpha + ", opaqueness value must be in range [0..1], reset to 1.0";
            System.out.println(warningMessage);
            NotifyDescriptor descriptor = new NotifyDescriptor.Message(
                    warningMessage, NotifyDescriptor.WARNING_MESSAGE);
            DialogDisplayer.getDefault().notify(descriptor);
            alpha = 1.0;
        }
        warmColorAlphaSlider.setValue((int)(alpha*100.0));
    }
    private void coolColorAlphaSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_coolColorAlphaSliderStateChanged
        int value = coolColorAlphaSlider.getValue();
        coolColorAlphaTF.setValue((float) value / 100.0f);
    }//GEN-LAST:event_coolColorAlphaSliderStateChanged

    private void coolColorChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coolColorChooserActionPerformed
       Color c = coolColorChooser.getColor();
         coolColorRedTF.setValue(Float.toString((float)c.getRed()   / 255.0f));
       coolColorGreenTF.setValue(Float.toString((float)c.getGreen() / 255.0f));
        coolColorBlueTF.setValue(Float.toString((float)c.getBlue()  / 255.0f));
    }//GEN-LAST:event_coolColorChooserActionPerformed

    private void warmColorRedTFPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_warmColorRedTFPropertyChange
        warmColorChooserUpdate();
    }//GEN-LAST:event_warmColorRedTFPropertyChange

    private void warmColorGreenTFPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_warmColorGreenTFPropertyChange
        warmColorChooserUpdate();
    }//GEN-LAST:event_warmColorGreenTFPropertyChange

    private void warmColorBlueTFPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_warmColorBlueTFPropertyChange
        warmColorChooserUpdate();
    }//GEN-LAST:event_warmColorBlueTFPropertyChange

    private void warmColorChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_warmColorChooserActionPerformed
       Color c = warmColorChooser.getColor();
         warmColorRedTF.setValue(Float.toString((float)c.getRed()   / 255.0f));
       warmColorGreenTF.setValue(Float.toString((float)c.getGreen() / 255.0f));
        warmColorBlueTF.setValue(Float.toString((float)c.getBlue()  / 255.0f));
    }//GEN-LAST:event_warmColorChooserActionPerformed

    private void warmColorAlphaTFPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_warmColorAlphaTFPropertyChange
        if (!(evt.getPropertyName().equals("value"))) 
        {
            return;
        }
        warmColorAlphaSliderUpdate ();
    }//GEN-LAST:event_warmColorAlphaTFPropertyChange

    private void warmColorAlphaSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_warmColorAlphaSliderStateChanged
        int value = warmColorAlphaSlider.getValue();
        warmColorAlphaTF.setValue((float) value / 100.0f);
    }//GEN-LAST:event_warmColorAlphaSliderStateChanged

    private void coolColorRedTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coolColorRedTFActionPerformed
        coolColorChooserUpdate();
    }//GEN-LAST:event_coolColorRedTFActionPerformed

    private void coolColorGreenTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coolColorGreenTFActionPerformed
        coolColorChooserUpdate();
    }//GEN-LAST:event_coolColorGreenTFActionPerformed

    private void coolColorBlueTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coolColorBlueTFActionPerformed
        coolColorChooserUpdate();
    }//GEN-LAST:event_coolColorBlueTFActionPerformed

    private void coolColorAlphaTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coolColorAlphaTFActionPerformed
        coolColorAlphaSliderUpdate();
    }//GEN-LAST:event_coolColorAlphaTFActionPerformed

    private void warmColorRedTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_warmColorRedTFActionPerformed
        warmColorChooserUpdate();
    }//GEN-LAST:event_warmColorRedTFActionPerformed

    private void warmColorGreenTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_warmColorGreenTFActionPerformed
        warmColorChooserUpdate();
    }//GEN-LAST:event_warmColorGreenTFActionPerformed

    private void warmColorBlueTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_warmColorBlueTFActionPerformed
        warmColorChooserUpdate();
    }//GEN-LAST:event_warmColorBlueTFActionPerformed

    private void warmColorAlphaTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_warmColorAlphaTFActionPerformed
        warmColorAlphaSliderUpdate();
    }//GEN-LAST:event_warmColorAlphaTFActionPerformed
  
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSlider coolColorAlphaSlider;
    private javax.swing.JFormattedTextField coolColorAlphaTF;
    private javax.swing.JFormattedTextField coolColorBlueTF;
    private net.java.dev.colorchooser.ColorChooser coolColorChooser;
    private javax.swing.JFormattedTextField coolColorGreenTF;
    private javax.swing.JLabel coolColorLabel;
    private javax.swing.JFormattedTextField coolColorRedTF;
    private org.web3d.x3d.palette.items.DEFUSEpanel dEFUSEpanel1;
    private javax.swing.JCheckBox enabledCB;
    private javax.swing.JLabel enabledLabel;
    private javax.swing.JLabel hintLabel1;
    private javax.swing.JPanel nodeHintPanel;
    private javax.swing.JSlider warmColorAlphaSlider;
    private javax.swing.JFormattedTextField warmColorAlphaTF;
    private javax.swing.JFormattedTextField warmColorBlueTF;
    private net.java.dev.colorchooser.ColorChooser warmColorChooser;
    private javax.swing.JFormattedTextField warmColorGreenTF;
    private javax.swing.JLabel warmColorLabel;
    private javax.swing.JFormattedTextField warmColorRedTF;
    // End of variables declaration//GEN-END:variables

  @Override
  public String getNameKey()
  {
    return "NAME_X3D_TONEMAPPEDVOLUMESTYLE";
  }

  @Override
  public void unloadInput()
  {
    unLoadDEFUSE();
    
    toneMappedVolumeStyle.setEnabled(enabledCB.isSelected());
    toneMappedVolumeStyle.setWarmColor(
              coolColorRedTF.getText().trim() + " " +
            coolColorGreenTF.getText().trim() + " " +
             coolColorBlueTF.getText().trim() + " " +
            coolColorAlphaTF.getText().trim() + " ");
    toneMappedVolumeStyle.setParallelColor(
              warmColorRedTF.getText().trim() + " " +
            warmColorGreenTF.getText().trim() + " " +
             warmColorBlueTF.getText().trim() + " " +
            warmColorAlphaTF.getText().trim() + " ");
  }   
}
