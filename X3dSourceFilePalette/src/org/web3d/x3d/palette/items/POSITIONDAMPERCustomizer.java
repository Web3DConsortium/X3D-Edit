/*
Copyright (c) 1995-2021 held by the author(s) .  All rights reserved.
 
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
 
 * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer
      in the documentation and/or other materials provided with the
      distribution.
 * Neither the names of the Naval Postgraduate School (NPS)
      Modeling Virtual Environments and Simulation (MOVES) Institute
      (http://www.nps.edu and https://MovesInstitute.nps.edu)
      nor the names of its contributors may be used to endorse or
      promote products derived from this software without specific
      prior written permission.
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
 */

package org.web3d.x3d.palette.items;

import javax.swing.text.JTextComponent;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.HelpCtx;
import static org.web3d.x3d.types.X3DPrimitiveTypes.*;
/**
 * POSITIONDAMPERCustomizer.java
 * Created on 6 February 2010
 *
 * MOVES Institute
 * Naval Postgraduate School, Monterey, CA, USA
 * www.nps.edu
 *
 * @author Mike Bailey, Don Brutzman
 * @version $Id$
 */
public class POSITIONDAMPERCustomizer extends BaseCustomizer
{
  private POSITIONDAMPER positionDamper;
  private JTextComponent target;

  public POSITIONDAMPERCustomizer(POSITIONDAMPER positionDamper, JTextComponent target)
  {
    super(positionDamper);
    this.positionDamper = positionDamper;
    this.target = target;
                   
    HelpCtx.setHelpIDString(this, "POSITIONDAMPER_ELEM_HELPID");
    
    initComponents();

          tauTF.setText            (positionDamper.getTau());
    toleranceTF.setText            (positionDamper.getTolerance());
    orderComboBox.setSelectedIndex (positionDamper.getOrder());

    initialValue0TextField.setText (positionDamper.getInitialValue0().toString ());
    initialValue1TextField.setText (positionDamper.getInitialValue1().toString ());
    initialValue2TextField.setText (positionDamper.getInitialValue2().toString ());

    initialDestination0TextField.setText (positionDamper.getInitialDestination0().toString ());
    initialDestination1TextField.setText (positionDamper.getInitialDestination1().toString ());
    initialDestination2TextField.setText (positionDamper.getInitialDestination2().toString ());
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        org.web3d.x3d.palette.items.DEFUSEpanel dEFUSEpanel1 = getDEFUSEpanel();
        tauLabel = new javax.swing.JLabel();
        tauTF = new javax.swing.JTextField();
        toleranceLabel = new javax.swing.JLabel();
        toleranceTF = new javax.swing.JTextField();
        orderLabel = new javax.swing.JLabel();
        orderComboBox = new javax.swing.JComboBox<String>();
        initialValueLabel = new javax.swing.JLabel();
        initialDestinationLabel = new javax.swing.JLabel();
        initialValue0TextField = new javax.swing.JTextField();
        initialValue1TextField = new javax.swing.JTextField();
        initialValue2TextField = new javax.swing.JTextField();
        initialDestination0TextField = new javax.swing.JTextField();
        initialDestination1TextField = new javax.swing.JTextField();
        initialDestination2TextField = new javax.swing.JTextField();
        followerFigureLabel = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(dEFUSEpanel1, gridBagConstraints);

        tauLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        tauLabel.setText("tau");
        tauLabel.setToolTipText("time constant for filter response in seconds");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 20, 3, 3);
        add(tauLabel, gridBagConstraints);

        tauTF.setToolTipText("time constant for filter response in seconds");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(tauTF, gridBagConstraints);

        toleranceLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        toleranceLabel.setText("tolerance");
        toleranceLabel.setToolTipText("absolute value for satisfactory completion proximity (-1 lets browser choose)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 20, 3, 3);
        add(toleranceLabel, gridBagConstraints);

        toleranceTF.setToolTipText("absolute value for satisfactory completion proximity (-1 lets browser choose)");
        toleranceTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toleranceTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(toleranceTF, gridBagConstraints);

        orderLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        orderLabel.setText("order");
        orderLabel.setToolTipText("number of internal filters (larger means smoother response, longer delay)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 20, 3, 3);
        add(orderLabel, gridBagConstraints);

        orderComboBox.setModel(new javax.swing.DefaultComboBoxModel<String>(new String[] { "0", "1", "2", "3", "4", "5" }));
        orderComboBox.setToolTipText("number of internal filters (larger means smoother response, longer delay)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(orderComboBox, gridBagConstraints);

        initialValueLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        initialValueLabel.setText("initialValue");
        initialValueLabel.setToolTipText("initial starting value\\");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
            gridBagConstraints.insets = new java.awt.Insets(3, 20, 3, 3);
            add(initialValueLabel, gridBagConstraints);

            initialDestinationLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
            initialDestinationLabel.setText("initialDestination");
            initialDestinationLabel.setToolTipText("initial goal value");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
            gridBagConstraints.insets = new java.awt.Insets(3, 20, 3, 3);
            add(initialDestinationLabel, gridBagConstraints);

            initialValue0TextField.setToolTipText("initial starting value\\");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.ipadx = 100;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
                add(initialValue0TextField, gridBagConstraints);

                initialValue1TextField.setToolTipText("initial starting value\\");
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 2;
                    gridBagConstraints.gridy = 4;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                    gridBagConstraints.ipadx = 100;
                    gridBagConstraints.weightx = 1.0;
                    gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
                    add(initialValue1TextField, gridBagConstraints);

                    initialValue2TextField.setToolTipText("initial starting value\\");
                        gridBagConstraints = new java.awt.GridBagConstraints();
                        gridBagConstraints.gridx = 3;
                        gridBagConstraints.gridy = 4;
                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                        gridBagConstraints.ipadx = 100;
                        gridBagConstraints.weightx = 1.0;
                        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 20);
                        add(initialValue2TextField, gridBagConstraints);

                        initialDestination0TextField.setToolTipText("initial goal value");
                        gridBagConstraints = new java.awt.GridBagConstraints();
                        gridBagConstraints.gridx = 1;
                        gridBagConstraints.gridy = 5;
                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                        gridBagConstraints.ipadx = 100;
                        gridBagConstraints.weightx = 1.0;
                        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
                        add(initialDestination0TextField, gridBagConstraints);

                        initialDestination1TextField.setToolTipText("initial goal value");
                        gridBagConstraints = new java.awt.GridBagConstraints();
                        gridBagConstraints.gridx = 2;
                        gridBagConstraints.gridy = 5;
                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                        gridBagConstraints.ipadx = 100;
                        gridBagConstraints.weightx = 1.0;
                        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
                        add(initialDestination1TextField, gridBagConstraints);

                        initialDestination2TextField.setToolTipText("initial goal value");
                        gridBagConstraints = new java.awt.GridBagConstraints();
                        gridBagConstraints.gridx = 3;
                        gridBagConstraints.gridy = 5;
                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                        gridBagConstraints.ipadx = 100;
                        gridBagConstraints.weightx = 1.0;
                        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 20);
                        add(initialDestination2TextField, gridBagConstraints);

                        followerFigureLabel.setBackground(new java.awt.Color(255, 255, 255));
                        followerFigureLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                        followerFigureLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/web3d/x3d/palette/items/resources/follower_1.png"))); // NOI18N
                        followerFigureLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 3, 3, 3));
                        gridBagConstraints = new java.awt.GridBagConstraints();
                        gridBagConstraints.gridx = 0;
                        gridBagConstraints.gridy = 6;
                        gridBagConstraints.gridwidth = 5;
                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
                        add(followerFigureLabel, gridBagConstraints);
                    }// </editor-fold>//GEN-END:initComponents

    private void toleranceTFActionPerformed (java.awt.event.ActionEvent evt)//GEN-FIRST:event_toleranceTFActionPerformed
    {//GEN-HEADEREND:event_toleranceTFActionPerformed
        checkTolerance ();
    }//GEN-LAST:event_toleranceTFActionPerformed
    private void checkTolerance ()
    {
        SFFloat tolerance = new SFFloat(toleranceTF.getText());
        if ((tolerance.getValue() < 0.0f) && (tolerance.getValue() != -1.0f))
        {
            String message;
            message = "<html><p align='center'>Illegal negative value for <b>tolerance</b>, which must be</p>" +
                       "<p align='center'>0.0 (exact match), positive (absolute value) or -1 (browser choice)</p>" +
                       "<br/><p align='center'>Use positive value for tolerance?</p>";
            NotifyDescriptor descriptor = new NotifyDescriptor.Confirmation(
                    message, "Use positive value for tolerance?", NotifyDescriptor.YES_NO_OPTION);
            if (DialogDisplayer.getDefault().notify(descriptor) == NotifyDescriptor.YES_OPTION)
            {
               toleranceTF.setText(Float.toString(Math.abs(tolerance.getValue())));
            }
        }    
    }  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel followerFigureLabel;
    private javax.swing.JTextField initialDestination0TextField;
    private javax.swing.JTextField initialDestination1TextField;
    private javax.swing.JTextField initialDestination2TextField;
    private javax.swing.JLabel initialDestinationLabel;
    private javax.swing.JTextField initialValue0TextField;
    private javax.swing.JTextField initialValue1TextField;
    private javax.swing.JTextField initialValue2TextField;
    private javax.swing.JLabel initialValueLabel;
    private javax.swing.JComboBox<String> orderComboBox;
    private javax.swing.JLabel orderLabel;
    private javax.swing.JLabel tauLabel;
    private javax.swing.JTextField tauTF;
    private javax.swing.JLabel toleranceLabel;
    private javax.swing.JTextField toleranceTF;
    // End of variables declaration//GEN-END:variables

  @Override
  public String getNameKey()
  {
    return "NAME_X3D_POSITIONDAMPER";
  }

  @Override
  public void unloadInput() throws IllegalArgumentException
  {
    unLoadDEFUSE();

    checkTolerance ();
    positionDamper.setTau                 (      tauTF.getText().trim());
    positionDamper.setTolerance           (toleranceTF.getText().trim());
    positionDamper.setOrder               (orderComboBox.getSelectedItem().toString());
    positionDamper.setInitialValue0       (new SFFloat(initialValue0TextField.getText().trim(), null, null));
    positionDamper.setInitialValue1       (new SFFloat(initialValue1TextField.getText().trim(), null, null));
    positionDamper.setInitialValue2       (new SFFloat(initialValue2TextField.getText().trim(), null, null));
    positionDamper.setInitialDestination0 (new SFFloat(initialDestination0TextField.getText().trim(), null, null));
    positionDamper.setInitialDestination1 (new SFFloat(initialDestination1TextField.getText().trim(), null, null));
    positionDamper.setInitialDestination2 (new SFFloat(initialDestination2TextField.getText().trim(), null, null));
  }  
}
