/*
Copyright (c) 1995-2021 held by the author(s) .  All rights reserved.
 
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
 
 * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer
      in the documentation and/or other materials provided with the
      distribution.
 * Neither the names of the Naval Postgraduate School (NPS)
      Modeling Virtual Environments and Simulation (MOVES) Institute
      (http://www.nps.edu and https://MovesInstitute.nps.edu)
      nor the names of its contributors may be used to endorse or
      promote products derived from this software without specific
      prior written permission.
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * BackgroundContentPanel.java
 *
 * Created on May 27, 2008, 10:34 AM
 */
package org.web3d.x3d.palette.items;

import java.awt.Dialog;
import java.awt.Dimension;
import javax.swing.text.JTextComponent;
import org.openide.filesystems.FileObject;

/**
 *
 * @author  mike
 */
public class BackgroundContentPanel extends javax.swing.JPanel
{
  private        BACKGROUNDCustomizer        backgroundCustomizer;
  private TEXTUREBACKGROUNDCustomizer textureBackgroundCustomizer;

  private JTextComponent target;
  
  private boolean urlListsVisible = true;
  
  public BackgroundContentPanel(BACKGROUNDCustomizer backgroundCustomizer)
  {
    this.backgroundCustomizer = backgroundCustomizer;
    
    initComponents();
    
       skyAngleColorList.setAngleColumn(0);
    groundAngleColorList.setAngleColumn(0);
    groundAngleColorList.setSortOrderAscending (false);
       skyAngleColorList.setAngleColumnIncluded(true);
    groundAngleColorList.setAngleColumnIncluded(true);
        
      leftUrlExpandableList2.setFileChooserImage();
     rightUrlExpandableList2.setFileChooserImage();
     frontUrlExpandableList2.setFileChooserImage();
      backUrlExpandableList2.setFileChooserImage();
       topUrlExpandableList2.setFileChooserImage();
    bottomUrlExpandableList2.setFileChooserImage();
  }
  
  public BackgroundContentPanel(TEXTUREBACKGROUNDCustomizer textureBackgroundCustomizer)
  {
    this.textureBackgroundCustomizer = textureBackgroundCustomizer;
    
    initComponents();
    
       skyAngleColorList.setAngleColumn(0);
    groundAngleColorList.setAngleColumn(0);
  }

    /**
     * @param target target is passed from implementing node containing this UrlExpandableList2 component
     */
    public void setTarget(JTextComponent target)
    {
        this.target = target;
        
      leftUrlExpandableList2.setTarget(target); // enable urlList to reach back into jdom tree to getHeaderIdentifierPath()
     rightUrlExpandableList2.setTarget(target);
     frontUrlExpandableList2.setTarget(target);
      backUrlExpandableList2.setTarget(target);
       topUrlExpandableList2.setTarget(target);
    bottomUrlExpandableList2.setTarget(target);
    }

    /**
     * @param parentFile location is passed from implementing node containing this UrlExpandableList2 component
     */
    public void setMasterDocumentLocation(FileObject parentFile)
    {
      leftUrlExpandableList2.setMasterDocumentLocation(parentFile); // enable urlList to find local files
     rightUrlExpandableList2.setMasterDocumentLocation(parentFile);
     frontUrlExpandableList2.setMasterDocumentLocation(parentFile);
      backUrlExpandableList2.setMasterDocumentLocation(parentFile);
       topUrlExpandableList2.setMasterDocumentLocation(parentFile);
    bottomUrlExpandableList2.setMasterDocumentLocation(parentFile);
    }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        backgroundEditorTabbedPane = new javax.swing.JTabbedPane();
        skyAngleColorEditorPanel = new javax.swing.JPanel();
        skyAngleColorList = new org.web3d.x3d.palette.items.ExpandableList();
        skyLabel = new javax.swing.JLabel();
        resetSkyButt = new javax.swing.JButton();
        float fsz = (float)resetSkyButt.getFont().getSize();
        resetSkyButt.setFont(resetSkyButt.getFont().deriveFont(fsz-2));
        skyAngleDescriptionLabel = new javax.swing.JLabel();
        groundAngleColorEditorPanel = new javax.swing.JPanel();
        resetGroundButt = new javax.swing.JButton();
        float fsz2 = (float)resetGroundButt.getFont().getSize();
        resetGroundButt.setFont(resetGroundButt.getFont().deriveFont(fsz2-2));
        groundLabel = new javax.swing.JLabel();
        groundAngleColorList = new org.web3d.x3d.palette.items.ExpandableList();
        groundAngleDescriptionLabel = new javax.swing.JLabel();
        leftUrlExpandableList2 = new org.web3d.x3d.palette.items.UrlExpandableList2();
        rightUrlExpandableList2 = new org.web3d.x3d.palette.items.UrlExpandableList2();
        frontUrlExpandableList2 = new org.web3d.x3d.palette.items.UrlExpandableList2();
        backUrlExpandableList2 = new org.web3d.x3d.palette.items.UrlExpandableList2();
        topUrlExpandableList2 = new org.web3d.x3d.palette.items.UrlExpandableList2();
        bottomUrlExpandableList2 = new org.web3d.x3d.palette.items.UrlExpandableList2();

        setLayout(new java.awt.GridBagLayout());

        backgroundEditorTabbedPane.setMinimumSize(new java.awt.Dimension(600, 400));
        backgroundEditorTabbedPane.setPreferredSize(new java.awt.Dimension(600, 400));

        skyAngleColorEditorPanel.setLayout(new java.awt.GridBagLayout());

        skyAngleColorList.setBorder(null);
        skyAngleColorList.setToolTipText(org.openide.util.NbBundle.getMessage(BackgroundContentPanel.class, "BackgroundContentPanel.skyAngleColorList.toolTipText")); // NOI18N
        skyAngleColorList.setPreferredSize(new java.awt.Dimension(320, 100));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.ipady = 200;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        skyAngleColorEditorPanel.add(skyAngleColorList, gridBagConstraints);

        skyLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        skyLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        skyLabel.setText(org.openide.util.NbBundle.getMessage(BackgroundContentPanel.class, "BackgroundContentPanel.skyLabel.text")); // NOI18N
        skyLabel.setToolTipText(org.openide.util.NbBundle.getMessage(BackgroundContentPanel.class, "BackgroundContentPanel.skyLabel.toolTipText")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        skyAngleColorEditorPanel.add(skyLabel, gridBagConstraints);

        resetSkyButt.setText(org.openide.util.NbBundle.getMessage(BackgroundContentPanel.class, "BackgroundContentPanel.resetSkyButt.text")); // NOI18N
        resetSkyButt.setToolTipText(org.openide.util.NbBundle.getMessage(BackgroundContentPanel.class, "BackgroundContentPanel.resetSkyButt.toolTipText")); // NOI18N
        resetSkyButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetSkyButtActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LAST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        skyAngleColorEditorPanel.add(resetSkyButt, gridBagConstraints);

        skyAngleDescriptionLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        skyAngleDescriptionLabel.setText(org.openide.util.NbBundle.getMessage(BackgroundContentPanel.class, "BackgroundContentPanel.skyAngleDescriptionLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(3, 6, 3, 3);
        skyAngleColorEditorPanel.add(skyAngleDescriptionLabel, gridBagConstraints);

        backgroundEditorTabbedPane.addTab(org.openide.util.NbBundle.getMessage(BackgroundContentPanel.class, "BackgroundContentPanel.skyAngleColorEditorPanel.TabConstraints.tabTitle"), skyAngleColorEditorPanel); // NOI18N

        groundAngleColorEditorPanel.setLayout(new java.awt.GridBagLayout());

        resetGroundButt.setText(org.openide.util.NbBundle.getMessage(BackgroundContentPanel.class, "BackgroundContentPanel.resetGroundButt.text")); // NOI18N
        resetGroundButt.setToolTipText(org.openide.util.NbBundle.getMessage(BackgroundContentPanel.class, "BackgroundContentPanel.resetGroundButt.toolTipText")); // NOI18N
        resetGroundButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetGroundButtActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        groundAngleColorEditorPanel.add(resetGroundButt, gridBagConstraints);

        groundLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        groundLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        groundLabel.setText(org.openide.util.NbBundle.getMessage(BackgroundContentPanel.class, "BackgroundContentPanel.groundLabel.text")); // NOI18N
        groundLabel.setToolTipText(org.openide.util.NbBundle.getMessage(BackgroundContentPanel.class, "BackgroundContentPanel.groundLabel.toolTipText")); // NOI18N
        groundLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        groundAngleColorEditorPanel.add(groundLabel, gridBagConstraints);

        groundAngleColorList.setBorder(null);
        groundAngleColorList.setToolTipText(org.openide.util.NbBundle.getMessage(BackgroundContentPanel.class, "BackgroundContentPanel.groundAngleColorList.toolTipText")); // NOI18N
        groundAngleColorList.setPreferredSize(new java.awt.Dimension(320, 100));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.ipady = 200;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        groundAngleColorEditorPanel.add(groundAngleColorList, gridBagConstraints);

        groundAngleDescriptionLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        groundAngleDescriptionLabel.setText(org.openide.util.NbBundle.getMessage(BackgroundContentPanel.class, "BackgroundContentPanel.groundAngleDescriptionLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 60;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(3, 6, 3, 3);
        groundAngleColorEditorPanel.add(groundAngleDescriptionLabel, gridBagConstraints);

        backgroundEditorTabbedPane.addTab(org.openide.util.NbBundle.getMessage(BackgroundContentPanel.class, "BackgroundContentPanel.groundAngleColorEditorPanel.TabConstraints.tabTitle"), groundAngleColorEditorPanel); // NOI18N

        leftUrlExpandableList2.setMaximumSize(new java.awt.Dimension(32769, 32769));
        leftUrlExpandableList2.setMinimumSize(new java.awt.Dimension(0, 140));
        leftUrlExpandableList2.setPreferredSize(new java.awt.Dimension(25, 140));
        leftUrlExpandableList2.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                leftUrlExpandableList2PropertyChange(evt);
            }
        });
        backgroundEditorTabbedPane.addTab(org.openide.util.NbBundle.getMessage(BackgroundContentPanel.class, "BackgroundContentPanel.leftUrlExpandableList2.TabConstraints.tabTitle"), leftUrlExpandableList2); // NOI18N

        rightUrlExpandableList2.setMaximumSize(new java.awt.Dimension(32769, 32769));
        rightUrlExpandableList2.setMinimumSize(new java.awt.Dimension(0, 140));
        rightUrlExpandableList2.setPreferredSize(new java.awt.Dimension(25, 140));
        rightUrlExpandableList2.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                rightUrlExpandableList2PropertyChange(evt);
            }
        });
        backgroundEditorTabbedPane.addTab(org.openide.util.NbBundle.getMessage(BackgroundContentPanel.class, "BackgroundContentPanel.rightUrlExpandableList2.TabConstraints.tabTitle"), rightUrlExpandableList2); // NOI18N

        frontUrlExpandableList2.setMaximumSize(new java.awt.Dimension(32769, 32769));
        frontUrlExpandableList2.setMinimumSize(new java.awt.Dimension(0, 140));
        frontUrlExpandableList2.setPreferredSize(new java.awt.Dimension(25, 140));
        frontUrlExpandableList2.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                frontUrlExpandableList2PropertyChange(evt);
            }
        });
        backgroundEditorTabbedPane.addTab(org.openide.util.NbBundle.getMessage(BackgroundContentPanel.class, "BackgroundContentPanel.frontUrlExpandableList2.TabConstraints.tabTitle"), frontUrlExpandableList2); // NOI18N

        backUrlExpandableList2.setMaximumSize(new java.awt.Dimension(32769, 32769));
        backUrlExpandableList2.setMinimumSize(new java.awt.Dimension(0, 140));
        backUrlExpandableList2.setPreferredSize(new java.awt.Dimension(25, 140));
        backUrlExpandableList2.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                backUrlExpandableList2PropertyChange(evt);
            }
        });
        backgroundEditorTabbedPane.addTab(org.openide.util.NbBundle.getMessage(BackgroundContentPanel.class, "BackgroundContentPanel.backUrlExpandableList2.TabConstraints.tabTitle"), backUrlExpandableList2); // NOI18N

        topUrlExpandableList2.setMaximumSize(new java.awt.Dimension(32769, 32769));
        topUrlExpandableList2.setMinimumSize(new java.awt.Dimension(0, 140));
        topUrlExpandableList2.setPreferredSize(new java.awt.Dimension(25, 140));
        topUrlExpandableList2.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                topUrlExpandableList2PropertyChange(evt);
            }
        });
        backgroundEditorTabbedPane.addTab(org.openide.util.NbBundle.getMessage(BackgroundContentPanel.class, "BackgroundContentPanel.topUrlExpandableList2.TabConstraints.tabTitle"), topUrlExpandableList2); // NOI18N

        bottomUrlExpandableList2.setMaximumSize(new java.awt.Dimension(32769, 32769));
        bottomUrlExpandableList2.setMinimumSize(new java.awt.Dimension(0, 140));
        bottomUrlExpandableList2.setPreferredSize(new java.awt.Dimension(25, 140));
        bottomUrlExpandableList2.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                bottomUrlExpandableList2PropertyChange(evt);
            }
        });
        backgroundEditorTabbedPane.addTab(org.openide.util.NbBundle.getMessage(BackgroundContentPanel.class, "BackgroundContentPanel.bottomUrlExpandableList2.TabConstraints.tabTitle"), bottomUrlExpandableList2); // NOI18N

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 200;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(backgroundEditorTabbedPane, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

private void resetSkyButtActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_resetSkyButtActionPerformed
{//GEN-HEADEREND:event_resetSkyButtActionPerformed
  if             (backgroundCustomizer != null)
                  backgroundCustomizer.setupSkyTableDefault();
  else if (textureBackgroundCustomizer != null)
           textureBackgroundCustomizer.setupSkyTableDefault();
  this.validate();
}//GEN-LAST:event_resetSkyButtActionPerformed

private void resetGroundButtActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_resetGroundButtActionPerformed
{//GEN-HEADEREND:event_resetGroundButtActionPerformed
  if             (backgroundCustomizer != null)
                  backgroundCustomizer.setUpGroundTableDefault();
  else if (textureBackgroundCustomizer != null)
           textureBackgroundCustomizer.setUpGroundTableDefault();
  this.validate();
}//GEN-LAST:event_resetGroundButtActionPerformed

    private void leftUrlExpandableList2PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_leftUrlExpandableList2PropertyChange

    }//GEN-LAST:event_leftUrlExpandableList2PropertyChange

    private void rightUrlExpandableList2PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_rightUrlExpandableList2PropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_rightUrlExpandableList2PropertyChange

    private void frontUrlExpandableList2PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_frontUrlExpandableList2PropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_frontUrlExpandableList2PropertyChange

    private void backUrlExpandableList2PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_backUrlExpandableList2PropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_backUrlExpandableList2PropertyChange

    private void topUrlExpandableList2PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_topUrlExpandableList2PropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_topUrlExpandableList2PropertyChange

    private void bottomUrlExpandableList2PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_bottomUrlExpandableList2PropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_bottomUrlExpandableList2PropertyChange

  private void adjustDialogWidthIfNeeded(Dialog dial, String[] data)
  {
    int maxWidth = 0;
    for (String s : data) {
      int slen = s.length();
      if (slen > maxWidth) {
        maxWidth = slen;
      }
    }
    if (maxWidth > 40) {
      Dimension d = dial.getPreferredSize();
      dial.setSize(new Dimension(d.width + 250, d.height));
    }
  }

  String addLFs(String s)
  {
    if (s == null || s.trim().length() <= 0) {
      return s;
    }

    return s.replaceAll("\\\"\\s*\\\"", "\"\n\"");   // put in lf
  }

  String removeLFs(String s)
  {
    if (s == null || s.trim().length() <= 0) {
      return s;
    }

    return s.replaceAll("\n", " ");  // put in sp
  }

  String addQuotes(String[] sa)
  {
    StringBuilder sb = new StringBuilder();
    for (String s : sa) {
      sb.append('"');
      sb.append(s);
      sb.append("\" ");
    }
    return sb.toString().trim();
  }

  private String[]   backUrls;
  private String[] bottomUrls;
  private String[]  frontUrls;
  private String[]   leftUrls;
  private String[]  rightUrls;
  private String[]    topUrls;

  // !!! don't rename or camel-case the following:  I'm getting them by reflection
  public String[] getbackUrls()
  {
    backUrlExpandableList2.checkUrlValues();
    return backUrls;
  }

  public void setBackUrls(String[] backUrl)
  {
    this.backUrls = backUrl;
    backUrlExpandableList2.setUrlData(backUrls);
    backUrlExpandableList2.checkUrlValues();
//    commonSet(backUrl, backUrlTA);
  }

  public String[] getbottomUrls()
  {
    bottomUrlExpandableList2.checkUrlValues();
    return bottomUrls;
  }

  public void setBottomUrls(String[] bottomUrl)
  {
    this.bottomUrls = bottomUrl;
    bottomUrlExpandableList2.setUrlData(bottomUrls);
    bottomUrlExpandableList2.checkUrlValues();
//    commonSet(bottomUrl, bottomUrlTA);
  }

  public String[] getfrontUrls()
  {
    frontUrlExpandableList2.checkUrlValues();
    return frontUrls;
  }

  public void setFrontUrls(String[] frontUrl)
  {
    this.frontUrls = frontUrl;
    frontUrlExpandableList2.setUrlData(frontUrls);
    frontUrlExpandableList2.checkUrlValues();
//    commonSet(frontUrl, frontUrlTA);
  }

  public String[] getleftUrls()
  {
    leftUrlExpandableList2.checkUrlValues();
    return leftUrls;
  }

  public void setLeftUrls(String[] leftUrl)
  {
    this.leftUrls = leftUrl;
    leftUrlExpandableList2.setUrlData(leftUrls);
    leftUrlExpandableList2.checkUrlValues();
//    commonSet(leftUrl, leftUrlTA);
  }

  public String[] getrightUrls()
  {
    rightUrlExpandableList2.checkUrlValues();
    return rightUrls;
  }

  public void setRightUrls(String[] rightUrl)
  {
    this.rightUrls = rightUrl;
    rightUrlExpandableList2.setUrlData(rightUrls);
    rightUrlExpandableList2.checkUrlValues();
//    commonSet(rightUrl, rightUrlTA);
  }

  public String[] gettopUrls()
  {
    topUrlExpandableList2.checkUrlValues();
    return topUrls;
  }

  public void setTopUrls(String[] topUrl)
  {
    this.topUrls = topUrl;
    topUrlExpandableList2.setUrlData(topUrls);
    topUrlExpandableList2.checkUrlValues();
//    commonSet(topUrl, topUrlTA);
  }

  /* The point of this is to keep the grid bag layout from assuming the minimum size of the component
   * is based on the text given to it.  Each "setText()" causes the components minimum size to be set.  Here,
   * we keep it small and allow the user to control with the size of the dialog box. Gridbaglayout will honor
   * minimum size, which is causing us the problem. */
//  private void commonSet(String[] url, JLabel ta)
//  {
//    Dimension d = ta.getMinimumSize();
//    String s = addQuotes(url);
//    ta.setText(s);
//    //String nuts = s.replace("\" ","\"\n");
//    ta.setToolTipText("<html>" + s.replace("\" ", "\"<br>"));   // multiline
//    ta.setMinimumSize(new Dimension(d.height, d.height));  // not a typo, allow the smallest size to be a little box
//  }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.web3d.x3d.palette.items.UrlExpandableList2 backUrlExpandableList2;
    private javax.swing.JTabbedPane backgroundEditorTabbedPane;
    private org.web3d.x3d.palette.items.UrlExpandableList2 bottomUrlExpandableList2;
    private org.web3d.x3d.palette.items.UrlExpandableList2 frontUrlExpandableList2;
    private javax.swing.JPanel groundAngleColorEditorPanel;
    org.web3d.x3d.palette.items.ExpandableList groundAngleColorList;
    private javax.swing.JLabel groundAngleDescriptionLabel;
    private javax.swing.JLabel groundLabel;
    private org.web3d.x3d.palette.items.UrlExpandableList2 leftUrlExpandableList2;
    private javax.swing.JButton resetGroundButt;
    private javax.swing.JButton resetSkyButt;
    private org.web3d.x3d.palette.items.UrlExpandableList2 rightUrlExpandableList2;
    private javax.swing.JPanel skyAngleColorEditorPanel;
    org.web3d.x3d.palette.items.ExpandableList skyAngleColorList;
    private javax.swing.JLabel skyAngleDescriptionLabel;
    private javax.swing.JLabel skyLabel;
    private org.web3d.x3d.palette.items.UrlExpandableList2 topUrlExpandableList2;
    // End of variables declaration//GEN-END:variables

    /**
     * @return whether urlListVisible is true or false
     */
    protected boolean areUrlListsVisible() {
        return urlListsVisible;
    }

    /**
     * @param urlListsVisible whether urlListsVisible is true or false
     */
    protected void setUrlListsVisible(boolean urlListsVisible)
    {
        this.urlListsVisible = urlListsVisible;
        if (urlListsVisible)
            return;
        
        // the setVisible block does not seem to be working inside a tabbed pane
//          leftUrlExpandableList2.setVisible(urlListsVisible);
//         rightUrlExpandableList2.setVisible(urlListsVisible);
//         frontUrlExpandableList2.setVisible(urlListsVisible);
//          backUrlExpandableList2.setVisible(urlListsVisible);
//           topUrlExpandableList2.setVisible(urlListsVisible);
//        bottomUrlExpandableList2.setVisible(urlListsVisible);
        
        backgroundEditorTabbedPane.remove(7);
        backgroundEditorTabbedPane.remove(6);
        backgroundEditorTabbedPane.remove(5);
        backgroundEditorTabbedPane.remove(4);
        backgroundEditorTabbedPane.remove(3);
        backgroundEditorTabbedPane.remove(2);
    }

    /**
     * Remember changes to the expandable list arrays
     */
    public void refreshUrlListValues()
    {
         setLeftUrls(  leftUrlExpandableList2.getUrlData());
        setRightUrls( rightUrlExpandableList2.getUrlData());
        setFrontUrls( frontUrlExpandableList2.getUrlData());
         setBackUrls(  backUrlExpandableList2.getUrlData());
          setTopUrls(   topUrlExpandableList2.getUrlData());
       setBottomUrls(bottomUrlExpandableList2.getUrlData());
    }
}
