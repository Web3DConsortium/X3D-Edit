/*
Copyright (c) 1995-2025 held by the author(s).  All rights reserved.
 
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
 
 * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer
      in the documentation and/or other materials provided with the
      distribution.
 * Neither the names of the Naval Postgraduate School (NPS)
      Modeling Virtual Environments and Simulation (MOVES) Institute
      (https://www.nps.edu and https://MovesInstitute.nps.edu)
      nor the names of its contributors may be used to endorse or
      promote products derived from this software without specific
      prior written permission.
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
 */

package org.web3d.x3d.palette.items;

import java.awt.Color;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JTextField;
import javax.swing.text.JTextComponent;
import org.openide.util.HelpCtx;
import org.openide.util.NbBundle;
import static org.web3d.x3d.types.X3DSchemaData.*;

/**
 * HANIMPOSECustomizer.java
 * 
 * @author Don Brutzman
 * @version $Id$
 */
public class HANIMPOSECustomizer extends BaseCustomizer
{
  private HANIMPOSE HANIMPOSE;
  private JTextComponent target;
  private JTextField[] moiArray;
  
  private String  localPrefix = new String();
     
    /**
     * Creates new form HANIMPOSECustomizer
     * @param HANIMPOSE data of interest
     * @param target Swing component of interest
     */
    public HANIMPOSECustomizer(HANIMPOSE HANIMPOSE, JTextComponent target)
  {
    super(HANIMPOSE);
    this.HANIMPOSE = HANIMPOSE;
    this.target = target;
    
    HelpCtx.setHelpIDString(this, "HANIMPOSE_ELEM_HELPID");
    
    initComponents();
    
    super.getDEFUSEpanel().setContainerFieldChoices(HANIMPOSE_CONTAINERFIELD_CHOICES, HANIMPOSE_CONTAINERFIELD_TOOLTIPS);
    super.getDEFUSEpanel().setContainerField(HANIMPOSE.getContainerField()); // reset value to match updated JComboBox data model
    // DEFUSEpanel initialization must NOT be repeated or else array of choices will be overwritten
    
    // TODO checkX3D4FieldSupportDialog("HAnimPose",""); // X3D4.1 node
    
     descriptionTF.setText(HANIMPOSE.getDescription());
            nameTF.setText(HANIMPOSE.getName());
       loaComboBox.setSelectedItem(HANIMPOSE.getLoa());
    
         enabledCB.setSelected  (HANIMPOSE.isEnabled());
resetOtherJointsCB.setSelected  (HANIMPOSE.isResetOtherJoints());
      
    transitionDurationTF.setText(HANIMPOSE.getTransitionDuration());

    if (!HANIMPOSE.getName().isBlank() &&
        super.getDEFUSEpanel().getDEF().endsWith(HANIMPOSE.getName())) // successful name match
    {
        localPrefix = super.getDEFUSEpanel().getDEF().substring(0,super.getDEFUSEpanel().getDEF().lastIndexOf(HANIMPOSE.getName()));
    }
//    checkHumanoidRootSpelling();
    setDefaultDEFname();
    checkNameDefMatchRules();
  }
  private void setDefaultDEFname()
  {
    String newDefaultName = loaComboBox.getSelectedItem().toString().trim();
    if (!localPrefix.isBlank())
    {
        if (!localPrefix.endsWith("_"))
             localPrefix += "_";
        newDefaultName = localPrefix + newDefaultName;
    }
    else newDefaultName = NbBundle.getMessage(getClass(),getNameKey()) + newDefaultName;
    // TODO if available, use prefix from ancestor HAnimHumanoid
    
    super.getDEFUSEpanel().setDefaultDEFname(newDefaultName);
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        org.web3d.x3d.palette.items.DEFUSEpanel dEFUSEpanel1 = getDEFUSEpanel();
        nameLabel = new javax.swing.JLabel();
        nameWarningLabel = new javax.swing.JLabel();
        descriptionLabel = new javax.swing.JLabel();
        descriptionTF = new javax.swing.JTextField();
        loaLabel = new javax.swing.JLabel();
        loaComboBox = new javax.swing.JComboBox<>();
        enabledLabel = new javax.swing.JLabel();
        enabledCB = new javax.swing.JCheckBox();
        resetOtherJointsLabel = new javax.swing.JLabel();
        resetOtherJointsCB = new javax.swing.JCheckBox();
        transitionDurationLabel = new javax.swing.JLabel();
        transitionDurationTF = new javax.swing.JTextField();
        nameTF = new javax.swing.JTextField();
        nodeHintPanel = new javax.swing.JPanel();
        hintLabel = new javax.swing.JLabel();
        spacerLabel = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(640, 400));
        setPreferredSize(new java.awt.Dimension(640, 400));
        setLayout(new java.awt.GridBagLayout());

        dEFUSEpanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dEFUSEpanel1MouseClicked(evt);
            }
        });
        dEFUSEpanel1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                dEFUSEpanel1KeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(dEFUSEpanel1, gridBagConstraints);

        nameLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        nameLabel.setText("name");
        nameLabel.setToolTipText("Usually a unique name attribute so that HAnimPose node can be identified at runtime for animation purposes");
        nameLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                nameLabelMouseEntered(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(nameLabel, gridBagConstraints);

        nameWarningLabel.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        nameWarningLabel.setText("name must have a legal value. no name attribute is allowed for USE nodes.");
        nameWarningLabel.setToolTipText("HAnim has strict rules for name and DEF");
        nameWarningLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                nameWarningLabelMouseEntered(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(nameWarningLabel, gridBagConstraints);

        descriptionLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        descriptionLabel.setText("description");
        descriptionLabel.setToolTipText("Text description to be displayed for action of this node");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(descriptionLabel, gridBagConstraints);

        descriptionTF.setForeground(new java.awt.Color(0, 153, 153));
        descriptionTF.setToolTipText("(X3D4) Author-provided prose that describes intended purpose of the node");
        descriptionTF.setMinimumSize(new java.awt.Dimension(50, 20));
        descriptionTF.setPreferredSize(new java.awt.Dimension(50, 20));
        descriptionTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descriptionTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(descriptionTF, gridBagConstraints);

        loaLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        loaLabel.setText("loa");
        loaLabel.setToolTipText("Level of Articulation");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(loaLabel, gridBagConstraints);

        loaComboBox.setEditable(true);
        loaComboBox.setFont(new java.awt.Font("Courier New", 1, 12)); // NOI18N
        loaComboBox.setModel(new DefaultComboBoxModel<String>(HANIMHUMANOID_ATTR_LOA_CHOICES));
        loaComboBox.setToolTipText("select HAnimPose level of articulation (LOA)");
        loaComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                loaComboBoxItemStateChanged(evt);
            }
        });
        loaComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                loaComboBoxFocusGained(evt);
            }
        });
        loaComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                loaComboBoxMouseEntered(evt);
            }
        });
        loaComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loaComboBoxActionPerformed(evt);
            }
        });
        loaComboBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                loaComboBoxKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(loaComboBox, gridBagConstraints);

        enabledLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        enabledLabel.setText("enabled");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(enabledLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(3, 1, 3, 3);
        add(enabledCB, gridBagConstraints);

        resetOtherJointsLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        resetOtherJointsLabel.setText("resetOtherJoints");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(resetOtherJointsLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(3, 1, 3, 3);
        add(resetOtherJointsCB, gridBagConstraints);

        transitionDurationLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        transitionDurationLabel.setText("transitionDuration");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(transitionDurationLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.25;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(transitionDurationTF, gridBagConstraints);

        nameTF.setToolTipText("Usually a unique name attribute so that HAnimPose node can be identified at runtime for animation purposes");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.25;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(nameTF, gridBagConstraints);

        nodeHintPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        nodeHintPanel.setPreferredSize(null);
        nodeHintPanel.setLayout(new java.awt.GridBagLayout());

        hintLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        hintLabel.setText("<html> <p align=\"center\"><b>HAnimPose</b> defines specific rotations for each body segment of interest in a skeleton.   \n <br />    \nThe pose node contains a set of <b>HAnimJoint</b> nodes, each with containerField='poseJoints' \n <br />  that are not rendered and cannot USE other HAnimJoint nodes in the <bHAnimHumanoid</b>skeleton. </p>\n <br />    \n<p align=\"center\"> Input fields are <i>commencePose</i>, <i>set_fraction</i>, andb<i>set_startTime</i> to trigger pose transitions.\n<br /> \nOutput field <i>isActive</i> reports when an <b>HAnimPose</b> animation starts and finishes. </p>");
        hintLabel.setToolTipText("close this panel to add children nodes");
        hintLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        hintLabel.setMaximumSize(new java.awt.Dimension(2147483647, 1666666));
        hintLabel.setMinimumSize(new java.awt.Dimension(28, 16));
        hintLabel.setPreferredSize(new java.awt.Dimension(600, 100));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        nodeHintPanel.add(hintLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(nodeHintPanel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(spacerLabel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void descriptionTFActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_descriptionTFActionPerformed
    {//GEN-HEADEREND:event_descriptionTFActionPerformed
        checkX3D4_1_FieldSupportDialog("HAnimPOSE","description"); // X3D4.0 node
    }//GEN-LAST:event_descriptionTFActionPerformed

    private void dEFUSEpanel1KeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_dEFUSEpanel1KeyReleased
    {//GEN-HEADEREND:event_dEFUSEpanel1KeyReleased
        setDefaultDEFname ();
        checkNameDefMatchRules();
    }//GEN-LAST:event_dEFUSEpanel1KeyReleased

    private void nameWarningLabelMouseEntered(java.awt.event.MouseEvent evt)//GEN-FIRST:event_nameWarningLabelMouseEntered
    {//GEN-HEADEREND:event_nameWarningLabelMouseEntered
        setDefaultDEFname ();
        checkNameDefMatchRules();
    }//GEN-LAST:event_nameWarningLabelMouseEntered

    private void nameLabelMouseEntered(java.awt.event.MouseEvent evt)//GEN-FIRST:event_nameLabelMouseEntered
    {//GEN-HEADEREND:event_nameLabelMouseEntered
        setDefaultDEFname ();
        checkNameDefMatchRules();
    }//GEN-LAST:event_nameLabelMouseEntered

    private void dEFUSEpanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dEFUSEpanel1MouseClicked
        setDefaultDEFname ();
        checkNameDefMatchRules();
    }//GEN-LAST:event_dEFUSEpanel1MouseClicked

    private void loaComboBoxKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_loaComboBoxKeyReleased
        setDefaultDEFname ();
        checkNameDefMatchRules();
    }//GEN-LAST:event_loaComboBoxKeyReleased

    private void loaComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loaComboBoxActionPerformed
        setDefaultDEFname ();
        checkNameDefMatchRules();
    }//GEN-LAST:event_loaComboBoxActionPerformed

    private void loaComboBoxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loaComboBoxMouseEntered
        setDefaultDEFname ();
        checkNameDefMatchRules();
    }//GEN-LAST:event_loaComboBoxMouseEntered

    private void loaComboBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_loaComboBoxFocusGained
        setDefaultDEFname ();
        checkNameDefMatchRules();
    }//GEN-LAST:event_loaComboBoxFocusGained

    private void loaComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_loaComboBoxItemStateChanged
        setDefaultDEFname ();
        checkNameDefMatchRules();
    }//GEN-LAST:event_loaComboBoxItemStateChanged

  @Override
  public String getNameKey()
  {
    return "NAME_X3D_HANIMPOSE"; // consistent name munging for readability, in this case
  }
    private void checkNameDefMatchRules()
    {
        String NAME_REQUIRED      = "name must have a legal value";
        String NAME_RULE_MATCH    = "successful name match: DEF = prefix + name";
        String NAME_RULE_MISMATCH = "name mismatch: DEF must match prefix + name";
  
        String DEF    = super.getDEFUSEpanel().getDEF();
        String name   = loaComboBox.getSelectedItem().toString();
        
        Color  burntorange = new Color(191,  87,  0);
        Color   darkorange = new Color(255, 140,  0);
        Color   darkgreen  = new Color( 21,  71, 52);
        
        loaComboBox.setEnabled(true); // default
        if (getDEFUSEpanel().isUSE())
        {
            // no name for USE node
            nameWarningLabel.setText("no name attribute is allowed for USE node");
            nameWarningLabel.setForeground(Color.BLACK);
            loaComboBox.setBackground(Color.WHITE);
            loaComboBox.setEnabled(false);
        }
        else if (name.isBlank())
        {
            nameWarningLabel.setText(NAME_REQUIRED);
            nameWarningLabel.setForeground(darkorange);
            loaComboBox.setBackground(Color.YELLOW);
            super.getDEFUSEpanel().setDefColors(Color.BLACK, Color.WHITE);
            super.getDEFUSEpanel().refreshPanel();
        }
        else if (DEF.isBlank()) // and name value is present
        {
            nameWarningLabel.setText(NAME_REQUIRED);
            nameWarningLabel.setForeground(Color.BLACK);
            loaComboBox.setBackground(Color.WHITE);
            super.getDEFUSEpanel().setDefColors(Color.BLACK, Color.WHITE);
            super.getDEFUSEpanel().refreshPanel();
        }
        else if (DEF.endsWith(name)) // successful name match
        {
            localPrefix = DEF.substring(0,DEF.lastIndexOf(name));
            // TODO compare to ancestor humanoid prefix if needed
            
            nameWarningLabel.setText(NAME_RULE_MATCH + ", prefix=" + localPrefix);
            nameWarningLabel.setForeground(darkgreen); // too bright: Color.GREEN
            loaComboBox.setBackground(Color.WHITE);
            super.getDEFUSEpanel().selectX3dDEFUSEpane();
            super.getDEFUSEpanel().setDefColors(Color.BLACK, Color.WHITE);
            super.getDEFUSEpanel().refreshPanel();
        }
        else
        {
            nameWarningLabel.setText(NAME_RULE_MISMATCH + ", prefix=" + localPrefix);
            nameWarningLabel.setForeground(darkorange);
            loaComboBox.setBackground(Color.YELLOW);
            super.getDEFUSEpanel().selectX3dDEFUSEpane();
            super.getDEFUSEpanel().setDefColors(Color.BLACK, Color.YELLOW);
            super.getDEFUSEpanel().refreshPanel();
        }
    }

  @Override
  public void unloadInput() throws IllegalArgumentException
  {
    unLoadDEFUSE();

    HANIMPOSE.setDescription(descriptionTF.getText().trim());
    HANIMPOSE.setName(nameTF.getText().trim());
    HANIMPOSE.setLoa(loaComboBox.getSelectedItem().toString().trim());
    HANIMPOSE.setEnabled(enabledCB.isSelected());
    HANIMPOSE.setResetOtherJoints(resetOtherJointsCB.isSelected());
    HANIMPOSE.setTransitionDuration(transitionDurationTF.getText().trim());
  }
  
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JTextField descriptionTF;
    private javax.swing.JCheckBox enabledCB;
    private javax.swing.JLabel enabledLabel;
    private javax.swing.JLabel hintLabel;
    private javax.swing.JComboBox<String> loaComboBox;
    private javax.swing.JLabel loaLabel;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameTF;
    private javax.swing.JLabel nameWarningLabel;
    private javax.swing.JPanel nodeHintPanel;
    private javax.swing.JCheckBox resetOtherJointsCB;
    private javax.swing.JLabel resetOtherJointsLabel;
    private javax.swing.JLabel spacerLabel;
    private javax.swing.JLabel transitionDurationLabel;
    private javax.swing.JTextField transitionDurationTF;
    // End of variables declaration//GEN-END:variables

}
