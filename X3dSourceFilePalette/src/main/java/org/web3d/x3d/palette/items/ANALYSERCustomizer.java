/*
Copyright (c) 1995-2025 held by the author(s).  All rights reserved.
 
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
 
 * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer
      in the documentation and/or other materials provided with the
      distribution.
 * Neither the names of the Naval Postgraduate School (NPS)
      Modeling Virtual Environments and Simulation (MOVES) Institute
      (https://www.nps.edu and https://MovesInstitute.nps.edu)
      nor the names of its contributors may be used to endorse or
      promote products derived from this software without specific
      prior written permission.
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
 */

package org.web3d.x3d.palette.items;

import javax.swing.DefaultComboBoxModel;
import javax.swing.text.JTextComponent;
import org.openide.util.HelpCtx;
import static org.web3d.x3d.types.X3DSchemaData.ANALYSER_ATTR_CHANNELCOUNTMODE_CHOICES;
import static org.web3d.x3d.types.X3DSchemaData.ANALYSER_ATTR_CHANNELINTERPRETATION_CHOICES;

/**
 * ANALYSERCustomizer:
 * The Analyser node provides real-time frequency and time-domain analysis information, 
 * without any signal-processing change to the audio stream which is passed unprocessed from input to output.
 *
 * @author Don Brutzman
 * @version $Id$
 */
public class ANALYSERCustomizer extends BaseCustomizer
{ 
  private ANALYSER analyser;
  private JTextComponent target;
  
  /** Creates new form ANALYSERCustomizer
     * @param analyser data
     * @param target component of interest */
  public ANALYSERCustomizer(ANALYSER analyser, JTextComponent target)
  {
    super(analyser);
    this.analyser = analyser;
    this.target = target;
                           
    HelpCtx.setHelpIDString(ANALYSERCustomizer.this, "ANALYSER_ELEM_HELPID");   
    
    initComponents();
    
                  fftSizeTF.setText (analyser.getFftSize());
        frequencyBinCountTF.setText (analyser.getFrequencyBinCount());
              minDecibelsTF.setText (analyser.getMinDecibels());
              maxDecibelsTF.setText (analyser.getMaxDecibels());
    smoothingTimeConstantTF.setText (analyser.getSmoothingTimeConstant());
    
         channelCountModeComboBox.setSelectedItem(analyser.getChannelCountMode());
    channelInterpretationComboBox.setSelectedItem(analyser.getChannelInterpretation());
    
    enabledCB.setSelected  (analyser.isEnabled());
    descriptionTF.setText  (analyser.getDescription());
    gainTF.setText         (analyser.getGain());
    startTimeTF.setText    (analyser.getStartTime());
    stopTimeTF.setText     (analyser.getStopTime());
    pauseTimeTF.setText    (analyser.getPauseTime());
    resumeTimeTF.setText   (analyser.getResumeTime());
    tailTimeTF.setText     (analyser.getTailTime());
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jTextField2 = new javax.swing.JTextField();
        dEFUSEpanel1 = getDEFUSEpanel();
        enabledLabel = new javax.swing.JLabel();
        enabledCB = new javax.swing.JCheckBox();
        fftSizeLabel = new javax.swing.JLabel();
        fftSizeTF = new javax.swing.JTextField();
        frequencyBinCountLabel = new javax.swing.JLabel();
        frequencyBinCountTF = new javax.swing.JTextField();
        descriptionTF = new javax.swing.JTextField();
        descriptionLabel = new javax.swing.JLabel();
        channelCountModeLabel = new javax.swing.JLabel();
        channelCountModeComboBox = new javax.swing.JComboBox<>();
        channelInterpretationLabel = new javax.swing.JLabel();
        channelInterpretationComboBox = new javax.swing.JComboBox<>();
        gainLabel = new javax.swing.JLabel();
        gainTF = new javax.swing.JTextField();
        tailTimeLabel = new javax.swing.JLabel();
        tailTimeTF = new javax.swing.JTextField();
        startTimeLabel = new javax.swing.JLabel();
        startTimeTF = new javax.swing.JTextField();
        stopTimeLabel = new javax.swing.JLabel();
        stopTimeTF = new javax.swing.JTextField();
        pauseTimeLabel = new javax.swing.JLabel();
        pauseTimeTF = new javax.swing.JTextField();
        resumeTimeLabel = new javax.swing.JLabel();
        resumeTimeTF = new javax.swing.JTextField();
        eventHelpPanel = new javax.swing.JPanel();
        eventsLabel1 = new javax.swing.JLabel();
        minDecibelsLabel = new javax.swing.JLabel();
        minDecibelsTF = new javax.swing.JTextField();
        maxDecibelsLabel = new javax.swing.JLabel();
        maxDecibelsTF = new javax.swing.JTextField();
        smoothingTimeConstantLabel = new javax.swing.JLabel();
        smoothingTimeConstantTF = new javax.swing.JTextField();

        jTextField2.setText("jTextField2");

        setMinimumSize(new java.awt.Dimension(620, 585));
        setPreferredSize(new java.awt.Dimension(630, 600));
        setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(dEFUSEpanel1, gridBagConstraints);

        enabledLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        enabledLabel.setText("enabled");
        enabledLabel.setToolTipText("enables/disables node operation");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(enabledLabel, gridBagConstraints);

        enabledCB.setToolTipText("enables/disables node operation");
        enabledCB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(enabledCB, gridBagConstraints);

        fftSizeLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        fftSizeLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        fftSizeLabel.setText("fftSize");
        fftSizeLabel.setToolTipText(" amount of time (in seconds) to reduce gain by 10dB");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(fftSizeLabel, gridBagConstraints);

        fftSizeTF.setToolTipText(" amount of time (in seconds) to reduce gain by 10dB");
        fftSizeTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fftSizeTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 25;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(fftSizeTF, gridBagConstraints);

        frequencyBinCountLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        frequencyBinCountLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        frequencyBinCountLabel.setText("frequencyBinCount");
        frequencyBinCountLabel.setToolTipText("decibel value representing range above threshold where curve smoothly transitions to compressed portion");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(frequencyBinCountLabel, gridBagConstraints);

        frequencyBinCountTF.setToolTipText("decibel value representing range above threshold where curve smoothly transitions to compressed portion");
        frequencyBinCountTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                frequencyBinCountTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 25;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(frequencyBinCountTF, gridBagConstraints);

        descriptionTF.setToolTipText("Author-provided prose that describes intended purpose of the node");
        descriptionTF.setMinimumSize(new java.awt.Dimension(50, 20));
        descriptionTF.setPreferredSize(new java.awt.Dimension(50, 20));
        descriptionTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descriptionTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(descriptionTF, gridBagConstraints);

        descriptionLabel.setText("description");
        descriptionLabel.setToolTipText("Author-provided prose that describes intended purpose of the node");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 43, 3, 3);
        add(descriptionLabel, gridBagConstraints);

        channelCountModeLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        channelCountModeLabel.setText("channelCountMode");
        channelCountModeLabel.setToolTipText("how individual channels are counted when up-mixing and down-mixing connections to any inputs");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(channelCountModeLabel, gridBagConstraints);

        channelCountModeComboBox.setModel(new DefaultComboBoxModel<String>(ANALYSER_ATTR_CHANNELCOUNTMODE_CHOICES));
        channelCountModeComboBox.setToolTipText("how individual channels are counted when up-mixing and down-mixing connections to any inputs");
        channelCountModeComboBox.setMinimumSize(new java.awt.Dimension(100, 20));
        channelCountModeComboBox.setPreferredSize(new java.awt.Dimension(100, 20));
        channelCountModeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                channelCountModeComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(channelCountModeComboBox, gridBagConstraints);

        channelInterpretationLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        channelInterpretationLabel.setText("channelInterpretation");
        channelInterpretationLabel.setToolTipText("how individual channels are treated when up-mixing and down-mixing connections to any inputs");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(channelInterpretationLabel, gridBagConstraints);

        channelInterpretationComboBox.setModel(new DefaultComboBoxModel<String>(ANALYSER_ATTR_CHANNELINTERPRETATION_CHOICES));
        channelInterpretationComboBox.setToolTipText("how individual channels are treated when up-mixing and down-mixing connections to any inputs");
        channelInterpretationComboBox.setMinimumSize(new java.awt.Dimension(100, 20));
        channelInterpretationComboBox.setPreferredSize(new java.awt.Dimension(100, 20));
        channelInterpretationComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                channelInterpretationComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(channelInterpretationComboBox, gridBagConstraints);

        gainLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        gainLabel.setText("gain");
        gainLabel.setToolTipText("(only affects analysis, not output signal) factor for linear amplification, can also negate input signal");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(gainLabel, gridBagConstraints);

        gainTF.setToolTipText("(only affects analysis, not output signal) factor for linear amplification, can also negate input signal");
        gainTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gainTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 25;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(gainTF, gridBagConstraints);

        tailTimeLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        tailTimeLabel.setText("tailTime");
        tailTimeLabel.setToolTipText("tailTime field is not applicable and fixed at zero");
        tailTimeLabel.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(tailTimeLabel, gridBagConstraints);

        tailTimeTF.setText("0");
        tailTimeTF.setToolTipText("tailTime field is not applicable and fixed at zero");
        tailTimeTF.setEnabled(false);
        tailTimeTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tailTimeTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 25;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(tailTimeTF, gridBagConstraints);

        startTimeLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        startTimeLabel.setText("startTime");
        startTimeLabel.setToolTipText("System time when node starts");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(startTimeLabel, gridBagConstraints);

        startTimeTF.setToolTipText("System time when node starts");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 25;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(startTimeTF, gridBagConstraints);

        stopTimeLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        stopTimeLabel.setText("stopTime");
        stopTimeLabel.setToolTipText("System time when node stops");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(stopTimeLabel, gridBagConstraints);

        stopTimeTF.setToolTipText("System time when node stops");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 25;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(stopTimeTF, gridBagConstraints);

        pauseTimeLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        pauseTimeLabel.setText("pauseTime");
        pauseTimeLabel.setToolTipText("System time when node pauses");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(pauseTimeLabel, gridBagConstraints);

        pauseTimeTF.setToolTipText("System time when node pauses");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 25;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(pauseTimeTF, gridBagConstraints);

        resumeTimeLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        resumeTimeLabel.setText("resumeTime");
        resumeTimeLabel.setToolTipText("System time when node resumes");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(resumeTimeLabel, gridBagConstraints);

        resumeTimeTF.setToolTipText("System time when node resumes");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 25;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(resumeTimeTF, gridBagConstraints);

        eventHelpPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        eventHelpPanel.setLayout(new java.awt.GridBagLayout());

        eventsLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        eventsLabel1.setText("<html><p align=\"center\"> <b>Analyser</b> provides real-time frequency and time-domain information, without changing the input signal. </p> <br /> \n<p align=\"center\">Fields include <b>fftSize</b> for Fast Fourier Transoform (FFT) buffer used, <b>frequencyBinCount</b> roughly half that size for data visualization,\n    <b>minDecibels</b> and <b>maxDecibels</b> to define scaling range of FFT analysis data, and <b>smoothingTimeConstant</b> for averaging with last analysis frame. </p> <br />   \n<p align=\"center\">Analyser <b>child nodes</b> provide input signals, and the <b>parent node</b> receives the (unchanged) output signal. </p> <br />  \n<p align=\"center\"> The <b>gain</b> field only affects analysis, not the passed output signal.  The <b>tailTime</b> field is not applicable and fixed at zero. </p> <br />  \n<p align=\"center\"> Timing control for analysis is provided by <b>startTime</b>, <b>stopTime</b>, <b>pauseTime</b>, <b>resumeTime</b> fields, <br /> which do not affect the Analyser output signal.</p> <br />   \n<p align=\"center\"> Additional output events are <b>isActive</b>, <b>isPaused</b>, <b>channelCount</b>, and <b>elapsedTime</b>.</p> ");
        eventsLabel1.setToolTipText("tailTime field is not applicable and fixed at zero");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        eventHelpPanel.add(eventsLabel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LAST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 3);
        add(eventHelpPanel, gridBagConstraints);

        minDecibelsLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        minDecibelsLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        minDecibelsLabel.setText("minDecibels");
        minDecibelsLabel.setToolTipText("amount of dB change in input for 1 dB change in output");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(minDecibelsLabel, gridBagConstraints);

        minDecibelsTF.setToolTipText("amount of dB change in input for 1 dB change in output");
        minDecibelsTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minDecibelsTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 25;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(minDecibelsTF, gridBagConstraints);

        maxDecibelsLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        maxDecibelsLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        maxDecibelsLabel.setText("maxDecibels");
        maxDecibelsLabel.setToolTipText("amount of time (in seconds) to increase gain by 10dB");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(maxDecibelsLabel, gridBagConstraints);

        maxDecibelsTF.setToolTipText("amount of time (in seconds) to increase gain by 10dB");
        maxDecibelsTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxDecibelsTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 25;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(maxDecibelsTF, gridBagConstraints);

        smoothingTimeConstantLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        smoothingTimeConstantLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        smoothingTimeConstantLabel.setText("smoothingTimeConstant");
        smoothingTimeConstantLabel.setToolTipText("decibel value above which compression starts taking effect, range [-100,0] ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(smoothingTimeConstantLabel, gridBagConstraints);

        smoothingTimeConstantTF.setToolTipText("decibel value above which compression starts taking effect, range [-100,0] ");
        smoothingTimeConstantTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smoothingTimeConstantTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 25;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(smoothingTimeConstantTF, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void descriptionTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descriptionTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_descriptionTFActionPerformed

    private void tailTimeTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tailTimeTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tailTimeTFActionPerformed

    private void channelCountModeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_channelCountModeComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_channelCountModeComboBoxActionPerformed

    private void channelInterpretationComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_channelInterpretationComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_channelInterpretationComboBoxActionPerformed

    private void gainTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gainTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_gainTFActionPerformed

    private void fftSizeTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fftSizeTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fftSizeTFActionPerformed

    private void frequencyBinCountTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_frequencyBinCountTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_frequencyBinCountTFActionPerformed

    private void minDecibelsTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minDecibelsTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_minDecibelsTFActionPerformed

    private void maxDecibelsTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxDecibelsTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_maxDecibelsTFActionPerformed

    private void smoothingTimeConstantTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smoothingTimeConstantTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_smoothingTimeConstantTFActionPerformed
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> channelCountModeComboBox;
    private javax.swing.JLabel channelCountModeLabel;
    private javax.swing.JComboBox<String> channelInterpretationComboBox;
    private javax.swing.JLabel channelInterpretationLabel;
    private org.web3d.x3d.palette.items.DEFUSEpanel dEFUSEpanel1;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JTextField descriptionTF;
    private javax.swing.JCheckBox enabledCB;
    private javax.swing.JLabel enabledLabel;
    private javax.swing.JPanel eventHelpPanel;
    private javax.swing.JLabel eventsLabel1;
    private javax.swing.JLabel fftSizeLabel;
    private javax.swing.JTextField fftSizeTF;
    private javax.swing.JLabel frequencyBinCountLabel;
    private javax.swing.JTextField frequencyBinCountTF;
    private javax.swing.JLabel gainLabel;
    private javax.swing.JTextField gainTF;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JLabel maxDecibelsLabel;
    private javax.swing.JTextField maxDecibelsTF;
    private javax.swing.JLabel minDecibelsLabel;
    private javax.swing.JTextField minDecibelsTF;
    private javax.swing.JLabel pauseTimeLabel;
    private javax.swing.JTextField pauseTimeTF;
    private javax.swing.JLabel resumeTimeLabel;
    private javax.swing.JTextField resumeTimeTF;
    private javax.swing.JLabel smoothingTimeConstantLabel;
    private javax.swing.JTextField smoothingTimeConstantTF;
    private javax.swing.JLabel startTimeLabel;
    private javax.swing.JTextField startTimeTF;
    private javax.swing.JLabel stopTimeLabel;
    private javax.swing.JTextField stopTimeTF;
    private javax.swing.JLabel tailTimeLabel;
    private javax.swing.JTextField tailTimeTF;
    // End of variables declaration//GEN-END:variables
  
  
  @Override
  public String getNameKey()
  {
    return "NAME_X3D_ANALYSER";
  }

  @Override
  public void unloadInput() throws IllegalArgumentException
  {
    unLoadDEFUSE();
    
    analyser.setFftSize              (fftSizeTF.getText().trim());
    analyser.setFrequencyBinCount    (frequencyBinCountTF.getText().trim());
    analyser.setMinDecibels          (minDecibelsTF.getText().trim());
    analyser.setMaxDecibel           (maxDecibelsTF.getText().trim());
    analyser.setSmoothingTimeConstant(smoothingTimeConstantTF.getText().trim());
    
    analyser.setChannelCountMode     (channelCountModeComboBox.getSelectedItem().toString());
    analyser.setChannelInterpretation(channelInterpretationComboBox.getSelectedItem().toString());
    analyser.setDescription          (descriptionTF.getText().trim());
    analyser.setEnabled              (enabledCB.isSelected());
    analyser.setGain                 (gainTF.getText().trim());
    analyser.setStartTime            (startTimeTF.getText().trim());
    analyser.setStopTime             (stopTimeTF.getText().trim());
    analyser.setPauseTime            (pauseTimeTF.getText().trim());
    analyser.setResumeTime           (resumeTimeTF.getText().trim());
    analyser.setTailTime             (tailTimeTF.getText().trim());
  }
}
