/*
Copyright (c) 1995-2025 held by the author(s).  All rights reserved.
 
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
 
 * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer
      in the documentation and/or other materials provided with the
      distribution.
 * Neither the names of the Naval Postgraduate School (NPS)
      Modeling Virtual Environments and Simulation (MOVES) Institute
      (https://www.nps.edu and https://MovesInstitute.nps.edu)
      nor the names of its contributors may be used to endorse or
      promote products derived from this software without specific
      prior written permission.
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
 */

package org.web3d.x3d.palette.items;

import javax.swing.DefaultComboBoxModel;
import javax.swing.text.JTextComponent;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.HelpCtx;
import org.web3d.x3d.types.X3DPrimitiveTypes.SFDouble;
import static org.web3d.x3d.types.X3DPrimitiveTypes.fiveDigitFormat;
import static org.web3d.x3d.types.X3DSchemaData.SPATIALSOUND_ATTR_DISTANCEMODEL_CHOICES;

/**
 * SPATIALSOUNDCustomizer:
 * SpatialSound represents a processing node which positions, emits and 
 * spatializes an audio stream in three-dimensional (3D) space. 
 * This node provides full spatialization of panner capabilities defined by 
 * W3C Web Audio API within an X3D scene.
 * 
 * @author Don Brutzman
 * @version $Id$
 */
public class SPATIALSOUNDCustomizer extends BaseCustomizer
{ 
  private SPATIALSOUND spatialSound;
  private JTextComponent target;
  
  /** Creates new form SPATIALSOUNDCustomizer
     * @param spatialSound data
     * @param target component of interest */
  public SPATIALSOUNDCustomizer(SPATIALSOUND spatialSound, JTextComponent target)
  {
    super(spatialSound);
    this.spatialSound = spatialSound;
    this.target = target;
                           
    HelpCtx.setHelpIDString(SPATIALSOUNDCustomizer.this, "SPATIALSOUND_ELEM_HELPID");   
    
    initComponents();
    
    enabledCB.setSelected               (spatialSound.isEnabled());
    dopplerEnabledCB.setSelected        (spatialSound.isDopplerEnabled());
    enableHRTFCB.setSelected            (spatialSound.isEnableHRTF());
    spatializeCB.setSelected            (spatialSound.isSpatialize());
    descriptionTF.setText               (spatialSound.getDescription());
    
    coneInnerAngleTF.setText            (spatialSound.getConeInnerAngle());
    coneOuterAngleTF.setText            (spatialSound.getConeOuterAngle());
    coneOuterGainTF.setText             (spatialSound.getConeOuterGain());
    distanceModelCombo.setSelectedItem  (spatialSound.getDistanceModel());
    
    locationXTF.setText(spatialSound.getLocationX());
    locationYTF.setText(spatialSound.getLocationY());
    locationZTF.setText(spatialSound.getLocationZ());
        
    directionXTF.setText(spatialSound.getDirectionX());
    directionYTF.setText(spatialSound.getDirectionY());
    directionZTF.setText(spatialSound.getDirectionZ());
    if (directionXTF.getText().equals("0") && directionYTF.getText().equals("0") && directionZTF.getText().equals("0")) 
        normalizeButton.doClick(); // avoid illegal value
    
                 gainTF.setText(spatialSound.getGain());
            intensityTF.setText(spatialSound.getIntensity());
          maxDistanceTF.setText(spatialSound.getMaxDistance());
             priorityTF.setText(spatialSound.getPriority());
    referenceDistanceTF.setText(spatialSound.getReferenceDistance());
        rolloffFactorTF.setText(spatialSound.getRolloffFactor());
    
}
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        dEFUSEpanel1 = getDEFUSEpanel();
        enabledLabel = new javax.swing.JLabel();
        enabledCB = new javax.swing.JCheckBox();
        descriptionTF = new javax.swing.JTextField();
        descriptionLabel = new javax.swing.JLabel();
        eventHelpPanel = new javax.swing.JPanel();
        eventsLabel1 = new javax.swing.JLabel();
        coneInnerAngleLabel = new javax.swing.JLabel();
        coneInnerAngleTF = new javax.swing.JTextField();
        coneOuterAngleLabel = new javax.swing.JLabel();
        coneOuterAngleTF = new javax.swing.JTextField();
        coneOuterGainLabel = new javax.swing.JLabel();
        coneOuterGainTF = new javax.swing.JTextField();
        distanceModelLabel = new javax.swing.JLabel();
        distanceModelCombo = new javax.swing.JComboBox<>();
        locationLabel = new javax.swing.JLabel();
        locationXTF = new javax.swing.JTextField();
        directionLabel = new javax.swing.JLabel();
        directionXTF = new javax.swing.JTextField();
        directionYTF = new javax.swing.JTextField();
        locationYTF = new javax.swing.JTextField();
        locationZTF = new javax.swing.JTextField();
        directionZTF = new javax.swing.JTextField();
        normalizeButton = new javax.swing.JButton();
        intensityLabel = new javax.swing.JLabel();
        intensityTF = new javax.swing.JTextField();
        priorityLabel = new javax.swing.JLabel();
        priorityTF = new javax.swing.JTextField();
        spatializeLabel = new javax.swing.JLabel();
        spatializeCB = new javax.swing.JCheckBox();
        dopplerEnabledLabel = new javax.swing.JLabel();
        dopplerEnabledCB = new javax.swing.JCheckBox();
        enableHRTFLabel = new javax.swing.JLabel();
        enableHRTFCB = new javax.swing.JCheckBox();
        gainLabel = new javax.swing.JLabel();
        gainTF = new javax.swing.JTextField();
        maxDistanceLabel = new javax.swing.JLabel();
        maxDistanceTF = new javax.swing.JTextField();
        referenceDistanceLabel = new javax.swing.JLabel();
        referenceDistanceTF = new javax.swing.JTextField();
        rolloffFactorLabel = new javax.swing.JLabel();
        rolloffFactorTF = new javax.swing.JTextField();

        setToolTipText(" centered along direction and defines inner conical volume, inside of which no source gain reduction occurs.");
        setMinimumSize(new java.awt.Dimension(630, 560));
        setPreferredSize(new java.awt.Dimension(640, 580));
        setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(dEFUSEpanel1, gridBagConstraints);

        enabledLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        enabledLabel.setText("enabled");
        enabledLabel.setToolTipText("enables/disables node operation");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(enabledLabel, gridBagConstraints);

        enabledCB.setToolTipText("enables/disables node operation");
        enabledCB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(enabledCB, gridBagConstraints);

        descriptionTF.setToolTipText("Author-provided prose that describes intended purpose of the node");
        descriptionTF.setMinimumSize(new java.awt.Dimension(50, 20));
        descriptionTF.setPreferredSize(new java.awt.Dimension(50, 20));
        descriptionTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descriptionTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(descriptionTF, gridBagConstraints);

        descriptionLabel.setText("description");
        descriptionLabel.setToolTipText("Author-provided prose that describes intended purpose of the node");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 43, 3, 3);
        add(descriptionLabel, gridBagConstraints);

        eventHelpPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        eventHelpPanel.setLayout(new java.awt.GridBagLayout());

        eventsLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        eventsLabel1.setText("<html><p align=\"center\"> <b>SpatialSound</b> represents a processing node which positions, emits and spatializes an audio stream in 3D space,\nproviding full spatialization of  W3C Web Audio API panner capabilities within an X3D scene.</p> <br />   \n<p align=\"center\">SpatialSound can have <b>multiple child nodes</b> as input signals, and <br /> \ncan provide output signal to <b>another parent node</b> for further sound processing.</p> <br />   \n<p align=\"center\">The <b>distanceModel</b> field represents specifies the algorithm used for sound attenuation over distance. </p> <br /> \n <p align=\"center\">The <b>dopplerEnabled</b>, <b>enableHRTF</b> and other fields permit advanced sound-processing techniques. </p>");
        eventsLabel1.setToolTipText("Optionally can create ROUTEs to change these values at run time");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        eventHelpPanel.add(eventsLabel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LAST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 3);
        add(eventHelpPanel, gridBagConstraints);

        coneInnerAngleLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        coneInnerAngleLabel.setText("coneInnerAngle");
        coneInnerAngleLabel.setToolTipText(" centered along direction and defines inner conical volume, inside of which no source gain reduction occurs.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(coneInnerAngleLabel, gridBagConstraints);

        coneInnerAngleTF.setToolTipText(" centered along direction and defines inner conical volume, inside of which no source gain reduction occurs.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 25;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(coneInnerAngleTF, gridBagConstraints);

        coneOuterAngleLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        coneOuterAngleLabel.setText("coneOuterAngle");
        coneOuterAngleLabel.setToolTipText("centered along direction and defines an outer conical volume, within which the sound gain decreases from full gain to coneOuterGain");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(coneOuterAngleLabel, gridBagConstraints);

        coneOuterAngleTF.setToolTipText("centered along direction and defines an outer conical volume, within which the sound gain decreases from full gain to coneOuterGain");
        coneOuterAngleTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coneOuterAngleTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 25;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(coneOuterAngleTF, gridBagConstraints);

        coneOuterGainLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        coneOuterGainLabel.setText("coneOuterGain");
        coneOuterGainLabel.setToolTipText(" minimum gain value found outside coneOuterAngle");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(coneOuterGainLabel, gridBagConstraints);

        coneOuterGainTF.setToolTipText(" minimum gain value found outside coneOuterAngle");
        coneOuterGainTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coneOuterGainTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 25;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(coneOuterGainTF, gridBagConstraints);

        distanceModelLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        distanceModelLabel.setText("distanceModel");
        distanceModelLabel.setToolTipText("specifies which algorithm to use for sound attenuation, corresponding to distance between an audio source and a listener");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(distanceModelLabel, gridBagConstraints);

        distanceModelCombo.setModel(new DefaultComboBoxModel<String>(SPATIALSOUND_ATTR_DISTANCEMODEL_CHOICES));
        distanceModelCombo.setToolTipText("specifies which algorithm to use for sound attenuation, corresponding to distance between an audio source and a listener");
        distanceModelCombo.setMinimumSize(new java.awt.Dimension(100, 20));
        distanceModelCombo.setPreferredSize(new java.awt.Dimension(100, 20));
        distanceModelCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                distanceModelComboItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(distanceModelCombo, gridBagConstraints);

        locationLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        locationLabel.setText("location");
        locationLabel.setToolTipText("position of sound center, relative to local coordinate system");
        locationLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        locationLabel.setMaximumSize(null);
        locationLabel.setMinimumSize(new java.awt.Dimension(60, 20));
        locationLabel.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(locationLabel, gridBagConstraints);

        locationXTF.setToolTipText("x position of sound center, relative to local coordinate system");
        locationXTF.setMaximumSize(null);
        locationXTF.setMinimumSize(new java.awt.Dimension(60, 20));
        locationXTF.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(locationXTF, gridBagConstraints);

        directionLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        directionLabel.setText("direction");
        directionLabel.setToolTipText("direction of sound axis, relative to local coordinate system");
        directionLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        directionLabel.setMaximumSize(null);
        directionLabel.setMinimumSize(new java.awt.Dimension(60, 20));
        directionLabel.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(directionLabel, gridBagConstraints);

        directionXTF.setToolTipText("x direction of sound axis, relative to local coordinate system");
        directionXTF.setMaximumSize(null);
        directionXTF.setMinimumSize(new java.awt.Dimension(60, 20));
        directionXTF.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(directionXTF, gridBagConstraints);

        directionYTF.setToolTipText("y direction of sound axis, relative to local coordinate system");
        directionYTF.setMaximumSize(null);
        directionYTF.setMinimumSize(new java.awt.Dimension(60, 20));
        directionYTF.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(directionYTF, gridBagConstraints);

        locationYTF.setToolTipText("y position of sound center, relative to local coordinate system");
        locationYTF.setMaximumSize(null);
        locationYTF.setMinimumSize(new java.awt.Dimension(60, 20));
        locationYTF.setPreferredSize(new java.awt.Dimension(60, 20));
        locationYTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                locationYTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(locationYTF, gridBagConstraints);

        locationZTF.setToolTipText("z position of sound center, relative to local coordinate system");
        locationZTF.setMaximumSize(null);
        locationZTF.setMinimumSize(new java.awt.Dimension(60, 20));
        locationZTF.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(locationZTF, gridBagConstraints);

        directionZTF.setToolTipText("z direction of sound axis, relative to local coordinate system");
        directionZTF.setMaximumSize(null);
        directionZTF.setMinimumSize(new java.awt.Dimension(60, 20));
        directionZTF.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(directionZTF, gridBagConstraints);

        normalizeButton.setText("normalize");
        normalizeButton.setToolTipText("normalize direction vector to unit length");
        normalizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                normalizeButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(normalizeButton, gridBagConstraints);

        intensityLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        intensityLabel.setText("intensity");
        intensityLabel.setToolTipText("factor [0,1] adjusting loudness (decibels) of emitted sound");
        intensityLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        intensityLabel.setMaximumSize(null);
        intensityLabel.setMinimumSize(new java.awt.Dimension(60, 20));
        intensityLabel.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(intensityLabel, gridBagConstraints);

        intensityTF.setToolTipText("factor [0,1] adjusting loudness (decibels) of emitted sound");
        intensityTF.setMaximumSize(null);
        intensityTF.setMinimumSize(new java.awt.Dimension(60, 20));
        intensityTF.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(intensityTF, gridBagConstraints);

        priorityLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        priorityLabel.setText("priority");
        priorityLabel.setToolTipText("player hint [0,1] to choose which sounds to play, if needed");
        priorityLabel.setMaximumSize(null);
        priorityLabel.setMinimumSize(new java.awt.Dimension(60, 20));
        priorityLabel.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(priorityLabel, gridBagConstraints);

        priorityTF.setToolTipText("player hint [0,1] to choose which sounds to play, if needed");
        priorityTF.setMaximumSize(null);
        priorityTF.setMinimumSize(new java.awt.Dimension(60, 20));
        priorityTF.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(priorityTF, gridBagConstraints);

        spatializeLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        spatializeLabel.setText("spatialize");
        spatializeLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        spatializeLabel.setMaximumSize(null);
        spatializeLabel.setMinimumSize(new java.awt.Dimension(60, 20));
        spatializeLabel.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(spatializeLabel, gridBagConstraints);

        spatializeCB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        spatializeCB.setMaximumSize(null);
        spatializeCB.setMinimumSize(new java.awt.Dimension(60, 20));
        spatializeCB.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(spatializeCB, gridBagConstraints);

        dopplerEnabledLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        dopplerEnabledLabel.setText("dopplerEnabled");
        dopplerEnabledLabel.setToolTipText("enables/disables doppler frequency shifts from relative motion between sound sources and listener");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(dopplerEnabledLabel, gridBagConstraints);

        dopplerEnabledCB.setToolTipText("enables/disables doppler frequency shifts from relative motion between sound sources and listener");
        dopplerEnabledCB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(dopplerEnabledCB, gridBagConstraints);

        enableHRTFLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        enableHRTFLabel.setText("enableHRTF");
        enableHRTFLabel.setToolTipText("enables/disables Head Related Transfer Functrion (HRTF) processing, if available");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(enableHRTFLabel, gridBagConstraints);

        enableHRTFCB.setToolTipText("enables/disables Head Related Transfer Functrion (HRTF) processing, if available");
        enableHRTFCB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(enableHRTFCB, gridBagConstraints);

        gainLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        gainLabel.setText("gain");
        gainLabel.setToolTipText("factor for linear amplification to apply. Decibel values shall not be used. Negative gain factors negate the input signal.");
        gainLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        gainLabel.setMinimumSize(new java.awt.Dimension(60, 20));
        gainLabel.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(gainLabel, gridBagConstraints);

        gainTF.setToolTipText("factor for linear amplification to apply. Decibel values shall not be used. Negative gain factors negate the input signal.");
        gainTF.setMaximumSize(null);
        gainTF.setMinimumSize(new java.awt.Dimension(60, 20));
        gainTF.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(gainTF, gridBagConstraints);

        maxDistanceLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        maxDistanceLabel.setText("maxDistance");
        maxDistanceLabel.setToolTipText("maximum distance where sound is renderable between source and listener, after which no reduction in sound volume occurs");
        maxDistanceLabel.setMinimumSize(new java.awt.Dimension(60, 20));
        maxDistanceLabel.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(maxDistanceLabel, gridBagConstraints);

        maxDistanceTF.setToolTipText("maximum distance where sound is renderable between source and listener, after which no reduction in sound volume occurs");
        maxDistanceTF.setMaximumSize(null);
        maxDistanceTF.setMinimumSize(new java.awt.Dimension(60, 20));
        maxDistanceTF.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(maxDistanceTF, gridBagConstraints);

        referenceDistanceLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        referenceDistanceLabel.setText("referenceDistance");
        referenceDistanceLabel.setToolTipText("reference distance for reducing volume as source moves further from the listener. For distances less than this value, volume is not reduced.");
        referenceDistanceLabel.setMinimumSize(new java.awt.Dimension(60, 20));
        referenceDistanceLabel.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(referenceDistanceLabel, gridBagConstraints);

        referenceDistanceTF.setToolTipText("reference distance for reducing volume as source moves further from the listener. For distances less than this value, volume is not reduced.");
        referenceDistanceTF.setMaximumSize(null);
        referenceDistanceTF.setMinimumSize(new java.awt.Dimension(60, 20));
        referenceDistanceTF.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(referenceDistanceTF, gridBagConstraints);

        rolloffFactorLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        rolloffFactorLabel.setText("rolloffFactor");
        rolloffFactorLabel.setToolTipText("indicates how quickly volume is reduced as source moves further from listener.");
        rolloffFactorLabel.setMinimumSize(new java.awt.Dimension(60, 20));
        rolloffFactorLabel.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(rolloffFactorLabel, gridBagConstraints);

        rolloffFactorTF.setToolTipText("indicates how quickly volume is reduced as source moves further from listener.");
        rolloffFactorTF.setMaximumSize(null);
        rolloffFactorTF.setMinimumSize(new java.awt.Dimension(60, 20));
        rolloffFactorTF.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(rolloffFactorTF, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void descriptionTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descriptionTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_descriptionTFActionPerformed

    private void coneOuterAngleTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coneOuterAngleTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_coneOuterAngleTFActionPerformed

    private void distanceModelComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_distanceModelComboItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_distanceModelComboItemStateChanged

    private void coneOuterGainTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coneOuterGainTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_coneOuterGainTFActionPerformed

    private void locationYTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_locationYTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_locationYTFActionPerformed

    private void normalizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_normalizeButtonActionPerformed
        double normalizationFactor, x, y, z;

        x     = new SFDouble(directionXTF.getText()).getValue();
        y     = new SFDouble(directionYTF.getText()).getValue();
        z     = new SFDouble(directionZTF.getText()).getValue();

        normalizationFactor = Math.sqrt(x * x + y * y + z * z);
        if (normalizationFactor == 0.0)
        {
            NotifyDescriptor descriptor = new NotifyDescriptor.Message(
                "<html>Found zero-magnitude axis for <b>direction</b> vector, reset to 0 0 1</html>", NotifyDescriptor.WARNING_MESSAGE);
            DialogDisplayer.getDefault().notify(descriptor);
            directionXTF.setText("0");
            directionYTF.setText("0");
            directionZTF.setText("1");
        }
        else
        {
            directionXTF.setText(fiveDigitFormat.format(x / normalizationFactor));
            directionYTF.setText(fiveDigitFormat.format(y / normalizationFactor));
            directionZTF.setText(fiveDigitFormat.format(z / normalizationFactor));
        }
    }//GEN-LAST:event_normalizeButtonActionPerformed
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel coneInnerAngleLabel;
    private javax.swing.JTextField coneInnerAngleTF;
    private javax.swing.JLabel coneOuterAngleLabel;
    private javax.swing.JTextField coneOuterAngleTF;
    private javax.swing.JLabel coneOuterGainLabel;
    private javax.swing.JTextField coneOuterGainTF;
    private org.web3d.x3d.palette.items.DEFUSEpanel dEFUSEpanel1;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JTextField descriptionTF;
    private javax.swing.JLabel directionLabel;
    private javax.swing.JTextField directionXTF;
    private javax.swing.JTextField directionYTF;
    private javax.swing.JTextField directionZTF;
    private javax.swing.JComboBox<String> distanceModelCombo;
    private javax.swing.JLabel distanceModelLabel;
    private javax.swing.JCheckBox dopplerEnabledCB;
    private javax.swing.JLabel dopplerEnabledLabel;
    private javax.swing.JCheckBox enableHRTFCB;
    private javax.swing.JLabel enableHRTFLabel;
    private javax.swing.JCheckBox enabledCB;
    private javax.swing.JLabel enabledLabel;
    private javax.swing.JPanel eventHelpPanel;
    private javax.swing.JLabel eventsLabel1;
    private javax.swing.JLabel gainLabel;
    private javax.swing.JTextField gainTF;
    private javax.swing.JLabel intensityLabel;
    private javax.swing.JTextField intensityTF;
    private javax.swing.JLabel locationLabel;
    private javax.swing.JTextField locationXTF;
    private javax.swing.JTextField locationYTF;
    private javax.swing.JTextField locationZTF;
    private javax.swing.JLabel maxDistanceLabel;
    private javax.swing.JTextField maxDistanceTF;
    private javax.swing.JButton normalizeButton;
    private javax.swing.JLabel priorityLabel;
    private javax.swing.JTextField priorityTF;
    private javax.swing.JLabel referenceDistanceLabel;
    private javax.swing.JTextField referenceDistanceTF;
    private javax.swing.JLabel rolloffFactorLabel;
    private javax.swing.JTextField rolloffFactorTF;
    private javax.swing.JCheckBox spatializeCB;
    private javax.swing.JLabel spatializeLabel;
    // End of variables declaration//GEN-END:variables
  
  
  @Override
  public String getNameKey()
  {
    return "NAME_X3D_SPATIALSOUND";
  }

  @Override
  public void unloadInput() throws IllegalArgumentException
  {
    unLoadDEFUSE();
    
    spatialSound.setDescription          (descriptionTF.getText().trim());
    spatialSound.setEnabled              (enabledCB.isSelected());
    spatialSound.setDopplerEnabled       (dopplerEnabledCB.isSelected());
    spatialSound.setEnabled              (enabledCB.isSelected());
    spatialSound.setEnableHRTF           (enableHRTFCB.isSelected());
    spatialSound.setSpatialize(spatializeCB.isSelected());
    
    spatialSound.setConeInnerAngle       (coneInnerAngleTF.getText().trim());
    spatialSound.setConeOuterAngle       (coneOuterAngleTF.getText().trim());
    spatialSound.setConeOuterGain        (coneOuterGainTF.getText().trim());
    
    spatialSound.setDistanceModel        (distanceModelCombo.getSelectedItem().toString());

    if (directionXTF.getText().equals("0") && directionYTF.getText().equals("0") && directionZTF.getText().equals("0")) 
        normalizeButton.doClick();
    spatialSound.setDirectionX(directionXTF.getText().trim());
    spatialSound.setDirectionY(directionYTF.getText().trim());
    spatialSound.setDirectionZ(directionZTF.getText().trim());
    
    spatialSound.setLocationX(locationXTF.getText().trim());
    spatialSound.setLocationY(locationYTF.getText().trim());
    spatialSound.setLocationZ(locationZTF.getText().trim());

    spatialSound.setGain                 (gainTF.getText().trim());
    spatialSound.setIntensity            (intensityTF.getText().trim());
    spatialSound.setMaxDistance          (maxDistanceTF.getText().trim());
    spatialSound.setPriority             (priorityTF.getText().trim());
    spatialSound.setReferenceDistance    (referenceDistanceTF.getText().trim());
    spatialSound.setRolloffFactor        (rolloffFactorTF.getText().trim());
  }
  
}
