/*
Copyright (c) 1995-2025 held by the author(s).  All rights reserved.
 
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
 
 * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer
      in the documentation and/or other materials provided with the
      distribution.
 * Neither the names of the Naval Postgraduate School (NPS)
      Modeling Virtual Environments and Simulation (MOVES) Institute
      (https://www.nps.edu and https://MovesInstitute.nps.edu)
      nor the names of its contributors may be used to endorse or
      promote products derived from this software without specific
      prior written permission.
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
 */

package org.web3d.x3d.palette.items;

import javax.swing.DefaultComboBoxModel;
import javax.swing.text.JTextComponent;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.HelpCtx;
import static org.web3d.x3d.types.X3DSchemaData.PERIODICWAVE_ATTR_TYPE_CHOICES;

/**
 * PERIODICWAVECustomizer:
 * PeriodicWave defines a periodic waveform that can be used to shape the output of a parent Oscillator node.
 * 
 * @author Don Brutzman
 * @version $Id$
 */
public class PERIODICWAVECustomizer extends BaseCustomizer
{ 
  private PERIODICWAVE periodicWave;
  private JTextComponent target;
  
  /** Creates new form PERIODICWAVECustomizer
     * @param periodicWave data
     * @param target component of interest */
  public PERIODICWAVECustomizer(PERIODICWAVE periodicWave, JTextComponent target)
  {
    super(periodicWave);
    this.periodicWave = periodicWave;
    this.target = target;
                           
    HelpCtx.setHelpIDString(PERIODICWAVECustomizer.this, "PERIODICWAVE_ELEM_HELPID");   
    
    initComponents();
    
    enabledCB.setSelected          (periodicWave.isEnabled());
    descriptionTF.setText          (periodicWave.getDescription());
    
    optionsRealTF.setText          (periodicWave.getOptionsReal());
    optionsImagTF.setText          (periodicWave.getOptionsImag());
    typeCombo.setSelectedItem      (periodicWave.getType());
    
    checkOptionsArrayLengths();
    enableOptionsFields();
}
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jTextField2 = new javax.swing.JTextField();
        dEFUSEpanel1 = getDEFUSEpanel();
        enabledLabel = new javax.swing.JLabel();
        enabledCB = new javax.swing.JCheckBox();
        descriptionTF = new javax.swing.JTextField();
        descriptionLabel = new javax.swing.JLabel();
        eventHelpPanel = new javax.swing.JPanel();
        eventsLabel1 = new javax.swing.JLabel();
        optionsRealLabel = new javax.swing.JLabel();
        optionsRealTF = new javax.swing.JTextField();
        optionsImagLabel = new javax.swing.JLabel();
        optionsImagTF = new javax.swing.JTextField();
        typeLabel = new javax.swing.JLabel();
        typeCombo = new javax.swing.JComboBox<>();
        typeInfoLabel = new javax.swing.JLabel();

        jTextField2.setText("jTextField2");

        setToolTipText("waveform coefficients as defined in W3C Web Audio API");
        setMinimumSize(new java.awt.Dimension(650, 400));
        setPreferredSize(new java.awt.Dimension(660, 420));
        setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(dEFUSEpanel1, gridBagConstraints);

        enabledLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        enabledLabel.setText("enabled");
        enabledLabel.setToolTipText("enables/disables node operation");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(enabledLabel, gridBagConstraints);

        enabledCB.setToolTipText("enables/disables node operation");
        enabledCB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(enabledCB, gridBagConstraints);

        descriptionTF.setToolTipText("Author-provided prose that describes intended purpose of the node");
        descriptionTF.setMinimumSize(new java.awt.Dimension(50, 20));
        descriptionTF.setPreferredSize(new java.awt.Dimension(50, 20));
        descriptionTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descriptionTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(descriptionTF, gridBagConstraints);

        descriptionLabel.setText("description");
        descriptionLabel.setToolTipText("Author-provided prose that describes intended purpose of the node");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 43, 3, 3);
        add(descriptionLabel, gridBagConstraints);

        eventHelpPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        eventHelpPanel.setLayout(new java.awt.GridBagLayout());

        eventsLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        eventsLabel1.setText("<html><p align=\"center\"> <b>PeriodicWave</b> defines a periodic waveform that can be used to shape the output of a parent <b>Oscillator</b> node. </p> <br />  \n<p align=\"center\">PeriodicWave has <b>no child nodes</b> and <b>no other parent nodes</b. </p> <br />  \n<p align=\"center\">The <b>type</b> field represents specifies the shape of waveform to play, either one of predefined types or else<br />\n named and customized by the paired <b>optionsReal</b> and <b>optionsImag</b> coefficient fields. </p> <br /> \n<p align=\"center\">The <b>optionsReal</b> and <b>optionsImag</b> fields define custom waveform coefficients, real and imaginary. <br />\nSelect <b>type</b> CUSTOM or define another <b>type</b> name to enable editing of these two array fields. </p>");
        eventsLabel1.setToolTipText("Optionally can create ROUTEs to change these values at run time");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        eventHelpPanel.add(eventsLabel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LAST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 3);
        add(eventHelpPanel, gridBagConstraints);

        optionsRealLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        optionsRealLabel.setText("optionsReal");
        optionsRealLabel.setToolTipText("waveform coefficients as defined in W3C Web Audio API");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(optionsRealLabel, gridBagConstraints);

        optionsRealTF.setToolTipText("waveform coefficients as defined in W3C Web Audio API");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 25;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(optionsRealTF, gridBagConstraints);

        optionsImagLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        optionsImagLabel.setText("optionsImag");
        optionsImagLabel.setToolTipText("waveform coefficients as defined in W3C Web Audio API");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(optionsImagLabel, gridBagConstraints);

        optionsImagTF.setToolTipText("waveform coefficients as defined in W3C Web Audio API");
        optionsImagTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionsImagTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 25;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(optionsImagTF, gridBagConstraints);

        typeLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        typeLabel.setText("type");
        typeLabel.setToolTipText("select a predefined waveform or provide real, imaginary options coefficients");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(typeLabel, gridBagConstraints);

        typeCombo.setEditable(true);
        typeCombo.setModel(new DefaultComboBoxModel<String>(PERIODICWAVE_ATTR_TYPE_CHOICES));
        typeCombo.setToolTipText("select a predefined waveform or provide real, imaginary options coefficients");
        typeCombo.setMinimumSize(new java.awt.Dimension(100, 20));
        typeCombo.setPreferredSize(new java.awt.Dimension(100, 20));
        typeCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                typeComboItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(typeCombo, gridBagConstraints);

        typeInfoLabel.setText("select predefined waveform, otherwise provide custom options coefficients");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(typeInfoLabel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void descriptionTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descriptionTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_descriptionTFActionPerformed

    private void optionsImagTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionsImagTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_optionsImagTFActionPerformed

    private void typeComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_typeComboItemStateChanged
        enableOptionsFields();
    }//GEN-LAST:event_typeComboItemStateChanged
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.web3d.x3d.palette.items.DEFUSEpanel dEFUSEpanel1;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JTextField descriptionTF;
    private javax.swing.JCheckBox enabledCB;
    private javax.swing.JLabel enabledLabel;
    private javax.swing.JPanel eventHelpPanel;
    private javax.swing.JLabel eventsLabel1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JLabel optionsImagLabel;
    private javax.swing.JTextField optionsImagTF;
    private javax.swing.JLabel optionsRealLabel;
    private javax.swing.JTextField optionsRealTF;
    private javax.swing.JComboBox<String> typeCombo;
    private javax.swing.JLabel typeInfoLabel;
    private javax.swing.JLabel typeLabel;
    // End of variables declaration//GEN-END:variables
  
  
  @Override
  public String getNameKey()
  {
    return "NAME_X3D_PERIODICWAVE";
  }

  @Override
  public void unloadInput() throws IllegalArgumentException
  {
    unLoadDEFUSE();
    
    periodicWave.setDescription          (descriptionTF.getText().trim());
    periodicWave.setEnabled              (enabledCB.isSelected());
    
    periodicWave.setOptionsReal          (optionsRealTF.getText().trim());
    periodicWave.setOptionsImag          (optionsImagTF.getText().trim());
    
    periodicWave.setType                 (typeCombo.getSelectedItem().toString());
    
    checkOptionsArrayLengths();
  }
  
    /** Check title for naming conventions */
    private void checkOptionsArrayLengths()
    {
        String optionsRealString = optionsRealTF.getText().replace(","," ").trim();
        String optionsImagString = optionsImagTF.getText().replace(","," ").trim();
        int    optionsRealSize   = optionsRealString.split(" ").length;
        int    optionsImagSize   = optionsImagString.split(" ").length;
        
        if (optionsRealSize != optionsImagSize)
        {
            NotifyDescriptor d = new NotifyDescriptor.Message(
                "Mismatched options array sizes (" + optionsRealSize + ", " + optionsImagSize + ")",
                NotifyDescriptor.WARNING_MESSAGE);
            DialogDisplayer.getDefault().notify(d);
            // no corrective action, that is up to author
        }
    }
    private void enableOptionsFields()
    {
        String typeString = typeCombo.getSelectedItem().toString();
        boolean isPredefinedType = (typeString.equals(PERIODICWAVE_ATTR_TYPE_CHOICES[0]) || // "SINE"
                                    typeString.equals(PERIODICWAVE_ATTR_TYPE_CHOICES[1]) || // "SQUARE"
                                    typeString.equals(PERIODICWAVE_ATTR_TYPE_CHOICES[2]) || // "SAWTOOTH"
                                    typeString.equals(PERIODICWAVE_ATTR_TYPE_CHOICES[3]));  // "TRIANGLE"
        optionsRealTF   .setEnabled(!isPredefinedType);
        optionsImagTF   .setEnabled(!isPredefinedType);
        optionsRealLabel.setEnabled(!isPredefinedType);
        optionsImagLabel.setEnabled(!isPredefinedType);
    }
}
