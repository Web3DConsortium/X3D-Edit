/*
Copyright (c) 1995-2025 held by the author(s).  All rights reserved.
 
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
 
 * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer
      in the documentation and/or other materials provided with the
      distribution.
 * Neither the names of the Naval Postgraduate School (NPS)
      Modeling Virtual Environments and Simulation (MOVES) Institute
      (https://www.nps.edu and https://MovesInstitute.nps.edu)
      nor the names of its contributors may be used to endorse or
      promote products derived from this software without specific
      prior written permission.
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
 */

package org.web3d.x3d.palette.items;

import javax.swing.text.JTextComponent;
import org.openide.util.HelpCtx;

/**
 * LISTENERPOINTSOURCECustomizer:
 * ListenerPointSource represents the position and orientation of a person 
 * listening to virtual sound in the audio scene, and provides single or multiple 
 * sound channels as output. Multiple ListenerPointSource nodes can be active for 
 * sound processing.
 * 
 * @author Don Brutzman
 * @version $Id$
 */
public class LISTENERPOINTSOURCECustomizer extends BaseCustomizer
{ 
  private LISTENERPOINTSOURCE listenerPointSource;
  private JTextComponent target;
  
  /** Creates new form LISTENERPOINTSOURCECustomizer
     * @param listenerPointSource data
     * @param target component of interest */
  public LISTENERPOINTSOURCECustomizer(LISTENERPOINTSOURCE listenerPointSource, JTextComponent target)
  {
    super(listenerPointSource);
    this.listenerPointSource = listenerPointSource;
    this.target = target;
                           
    HelpCtx.setHelpIDString(LISTENERPOINTSOURCECustomizer.this, "LISTENERPOINTSOURCE_ELEM_HELPID");   
    
    initComponents();
    
    enabledCB.setSelected          (listenerPointSource.isEnabled());
    descriptionTF.setText          (listenerPointSource.getDescription());
    gainTF.setText                 (listenerPointSource.getGain());
    startTimeTF.setText            (listenerPointSource.getStartTime());
    stopTimeTF.setText             (listenerPointSource.getStopTime());
    pauseTimeTF.setText            (listenerPointSource.getPauseTime());
    resumeTimeTF.setText           (listenerPointSource.getResumeTime());
    
    dopplerEnabledCB.setSelected   (listenerPointSource.isDopplerEnabled());
    interauralDistanceTF.setText   (listenerPointSource.getInterauralDistance());
    trackCurrentViewCB.setSelected (listenerPointSource.isTrackCurrentView());
    
       position0TF.setText         (listenerPointSource.getPosition0());
       position1TF.setText         (listenerPointSource.getPosition1());
       position2TF.setText         (listenerPointSource.getPosition2());
    
    orientation0TF.setText         (listenerPointSource.getOrientation0());
    orientation1TF.setText         (listenerPointSource.getOrientation1());
    orientation2TF.setText         (listenerPointSource.getOrientation2());
    orientation3TF.setText         (listenerPointSource.getOrientation3());
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jTextField2 = new javax.swing.JTextField();
        dEFUSEpanel1 = getDEFUSEpanel();
        enabledLabel = new javax.swing.JLabel();
        enabledCB = new javax.swing.JCheckBox();
        descriptionTF = new javax.swing.JTextField();
        descriptionLabel = new javax.swing.JLabel();
        gainLabel = new javax.swing.JLabel();
        gainTF = new javax.swing.JTextField();
        interauralDistanceTFLabel = new javax.swing.JLabel();
        interauralDistanceTF = new javax.swing.JTextField();
        startTimeLabel = new javax.swing.JLabel();
        startTimeTF = new javax.swing.JTextField();
        stopTimeLabel = new javax.swing.JLabel();
        stopTimeTF = new javax.swing.JTextField();
        pauseTimeLabel = new javax.swing.JLabel();
        pauseTimeTF = new javax.swing.JTextField();
        resumeTimeLabel = new javax.swing.JLabel();
        resumeTimeTF = new javax.swing.JTextField();
        eventHelpPanel = new javax.swing.JPanel();
        eventsLabel1 = new javax.swing.JLabel();
        dopplerEnabledLabel = new javax.swing.JLabel();
        dopplerEnabledCB = new javax.swing.JCheckBox();
        trackCurrentViewLabel = new javax.swing.JLabel();
        trackCurrentViewCB = new javax.swing.JCheckBox();
        positionLabel = new javax.swing.JLabel();
        position0TF = new javax.swing.JTextField();
        position1TF = new javax.swing.JTextField();
        position2TF = new javax.swing.JTextField();
        orientationLabel = new javax.swing.JLabel();
        orientation0TF = new javax.swing.JTextField();
        orientation1TF = new javax.swing.JTextField();
        orientation2TF = new javax.swing.JTextField();
        orientation3TF = new javax.swing.JTextField();

        jTextField2.setText("jTextField2");

        setMinimumSize(new java.awt.Dimension(600, 510));
        setPreferredSize(new java.awt.Dimension(620, 530));
        setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(dEFUSEpanel1, gridBagConstraints);

        enabledLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        enabledLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        enabledLabel.setText("enabled");
        enabledLabel.setToolTipText("enables/disables node operation");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(enabledLabel, gridBagConstraints);

        enabledCB.setToolTipText("enables/disables node operation");
        enabledCB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(enabledCB, gridBagConstraints);

        descriptionTF.setToolTipText("Author-provided prose that describes intended purpose of the node");
        descriptionTF.setMinimumSize(new java.awt.Dimension(50, 20));
        descriptionTF.setPreferredSize(new java.awt.Dimension(50, 20));
        descriptionTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descriptionTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(descriptionTF, gridBagConstraints);

        descriptionLabel.setText("description");
        descriptionLabel.setToolTipText("Author-provided prose that describes intended purpose of the node");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 43, 3, 3);
        add(descriptionLabel, gridBagConstraints);

        gainLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        gainLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        gainLabel.setText("gain");
        gainLabel.setToolTipText("factor for linear amplification, can also negate input signal");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(gainLabel, gridBagConstraints);

        gainTF.setToolTipText("factor for linear amplification, can also negate input signal");
        gainTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gainTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(gainTF, gridBagConstraints);

        interauralDistanceTFLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        interauralDistanceTFLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        interauralDistanceTFLabel.setText("interauralDistanceTF");
        interauralDistanceTFLabel.setToolTipText(" duration of time that output signal continues after input signal becomes silent");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(interauralDistanceTFLabel, gridBagConstraints);

        interauralDistanceTF.setToolTipText(" duration of time that output signal continues after input signal becomes silent");
        interauralDistanceTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                interauralDistanceTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(interauralDistanceTF, gridBagConstraints);

        startTimeLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        startTimeLabel.setText("startTime");
        startTimeLabel.setToolTipText("System time when node starts");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(startTimeLabel, gridBagConstraints);

        startTimeTF.setToolTipText("System time when node starts");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(startTimeTF, gridBagConstraints);

        stopTimeLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        stopTimeLabel.setText("stopTime");
        stopTimeLabel.setToolTipText("System time when node stops");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(stopTimeLabel, gridBagConstraints);

        stopTimeTF.setToolTipText("System time when node stops");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(stopTimeTF, gridBagConstraints);

        pauseTimeLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        pauseTimeLabel.setText("pauseTime");
        pauseTimeLabel.setToolTipText("System time when node pauses");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(pauseTimeLabel, gridBagConstraints);

        pauseTimeTF.setToolTipText("System time when node pauses");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(pauseTimeTF, gridBagConstraints);

        resumeTimeLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        resumeTimeLabel.setText("resumeTime");
        resumeTimeLabel.setToolTipText("System time when node resumes");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(resumeTimeLabel, gridBagConstraints);

        resumeTimeTF.setToolTipText("System time when node resumes");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(resumeTimeTF, gridBagConstraints);

        eventHelpPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        eventHelpPanel.setLayout(new java.awt.GridBagLayout());

        eventsLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        eventsLabel1.setText("<html><p align=\"center\"> <b>ListenerPointSource</b> represents position and orientation of a person listening to virtual sound in a scene. </p> <br /> \n<p align=\"center\">ListenerPointSource has <b>no child nodes</b> as input signals, and the <b>parent node</b> receives the output signal. </p> <br />\n<p align=\"center\">The <b>position</b> and <b>orientation</b> fields place the virtual listener relative to duccrent coordinate frame. </p> <br /> \n<p align=\"center\">If <b>trackCurrentView</b> field is true, then <b>position</b> and <b>orientation</b>  match the user's current view. </p> <br /> \n<p align=\"center\"> Timing control for the node is provided by <b>startTime</b>, <b>stopTime</b>, <b>pauseTime</b>, <b>resumeTime</b> fields.</p> <br /> \n<p align=\"center\"> Additional output events are <b>isActive</b>, <b>isPaused</b>, and <b>elapsedTime</b>.</p> ");
        eventsLabel1.setToolTipText("Optionally can create ROUTEs to connect input and output events");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        eventHelpPanel.add(eventsLabel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LAST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 3);
        add(eventHelpPanel, gridBagConstraints);

        dopplerEnabledLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        dopplerEnabledLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        dopplerEnabledLabel.setText("dopplerEnabled");
        dopplerEnabledLabel.setToolTipText("enables/disables node operation");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(dopplerEnabledLabel, gridBagConstraints);

        dopplerEnabledCB.setToolTipText("enables/disables node operation");
        dopplerEnabledCB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(dopplerEnabledCB, gridBagConstraints);

        trackCurrentViewLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        trackCurrentViewLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        trackCurrentViewLabel.setText("trackCurrentView");
        trackCurrentViewLabel.setToolTipText("enables/disables node operation");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(trackCurrentViewLabel, gridBagConstraints);

        trackCurrentViewCB.setToolTipText("enables/disables node operation");
        trackCurrentViewCB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(trackCurrentViewCB, gridBagConstraints);

        positionLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        positionLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        positionLabel.setText("position");
        positionLabel.setToolTipText("position of sound center, relative to local coordinate system");
        positionLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        positionLabel.setMinimumSize(new java.awt.Dimension(60, 20));
        positionLabel.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(positionLabel, gridBagConstraints);

        position0TF.setToolTipText("x position of sound center, relative to local coordinate system");
        position0TF.setMaximumSize(null);
        position0TF.setMinimumSize(new java.awt.Dimension(60, 20));
        position0TF.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(position0TF, gridBagConstraints);

        position1TF.setToolTipText("y position of sound center, relative to local coordinate system");
        position1TF.setMaximumSize(null);
        position1TF.setMinimumSize(new java.awt.Dimension(60, 20));
        position1TF.setPreferredSize(new java.awt.Dimension(60, 20));
        position1TF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                position1TFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(position1TF, gridBagConstraints);

        position2TF.setToolTipText("z position of sound center, relative to local coordinate system");
        position2TF.setMaximumSize(null);
        position2TF.setMinimumSize(new java.awt.Dimension(60, 20));
        position2TF.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(position2TF, gridBagConstraints);

        orientationLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        orientationLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        orientationLabel.setText("orientation");
        orientationLabel.setToolTipText("direction of sound axis, relative to local coordinate system");
        orientationLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        orientationLabel.setMinimumSize(new java.awt.Dimension(60, 20));
        orientationLabel.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(orientationLabel, gridBagConstraints);

        orientation0TF.setToolTipText("z direction of sound axis, relative to local coordinate system");
        orientation0TF.setMaximumSize(null);
        orientation0TF.setMinimumSize(new java.awt.Dimension(60, 20));
        orientation0TF.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(orientation0TF, gridBagConstraints);

        orientation1TF.setToolTipText("x direction of sound axis, relative to local coordinate system");
        orientation1TF.setMaximumSize(null);
        orientation1TF.setMinimumSize(new java.awt.Dimension(60, 20));
        orientation1TF.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(orientation1TF, gridBagConstraints);

        orientation2TF.setToolTipText("y direction of sound axis, relative to local coordinate system");
        orientation2TF.setMaximumSize(null);
        orientation2TF.setMinimumSize(new java.awt.Dimension(60, 20));
        orientation2TF.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(orientation2TF, gridBagConstraints);

        orientation3TF.setToolTipText("y direction of sound axis, relative to local coordinate system");
        orientation3TF.setMaximumSize(null);
        orientation3TF.setMinimumSize(new java.awt.Dimension(60, 20));
        orientation3TF.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(orientation3TF, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void descriptionTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descriptionTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_descriptionTFActionPerformed

    private void interauralDistanceTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_interauralDistanceTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_interauralDistanceTFActionPerformed

    private void gainTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gainTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_gainTFActionPerformed

    private void position1TFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_position1TFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_position1TFActionPerformed
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.web3d.x3d.palette.items.DEFUSEpanel dEFUSEpanel1;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JTextField descriptionTF;
    private javax.swing.JCheckBox dopplerEnabledCB;
    private javax.swing.JLabel dopplerEnabledLabel;
    private javax.swing.JCheckBox enabledCB;
    private javax.swing.JLabel enabledLabel;
    private javax.swing.JPanel eventHelpPanel;
    private javax.swing.JLabel eventsLabel1;
    private javax.swing.JLabel gainLabel;
    private javax.swing.JTextField gainTF;
    private javax.swing.JTextField interauralDistanceTF;
    private javax.swing.JLabel interauralDistanceTFLabel;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField orientation0TF;
    private javax.swing.JTextField orientation1TF;
    private javax.swing.JTextField orientation2TF;
    private javax.swing.JTextField orientation3TF;
    private javax.swing.JLabel orientationLabel;
    private javax.swing.JLabel pauseTimeLabel;
    private javax.swing.JTextField pauseTimeTF;
    private javax.swing.JTextField position0TF;
    private javax.swing.JTextField position1TF;
    private javax.swing.JTextField position2TF;
    private javax.swing.JLabel positionLabel;
    private javax.swing.JLabel resumeTimeLabel;
    private javax.swing.JTextField resumeTimeTF;
    private javax.swing.JLabel startTimeLabel;
    private javax.swing.JTextField startTimeTF;
    private javax.swing.JLabel stopTimeLabel;
    private javax.swing.JTextField stopTimeTF;
    private javax.swing.JCheckBox trackCurrentViewCB;
    private javax.swing.JLabel trackCurrentViewLabel;
    // End of variables declaration//GEN-END:variables
  
  
  @Override
  public String getNameKey()
  {
    return "NAME_X3D_LISTENERPOINTSOURCE";
  }

  @Override
  public void unloadInput() throws IllegalArgumentException
  {
    unLoadDEFUSE();
    
    listenerPointSource.setDescription          (descriptionTF.getText().trim());
    listenerPointSource.setEnabled              (enabledCB.isSelected());
    listenerPointSource.setGain                 (gainTF.getText().trim());
    listenerPointSource.setStartTime            (startTimeTF.getText().trim());
    listenerPointSource.setStopTime             (stopTimeTF.getText().trim());
    listenerPointSource.setPauseTime            (pauseTimeTF.getText().trim());
    listenerPointSource.setResumeTime           (resumeTimeTF.getText().trim());
    
    listenerPointSource.setDopplerEnabled       (dopplerEnabledCB.isSelected());
    listenerPointSource.setInterauralDistance   (interauralDistanceTF.getText().trim());
    listenerPointSource.setTrackCurrentView     (trackCurrentViewCB.isSelected());
    
    listenerPointSource.setPosition0            (position0TF.getText().trim());
    listenerPointSource.setPosition1            (position1TF.getText().trim());
    listenerPointSource.setPosition2            (position2TF.getText().trim());
    listenerPointSource.setOrientation0         (orientation0TF.getText().trim());
    listenerPointSource.setOrientation1         (orientation1TF.getText().trim());
    listenerPointSource.setOrientation2         (orientation2TF.getText().trim());
    listenerPointSource.setOrientation3         (orientation3TF.getText().trim());
  }
}
