/*
Copyright (c) 1995-2025 held by the author(s).  All rights reserved.
 
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
 
 * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer
      in the documentation and/or other materials provided with the
      distribution.
 * Neither the names of the Naval Postgraduate School (NPS)
      Modeling Virtual Environments and Simulation (MOVES) Institute
      (https://www.nps.edu and https://MovesInstitute.nps.edu)
      nor the names of its contributors may be used to endorse or
      promote products derived from this software without specific
      prior written permission.
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
 */

package org.web3d.x3d.palette.items;

import javax.swing.DefaultComboBoxModel;
import javax.swing.text.JTextComponent;
import org.openide.util.HelpCtx;
import static org.web3d.x3d.types.X3DSchemaData.AUDIODESTINATION_ATTR_CHANNELCOUNTMODE_CHOICES;
import static org.web3d.x3d.types.X3DSchemaData.AUDIODESTINATION_ATTR_CHANNELINTERPRETATION_CHOICES;

/**
 * AUDIODESTINATIONCustomizer.java
 * 
 * @author Don Brutzman
 * @version $Id$
 */
public class AUDIODESTINATIONCustomizer extends BaseCustomizer
{ 
  private AUDIODESTINATION channelSelector;
  private JTextComponent target;
  
  /** Creates new form AUDIODESTINATIONCustomizer
     * @param channelSelector data
     * @param target component of interest */
  public AUDIODESTINATIONCustomizer(AUDIODESTINATION channelSelector, JTextComponent target)
  {
    super(channelSelector);
    this.channelSelector = channelSelector;
    this.target = target;
                           
    HelpCtx.setHelpIDString(AUDIODESTINATIONCustomizer.this, "AUDIODESTINATION_ELEM_HELPID");   
    
    initComponents();
    
         channelCountModeComboBox.setSelectedItem(channelSelector.getChannelCountMode());
    channelInterpretationComboBox.setSelectedItem(channelSelector.getChannelInterpretation());
    
    maxChannelCountTF.setText      (channelSelector.getMaxChannelCount());
    mediaDeviceIDTF.setText        (channelSelector.getMediaDeviceID());
    enabledCB.setSelected          (channelSelector.isEnabled());
    descriptionTF.setText          (channelSelector.getDescription());
    gainTF.setText                 (channelSelector.getGain());
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jTextField2 = new javax.swing.JTextField();
        dEFUSEpanel1 = getDEFUSEpanel();
        enabledLabel = new javax.swing.JLabel();
        enabledCB = new javax.swing.JCheckBox();
        descriptionTF = new javax.swing.JTextField();
        descriptionLabel = new javax.swing.JLabel();
        channelCountModeLabel = new javax.swing.JLabel();
        channelCountModeComboBox = new javax.swing.JComboBox<>();
        channelInterpretationLabel = new javax.swing.JLabel();
        channelInterpretationComboBox = new javax.swing.JComboBox<>();
        gainLabel = new javax.swing.JLabel();
        gainTF = new javax.swing.JTextField();
        eventHelpPanel = new javax.swing.JPanel();
        eventsLabel1 = new javax.swing.JLabel();
        maxChannelCountLabel = new javax.swing.JLabel();
        maxChannelCountTF = new javax.swing.JTextField();
        mediaDeviceIDLabel = new javax.swing.JLabel();
        mediaDeviceIDTF = new javax.swing.JTextField();

        jTextField2.setText("jTextField2");

        setMinimumSize(new java.awt.Dimension(600, 370));
        setPreferredSize(new java.awt.Dimension(620, 380));
        setRequestFocusEnabled(false);
        setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(dEFUSEpanel1, gridBagConstraints);

        enabledLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        enabledLabel.setText("enabled");
        enabledLabel.setToolTipText("enables/disables node operation");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(enabledLabel, gridBagConstraints);

        enabledCB.setToolTipText("enables/disables node operation");
        enabledCB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(enabledCB, gridBagConstraints);

        descriptionTF.setToolTipText("Author-provided prose that describes intended purpose of the node");
        descriptionTF.setMinimumSize(new java.awt.Dimension(50, 20));
        descriptionTF.setPreferredSize(new java.awt.Dimension(50, 20));
        descriptionTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descriptionTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(descriptionTF, gridBagConstraints);

        descriptionLabel.setText("description");
        descriptionLabel.setToolTipText("Author-provided prose that describes intended purpose of the node");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 43, 3, 3);
        add(descriptionLabel, gridBagConstraints);

        channelCountModeLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        channelCountModeLabel.setText("channelCountMode");
        channelCountModeLabel.setToolTipText("how individual channels are counted when up-mixing and down-mixing connections to any inputs");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(channelCountModeLabel, gridBagConstraints);

        channelCountModeComboBox.setModel(new DefaultComboBoxModel<String>(AUDIODESTINATION_ATTR_CHANNELCOUNTMODE_CHOICES));
        channelCountModeComboBox.setToolTipText("how individual channels are counted when up-mixing and down-mixing connections to any inputs");
        channelCountModeComboBox.setMinimumSize(new java.awt.Dimension(100, 20));
        channelCountModeComboBox.setPreferredSize(new java.awt.Dimension(100, 20));
        channelCountModeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                channelCountModeComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(channelCountModeComboBox, gridBagConstraints);

        channelInterpretationLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        channelInterpretationLabel.setText("channelInterpretation");
        channelInterpretationLabel.setToolTipText("how individual channels are treated when up-mixing and down-mixing connections to any inputs");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(channelInterpretationLabel, gridBagConstraints);

        channelInterpretationComboBox.setModel(new DefaultComboBoxModel<String>(AUDIODESTINATION_ATTR_CHANNELINTERPRETATION_CHOICES));
        channelInterpretationComboBox.setToolTipText("how individual channels are treated when up-mixing and down-mixing connections to any inputs");
        channelInterpretationComboBox.setMinimumSize(new java.awt.Dimension(100, 20));
        channelInterpretationComboBox.setPreferredSize(new java.awt.Dimension(100, 20));
        channelInterpretationComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                channelInterpretationComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(channelInterpretationComboBox, gridBagConstraints);

        gainLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        gainLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        gainLabel.setText("gain");
        gainLabel.setToolTipText("factor for linear amplification, can also negate input signal");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(gainLabel, gridBagConstraints);

        gainTF.setToolTipText("factor for linear amplification, can also negate input signal");
        gainTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gainTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 25;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(gainTF, gridBagConstraints);

        eventHelpPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        eventHelpPanel.setLayout(new java.awt.GridBagLayout());

        eventsLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        eventsLabel1.setText("<html><p align=\"center\"> <b>AudioDestination</b> is final audio destination that user ultimately hears, typically from speakers of user device. </p> <br /> \n<p align=\"center\">The <b>mediaDeviceID</b> field is a unique identifier for the active device. </p> <br /> \n<p align=\"center\">The <b>maxChannelCount</b> field is maximum number of channels that the destination is capable of supporting. </p> <br /> \n<p align=\"center\">AudioDestination <b>child nodes</b> provide input signals, and the <b>parent node</b> receives the unmodified output signal from this node. </p>");
        eventsLabel1.setToolTipText("Optionally can create ROUTEs to connect input and output events");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        eventHelpPanel.add(eventsLabel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LAST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 3);
        add(eventHelpPanel, gridBagConstraints);

        maxChannelCountLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        maxChannelCountLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        maxChannelCountLabel.setText("maxChannelCount");
        maxChannelCountLabel.setToolTipText("which channel to select, with index values beginning at 0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(maxChannelCountLabel, gridBagConstraints);

        maxChannelCountTF.setToolTipText("which channel to select, with index values beginning at 0");
        maxChannelCountTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxChannelCountTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 25;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(maxChannelCountTF, gridBagConstraints);

        mediaDeviceIDLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        mediaDeviceIDLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        mediaDeviceIDLabel.setText("mediaDeviceID");
        mediaDeviceIDLabel.setToolTipText("which channel to select, with index values beginning at 0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(mediaDeviceIDLabel, gridBagConstraints);

        mediaDeviceIDTF.setToolTipText("which channel to select, with index values beginning at 0");
        mediaDeviceIDTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mediaDeviceIDTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 25;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(mediaDeviceIDTF, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void descriptionTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descriptionTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_descriptionTFActionPerformed

    private void channelCountModeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_channelCountModeComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_channelCountModeComboBoxActionPerformed

    private void channelInterpretationComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_channelInterpretationComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_channelInterpretationComboBoxActionPerformed

    private void gainTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gainTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_gainTFActionPerformed

    private void maxChannelCountTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxChannelCountTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_maxChannelCountTFActionPerformed

    private void mediaDeviceIDTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mediaDeviceIDTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mediaDeviceIDTFActionPerformed
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> channelCountModeComboBox;
    private javax.swing.JLabel channelCountModeLabel;
    private javax.swing.JComboBox<String> channelInterpretationComboBox;
    private javax.swing.JLabel channelInterpretationLabel;
    private org.web3d.x3d.palette.items.DEFUSEpanel dEFUSEpanel1;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JTextField descriptionTF;
    private javax.swing.JCheckBox enabledCB;
    private javax.swing.JLabel enabledLabel;
    private javax.swing.JPanel eventHelpPanel;
    private javax.swing.JLabel eventsLabel1;
    private javax.swing.JLabel gainLabel;
    private javax.swing.JTextField gainTF;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JLabel maxChannelCountLabel;
    private javax.swing.JTextField maxChannelCountTF;
    private javax.swing.JLabel mediaDeviceIDLabel;
    private javax.swing.JTextField mediaDeviceIDTF;
    // End of variables declaration//GEN-END:variables
  
  
  @Override
  public String getNameKey()
  {
    return "NAME_X3D_AUDIODESTINATION";
  }

  @Override
  public void unloadInput() throws IllegalArgumentException
  {
    unLoadDEFUSE();
    
    channelSelector.setMaxChannelCount      (maxChannelCountTF.getText().trim());
    channelSelector.setMediaDeviceID        (mediaDeviceIDTF.getText().trim());
    channelSelector.setChannelCountMode     (channelCountModeComboBox.getSelectedItem().toString());
    channelSelector.setChannelInterpretation(channelInterpretationComboBox.getSelectedItem().toString());
    channelSelector.setDescription          (descriptionTF.getText().trim());
    channelSelector.setEnabled              (enabledCB.isSelected());
    channelSelector.setGain                 (gainTF.getText().trim());
  }
}
