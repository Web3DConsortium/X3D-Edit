/*
Copyright (c) 1995-2022 held by the author(s).  All rights reserved.
 
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
 
 * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer
      in the documentation and/or other materials provided with the
      distribution.
 * Neither the names of the Naval Postgraduate School (NPS)
      Modeling Virtual Environments and Simulation (MOVES) Institute
      (https://www.nps.edu and https://MovesInstitute.nps.edu)
      nor the names of its contributors may be used to endorse or
      promote products derived from this software without specific
      prior written permission.
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
 */

package org.web3d.x3d.palette.items;

import javax.swing.text.JTextComponent;
import org.openide.util.HelpCtx;
import org.web3d.x3d.X3DDataObject;

/**
 * AUDIOCLIPCustomizer.java
 * 
 * @author Mike Bailey and Don Brutzman
 * @version $Id$
 */
public class AUDIOCLIPCustomizer extends BaseCustomizer
{
  private final AUDIOCLIP audioClip;
  private final JTextComponent target;
  private final X3DDataObject xObj;
  
  /** Creates new form LOADSENSORCustomizer
     * @param audioClip
     * @param target Swing component of interest
     * @param xObj */
  public AUDIOCLIPCustomizer(AUDIOCLIP audioClip, JTextComponent target, X3DDataObject xObj)
  {
    super(audioClip);
    this.audioClip = audioClip;
    this.target = target;    
    this.xObj = xObj;
    
    HelpCtx.setHelpIDString(this, "AUDIOCLIP_ELEM_HELPID");
    
    initComponents();
    
    autoRefreshTF.setText(audioClip.getAutoRefresh());
    autoRefreshTimeLimitTF.setText(audioClip.getAutoRefreshTimeLimit());
    gainTF.setText(audioClip.getGain());
    loadCB.setSelected(audioClip.isLoad());

    urlList.setMasterDocumentLocation(xObj.getPrimaryFile());
    urlList.setUrlData(audioClip.getUrls());
    urlList.setTarget(target); // enable urlList to reach back into jdom tree to getHeaderIdentifierPath()
    urlList.setFileChooserSound();
    urlList.checkUrlValues();
    
    descriptionTA.setText(audioClip.getDescription());
           loopCB.setSelected(audioClip.isLoop());
          pitchTF.setText(audioClip.getPitch());
      pauseTimeTF.setText(audioClip.getPauseTime());
     resumeTimeTF.setText(audioClip.getResumeTime());
      startTimeTF.setText(audioClip.getStartTime());
       stopTimeTF.setText(audioClip.getStopTime());

    setDefaultDEFname ();
  }
  private void setDefaultDEFname ()
  {
	if ((urlList == null) || (urlList.getUrlData() == null) || (urlList.getUrlData().length == 0))
	{
		super.getDEFUSEpanel().setDefaultDEFname("New" + "AudioClip");
		return;
	}
    // extract file name (minus extension) as candidate DEF name
    String fileName = urlList.getUrlData()[0];
    if (fileName.contains("/"))
        fileName = fileName.substring(fileName.lastIndexOf("/") + 1);
    if (fileName.contains("\\"))
        fileName = fileName.substring(fileName.lastIndexOf("\\") + 1);
    if (fileName.contains("."))
        fileName = fileName.substring(0,fileName.lastIndexOf("."));
    if (fileName.length() > 0)
        fileName += "AudioClip"; // otherwise empty
    
    super.getDEFUSEpanel().setDefaultDEFname(fileName);
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        dEFUSEpanel1 = getDEFUSEpanel();
        enabledLabel = new javax.swing.JLabel();
        enabledCB = new javax.swing.JCheckBox();
        gainLabel = new javax.swing.JLabel();
        gainTF = new javax.swing.JTextField();
        descriptionLabel = new javax.swing.JLabel();
        descriptionScrollPane = new javax.swing.JScrollPane();
        descriptionTA = new javax.swing.JTextArea();
        loopLabel = new javax.swing.JLabel();
        loopCB = new javax.swing.JCheckBox();
        loadLabel = new javax.swing.JLabel();
        loadCB = new javax.swing.JCheckBox();
        autoRefreshLabel = new javax.swing.JLabel();
        autoRefreshTF = new javax.swing.JTextField();
        autoRefreshTimeLimitLabel = new javax.swing.JLabel();
        autoRefreshTimeLimitTF = new javax.swing.JTextField();
        pitchLabel = new javax.swing.JLabel();
        pitchTF = new javax.swing.JTextField();
        pauseTimeLabel = new javax.swing.JLabel();
        pauseTimeTF = new javax.swing.JTextField();
        resumeTimeLabel = new javax.swing.JLabel();
        resumeTimeTF = new javax.swing.JTextField();
        startTimeLabel = new javax.swing.JLabel();
        startTimeTF = new javax.swing.JTextField();
        stopTimeLabel = new javax.swing.JLabel();
        stopTimeTF = new javax.swing.JTextField();
        urlLabel = new javax.swing.JLabel();
        urlList = new org.web3d.x3d.palette.items.UrlExpandableList2();
        nodeHintPanel = new javax.swing.JPanel();
        hintLabel1 = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(720, 600));
        setPreferredSize(new java.awt.Dimension(730, 620));
        setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(dEFUSEpanel1, gridBagConstraints);

        enabledLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        enabledLabel.setForeground(new java.awt.Color(0, 153, 153));
        enabledLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        enabledLabel.setText("enabled");
        enabledLabel.setToolTipText("enables/disables node operation");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(enabledLabel, gridBagConstraints);

        enabledCB.setToolTipText("enables/disables node operation");
        enabledCB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(enabledCB, gridBagConstraints);

        gainLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        gainLabel.setForeground(new java.awt.Color(0, 153, 153));
        gainLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        gainLabel.setText("gain");
        gainLabel.setToolTipText("Multiplier for the rate at which sampled sound is played. Changing pitch also changes playback speed.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 45;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(gainLabel, gridBagConstraints);

        gainTF.setToolTipText("Multiplier for the rate at which sampled sound is played. Changing pitch also changes playback speed.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 117;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(gainTF, gridBagConstraints);

        descriptionLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        descriptionLabel.setText("description");
        descriptionLabel.setToolTipText("text description to be displayed for action of this node");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(descriptionLabel, gridBagConstraints);

        descriptionTA.setColumns(1);
        descriptionTA.setRows(3);
        descriptionTA.setToolTipText("text description to be displayed for action of this node");
        descriptionScrollPane.setViewportView(descriptionTA);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 800;
        gridBagConstraints.ipady = 33;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(descriptionScrollPane, gridBagConstraints);

        loopLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        loopLabel.setText("loop");
        loopLabel.setToolTipText("repeat indefinitely when loop=true, repeat only once when loop=false. ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 48;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(loopLabel, gridBagConstraints);

        loopCB.setToolTipText("repeat indefinitely when loop=true, repeat only once when loop=false. ");
        loopCB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(loopCB, gridBagConstraints);

        loadLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        loadLabel.setForeground(new java.awt.Color(0, 153, 153));
        loadLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        loadLabel.setText("load");
        loadLabel.setToolTipText("load=true means load immediately, load=false means defer loading or else unload a previously loaded asset.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 48;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(loadLabel, gridBagConstraints);

        loadCB.setToolTipText("load=true means load immediately, load=false means defer loading or else unload a previously loaded asset.");
        loadCB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(loadCB, gridBagConstraints);

        autoRefreshLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        autoRefreshLabel.setForeground(new java.awt.Color(0, 153, 153));
        autoRefreshLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        autoRefreshLabel.setText("autoRefresh");
        autoRefreshLabel.setToolTipText("Multiplier for the rate at which sampled sound is played. Changing pitch also changes playback speed.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.ipadx = 45;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(autoRefreshLabel, gridBagConstraints);

        autoRefreshTF.setToolTipText("Multiplier for the rate at which sampled sound is played. Changing pitch also changes playback speed.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 117;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(autoRefreshTF, gridBagConstraints);

        autoRefreshTimeLimitLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        autoRefreshTimeLimitLabel.setText("pitch");
        autoRefreshTimeLimitLabel.setToolTipText("Multiplier for the rate at which sampled sound is played. Changing pitch also changes playback speed.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 45;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(autoRefreshTimeLimitLabel, gridBagConstraints);

        autoRefreshTimeLimitTF.setToolTipText("Multiplier for the rate at which sampled sound is played. Changing pitch also changes playback speed.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.ipadx = 117;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(autoRefreshTimeLimitTF, gridBagConstraints);

        pitchLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        pitchLabel.setForeground(new java.awt.Color(0, 153, 153));
        pitchLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        pitchLabel.setText("autoRefreshTimeLimit");
        pitchLabel.setToolTipText("Multiplier for the rate at which sampled sound is played. Changing pitch also changes playback speed.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.ipadx = 45;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(pitchLabel, gridBagConstraints);

        pitchTF.setToolTipText("Multiplier for the rate at which sampled sound is played. Changing pitch also changes playback speed.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 117;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(pitchTF, gridBagConstraints);

        pauseTimeLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        pauseTimeLabel.setText("pauseTime");
        pauseTimeLabel.setToolTipText("When time now >= pauseTime, isPaused becomes true and AudioClip becomes paused");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.ipadx = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(pauseTimeLabel, gridBagConstraints);

        pauseTimeTF.setToolTipText("When time now >= pauseTime, isPaused becomes true and AudioClip becomes paused");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 117;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(pauseTimeTF, gridBagConstraints);

        resumeTimeLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        resumeTimeLabel.setText("resumeTime");
        resumeTimeLabel.setToolTipText("When resumeTime becomes <= time now, isPaused becomes false and AudioClip becomes active");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(resumeTimeLabel, gridBagConstraints);

        resumeTimeTF.setToolTipText("When resumeTime becomes <= time now, isPaused becomes false and AudioClip becomes active");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 117;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(resumeTimeTF, gridBagConstraints);

        startTimeLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        startTimeLabel.setText("startTime");
        startTimeLabel.setToolTipText("Absolute time: number of seconds since Jan 1, 1970, 00:00:00 GMT");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.ipadx = 17;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(startTimeLabel, gridBagConstraints);

        startTimeTF.setToolTipText("Absolute time: number of seconds since Jan 1, 1970, 00:00:00 GMT");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 117;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(startTimeTF, gridBagConstraints);

        stopTimeLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        stopTimeLabel.setText("stopTime");
        stopTimeLabel.setToolTipText("Absolute time: number of seconds since Jan 1, 1970, 00:00:00 GMT");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.ipadx = 19;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(stopTimeLabel, gridBagConstraints);

        stopTimeTF.setToolTipText("Absolute time: number of seconds since Jan 1, 1970, 00:00:00 GMT");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 117;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(stopTimeTF, gridBagConstraints);

        urlLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        urlLabel.setText("url");
        urlLabel.setToolTipText("Address of audio file to load into current scene");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.ipadx = 57;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(urlLabel, gridBagConstraints);

        urlList.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        urlList.setToolTipText("Address of audio file to load into current scene");
        urlList.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                urlListPropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(urlList, gridBagConstraints);

        nodeHintPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        nodeHintPanel.setLayout(new java.awt.GridBagLayout());

        hintLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        hintLabel1.setText("<html><p align='center'><b>AudioClip</b> provides audio data used by parent <b>Sound</b> nodes.</p> <br />\n<p align='center'>Either set loop='true' or ROUTE time events to control playback.</p> <br />\n<p align='center'>Hint: fields <i>autoRefresh</i>, <i>autoRefreshTimeLimit</i>, <i>enabled</i>, <i>gain</i>, and <i>load</i> are X3D version 4.</p>");
        hintLabel1.setToolTipText("close this panel to add children nodes");
        hintLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        nodeHintPanel.add(hintLabel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(nodeHintPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void urlListPropertyChange(java.beans.PropertyChangeEvent evt)//GEN-FIRST:event_urlListPropertyChange
    {//GEN-HEADEREND:event_urlListPropertyChange
        setDefaultDEFname ();
    }//GEN-LAST:event_urlListPropertyChange
  
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel autoRefreshLabel;
    private javax.swing.JTextField autoRefreshTF;
    private javax.swing.JLabel autoRefreshTimeLimitLabel;
    private javax.swing.JTextField autoRefreshTimeLimitTF;
    private org.web3d.x3d.palette.items.DEFUSEpanel dEFUSEpanel1;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JScrollPane descriptionScrollPane;
    private javax.swing.JTextArea descriptionTA;
    private javax.swing.JCheckBox enabledCB;
    private javax.swing.JLabel enabledLabel;
    private javax.swing.JLabel gainLabel;
    private javax.swing.JTextField gainTF;
    private javax.swing.JLabel hintLabel1;
    private javax.swing.JCheckBox loadCB;
    private javax.swing.JLabel loadLabel;
    private javax.swing.JCheckBox loopCB;
    private javax.swing.JLabel loopLabel;
    private javax.swing.JPanel nodeHintPanel;
    private javax.swing.JLabel pauseTimeLabel;
    private javax.swing.JTextField pauseTimeTF;
    private javax.swing.JLabel pitchLabel;
    private javax.swing.JTextField pitchTF;
    private javax.swing.JLabel resumeTimeLabel;
    private javax.swing.JTextField resumeTimeTF;
    private javax.swing.JLabel startTimeLabel;
    private javax.swing.JTextField startTimeTF;
    private javax.swing.JLabel stopTimeLabel;
    private javax.swing.JTextField stopTimeTF;
    private javax.swing.JLabel urlLabel;
    private org.web3d.x3d.palette.items.UrlExpandableList2 urlList;
    // End of variables declaration//GEN-END:variables

  @Override
  public String getNameKey()
  {
    return "NAME_X3D_AUDIOCLIP";
  }

  @Override
  public void unloadInput() throws IllegalArgumentException
  {
    unLoadDEFUSE();
    urlList.checkUrlValues();

    audioClip.setAutoRefresh(autoRefreshTF.getText().trim());
    audioClip.setAutoRefreshTimeLimit(autoRefreshTimeLimitTF.getText().trim());
    audioClip.setDescription(descriptionTA.getText().trim());
    audioClip.setEnabled(enabledCB.isSelected());
    audioClip.setGain(gainTF.getText().trim());
    audioClip.setLoad(loadCB.isSelected());
    audioClip.setLoop(loopCB.isSelected());
    audioClip.setPitch(pitchTF.getText().trim());
    audioClip.setPauseTime(pauseTimeTF.getText().trim());
    audioClip.setResumeTime(resumeTimeTF.getText().trim());
    audioClip.setStartTime(startTimeTF.getText().trim());
    audioClip.setStopTime(stopTimeTF.getText().trim());
    audioClip.setUrls(urlList.getUrlData());
  }  
}
