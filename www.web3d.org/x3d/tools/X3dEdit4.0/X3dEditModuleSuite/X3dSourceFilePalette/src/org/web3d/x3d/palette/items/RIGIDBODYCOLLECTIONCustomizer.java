/*
Copyright (c) 1995-2021 held by the author(s) .  All rights reserved.
 
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
 
 * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer
      in the documentation and/or other materials provided with the
      distribution.
 * Neither the names of the Naval Postgraduate School (NPS)
      Modeling Virtual Environments and Simulation (MOVES) Institute
      (http://www.nps.edu and https://MovesInstitute.nps.edu)
      nor the names of its contributors may be used to endorse or
      promote products derived from this software without specific
      prior written permission.
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
 */

package org.web3d.x3d.palette.items;

import javax.swing.text.JTextComponent;
import org.openide.util.HelpCtx;
import static org.web3d.x3d.types.X3DSchemaData.*;

/**
 * RIGIDBODYCOLLECTIONCustomizer.java
 * Created on 3 January 2009
 *
 * MOVES Institute
 * Naval Postgraduate School, Monterey, CA, USA
 * www.nps.edu
 *
 * @author Mike Bailey, Don Brutzman
 * @version $Id$
 */
public class RIGIDBODYCOLLECTIONCustomizer extends BaseCustomizer
{
  private RIGIDBODYCOLLECTION rigidBodyCollection;
  private JTextComponent target;
  
  /** Creates new form RIGIDBODYCOLLECTIONCustomizer */
  public RIGIDBODYCOLLECTIONCustomizer(RIGIDBODYCOLLECTION rigidBodyCollection, JTextComponent target)
  {
    super(rigidBodyCollection);
    this.rigidBodyCollection = rigidBodyCollection;
    this.target = target;
                             
    HelpCtx.setHelpIDString(this, "RIGIDBODYCOLLECTION_ELEM_HELPID");   
    
    initComponents();
   
    autoDisableCB.setSelected(rigidBodyCollection.isAutoDisable());
    enabledCB.setSelected(rigidBodyCollection.isEnabled());
    preferAccuracyCB.setSelected(rigidBodyCollection.isPreferAccuracy());
    
    constantForceMixTF.setText(rigidBodyCollection.getConstantForceMix());
    contactSurfaceThicknessTF.setText(rigidBodyCollection.getContactSurfaceThickness()); 
    disableAngularSpeedTF.setText(rigidBodyCollection.getDisableAngularSpeed());
    disableLinearSpeedTF.setText(rigidBodyCollection.getDisableLinearSpeed());
    disableTimeTF.setText(rigidBodyCollection.getDisableTime());
    errorCorrectionTF.setText(rigidBodyCollection.getErrorCorrection());
    
    gravity0TF.setText(rigidBodyCollection.getGravity0());
    gravity1TF.setText(rigidBodyCollection.getGravity1());
    gravity2TF.setText(rigidBodyCollection.getGravity2());
    
    iterationsTF.setText(rigidBodyCollection.getIterations());    
    maxCorrectionSpeedTF.setText(rigidBodyCollection.getMaxCorrectionSpeed());
  }
 
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        dEFUSEpanel1 = getDEFUSEpanel();
        constantForceMixLabel = new javax.swing.JLabel();
        constantForceMixTF = new javax.swing.JTextField();
        iterationsLabel = new javax.swing.JLabel();
        iterationsTF = new javax.swing.JTextField();
        disableLinearSpeedLabel = new javax.swing.JLabel();
        disableLinearSpeedTF = new javax.swing.JTextField();
        enabledLabel = new javax.swing.JLabel();
        enabledCB = new javax.swing.JCheckBox();
        errorCorrectionLabel = new javax.swing.JLabel();
        errorCorrectionTF = new javax.swing.JTextField();
        disableTimeLabel = new javax.swing.JLabel();
        maxCorrectionSpeedLabel = new javax.swing.JLabel();
        disableTimeTF = new javax.swing.JTextField();
        maxCorrectionSpeedTF = new javax.swing.JTextField();
        disableAngularSpeedLabel = new javax.swing.JLabel();
        disableAngularSpeedTF = new javax.swing.JTextField();
        gravityLabel = new javax.swing.JLabel();
        gravity0TF = new javax.swing.JTextField();
        gravity1TF = new javax.swing.JTextField();
        gravity2TF = new javax.swing.JTextField();
        autoDisableLabel = new javax.swing.JLabel();
        autoDisableCB = new javax.swing.JCheckBox();
        preferAccuracyCB = new javax.swing.JCheckBox();
        preferAccuracyLabel = new javax.swing.JLabel();
        coontactSurfaceThicknessLabel = new javax.swing.JLabel();
        contactSurfaceThicknessTF = new javax.swing.JTextField();

        setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 3, 8);
        add(dEFUSEpanel1, gridBagConstraints);

        constantForceMixLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        constantForceMixLabel.setText("constantForceMix");
        constantForceMixLabel.setToolTipText("modifies damping calculations by violating normal constraints while applying small, constant forces in those calculations");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 8, 3, 3);
        add(constantForceMixLabel, gridBagConstraints);

        constantForceMixTF.setColumns(4);
        constantForceMixTF.setToolTipText("modifies damping calculations by violating normal constraints while applying small, constant forces in those calculations");
        constantForceMixTF.setMinimumSize(new java.awt.Dimension(40, 20));
        constantForceMixTF.setPreferredSize(new java.awt.Dimension(40, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(constantForceMixTF, gridBagConstraints);

        iterationsLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        iterationsLabel.setText("iterations");
        iterationsLabel.setToolTipText("controls number of iterations performed over collectioned joints and bodies during each evaluation");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 8, 3, 3);
        add(iterationsLabel, gridBagConstraints);

        iterationsTF.setColumns(4);
        iterationsTF.setToolTipText("controls number of iterations performed over collectioned joints and bodies during each evaluation");
        iterationsTF.setMinimumSize(new java.awt.Dimension(40, 20));
        iterationsTF.setPreferredSize(new java.awt.Dimension(40, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.33;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(iterationsTF, gridBagConstraints);

        disableLinearSpeedLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        disableLinearSpeedLabel.setText("disableLinearSpeed");
        disableLinearSpeedLabel.setToolTipText("defines lower-limit tolerance value when body is considered at rest and not part of rigid body calculations, reducing numeric instabilities");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 8, 3, 3);
        add(disableLinearSpeedLabel, gridBagConstraints);

        disableLinearSpeedTF.setColumns(4);
        disableLinearSpeedTF.setToolTipText("defines lower-limit tolerance value when body is considered at rest and not part of rigid body calculations, reducing numeric instabilities");
        disableLinearSpeedTF.setMinimumSize(new java.awt.Dimension(40, 20));
        disableLinearSpeedTF.setPreferredSize(new java.awt.Dimension(40, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.25;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(disableLinearSpeedTF, gridBagConstraints);

        enabledLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        enabledLabel.setText("enabled");
        enabledLabel.setToolTipText("enable/disable node operation");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 8, 3, 3);
        add(enabledLabel, gridBagConstraints);

        enabledCB.setToolTipText("enable/disable node operation");
        enabledCB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        add(enabledCB, gridBagConstraints);

        errorCorrectionLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        errorCorrectionLabel.setText("errorCorrection");
        errorCorrectionLabel.setToolTipText("describes how quickly intersection errors due to floating point inaccuracies are resolved (0=no correction, 1=all corrected in single step)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 8, 3, 3);
        add(errorCorrectionLabel, gridBagConstraints);

        errorCorrectionTF.setToolTipText("describes how quickly intersection errors due to floating point inaccuracies are resolved (0=no correction, 1=all corrected in single step)");
        errorCorrectionTF.setMinimumSize(new java.awt.Dimension(40, 20));
        errorCorrectionTF.setPreferredSize(new java.awt.Dimension(40, 20));
        errorCorrectionTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                errorCorrectionTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(errorCorrectionTF, gridBagConstraints);

        disableTimeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        disableTimeLabel.setText("disableTime");
        disableTimeLabel.setToolTipText("defines interval when body becomes at rest and not part of rigid body calculations, reducing numeric instabilities");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 8, 3, 3);
        add(disableTimeLabel, gridBagConstraints);

        maxCorrectionSpeedLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        maxCorrectionSpeedLabel.setText("maxCorrectionSpeed");
        maxCorrectionSpeedLabel.setToolTipText("");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 8, 3, 3);
        add(maxCorrectionSpeedLabel, gridBagConstraints);

        disableTimeTF.setToolTipText("defines interval when body becomes at rest and not part of rigid body calculations, reducing numeric instabilities");
        disableTimeTF.setMinimumSize(new java.awt.Dimension(40, 20));
        disableTimeTF.setPreferredSize(new java.awt.Dimension(40, 20));
        disableTimeTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disableTimeTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(disableTimeTF, gridBagConstraints);

        maxCorrectionSpeedTF.setToolTipText("");
        maxCorrectionSpeedTF.setMinimumSize(new java.awt.Dimension(40, 20));
        maxCorrectionSpeedTF.setPreferredSize(new java.awt.Dimension(40, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(maxCorrectionSpeedTF, gridBagConstraints);

        disableAngularSpeedLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        disableAngularSpeedLabel.setText("disableAngularSpeed");
        disableAngularSpeedLabel.setToolTipText("defines lower-limit tolerance value when body is considered at rest and not part of rigid body calculations, reducing numeric instabilities");
        disableAngularSpeedLabel.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 8, 3, 3);
        add(disableAngularSpeedLabel, gridBagConstraints);

        disableAngularSpeedTF.setColumns(4);
        disableAngularSpeedTF.setToolTipText("defines lower-limit tolerance value when body is considered at rest and not part of rigid body calculations, reducing numeric instabilities");
        disableAngularSpeedTF.setMinimumSize(new java.awt.Dimension(40, 20));
        disableAngularSpeedTF.setPreferredSize(new java.awt.Dimension(40, 20));
        disableAngularSpeedTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disableAngularSpeedTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.33;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(disableAngularSpeedTF, gridBagConstraints);

        gravityLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        gravityLabel.setText("gravity");
        gravityLabel.setToolTipText("direction and strength of local gravity vector for this collection of bodies");
        gravityLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 8, 3, 3);
        add(gravityLabel, gridBagConstraints);

        gravity0TF.setColumns(4);
        gravity0TF.setToolTipText("direction and strength of local gravity vector for this collection of bodies");
        gravity0TF.setMinimumSize(new java.awt.Dimension(40, 20));
        gravity0TF.setPreferredSize(new java.awt.Dimension(40, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(gravity0TF, gridBagConstraints);

        gravity1TF.setColumns(4);
        gravity1TF.setToolTipText("direction and strength of local gravity vector for this collection of bodies");
        gravity1TF.setMinimumSize(new java.awt.Dimension(40, 20));
        gravity1TF.setPreferredSize(new java.awt.Dimension(40, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.33;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(gravity1TF, gridBagConstraints);

        gravity2TF.setColumns(4);
        gravity2TF.setToolTipText("direction and strength of local gravity vector for this collection of bodies");
        gravity2TF.setMinimumSize(new java.awt.Dimension(40, 20));
        gravity2TF.setPreferredSize(new java.awt.Dimension(40, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.33;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(gravity2TF, gridBagConstraints);

        autoDisableLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        autoDisableLabel.setText("autoDisable");
        autoDisableLabel.setToolTipText("toggles operation of disableAngularSpeed, disableLinearSpeed, disableTime");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 8, 3, 3);
        add(autoDisableLabel, gridBagConstraints);

        autoDisableCB.setToolTipText("toggles operation of disableAngularSpeed, disableLinearSpeed, disableTime");
        autoDisableCB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(autoDisableCB, gridBagConstraints);

        preferAccuracyCB.setToolTipText("performance preference: higher accuracy or faster computational speed");
        preferAccuracyCB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        add(preferAccuracyCB, gridBagConstraints);

        preferAccuracyLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        preferAccuracyLabel.setText("preferAccuracy");
        preferAccuracyLabel.setToolTipText("performance preference: higher accuracy or faster computational speed");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 8, 3, 3);
        add(preferAccuracyLabel, gridBagConstraints);

        coontactSurfaceThicknessLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        coontactSurfaceThicknessLabel.setText("contactSurfaceThickness");
        coontactSurfaceThicknessLabel.setToolTipText("defines how far bodies may interpenetrate after a collision, allowing simulation of softer bodies that deform");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 8, 3, 3);
        add(coontactSurfaceThicknessLabel, gridBagConstraints);

        contactSurfaceThicknessTF.setColumns(4);
        contactSurfaceThicknessTF.setToolTipText("defines how far bodies may interpenetrate after a collision, allowing simulation of softer bodies that deform");
        contactSurfaceThicknessTF.setMinimumSize(new java.awt.Dimension(40, 20));
        contactSurfaceThicknessTF.setPreferredSize(new java.awt.Dimension(40, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(contactSurfaceThicknessTF, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

private void errorCorrectionTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_errorCorrectionTFActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_errorCorrectionTFActionPerformed

private void disableTimeTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disableTimeTFActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_disableTimeTFActionPerformed

private void disableAngularSpeedTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disableAngularSpeedTFActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_disableAngularSpeedTFActionPerformed
  
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox autoDisableCB;
    private javax.swing.JLabel autoDisableLabel;
    private javax.swing.JLabel constantForceMixLabel;
    private javax.swing.JTextField constantForceMixTF;
    private javax.swing.JTextField contactSurfaceThicknessTF;
    private javax.swing.JLabel coontactSurfaceThicknessLabel;
    private org.web3d.x3d.palette.items.DEFUSEpanel dEFUSEpanel1;
    private javax.swing.JLabel disableAngularSpeedLabel;
    private javax.swing.JTextField disableAngularSpeedTF;
    private javax.swing.JLabel disableLinearSpeedLabel;
    private javax.swing.JTextField disableLinearSpeedTF;
    private javax.swing.JLabel disableTimeLabel;
    private javax.swing.JTextField disableTimeTF;
    private javax.swing.JCheckBox enabledCB;
    private javax.swing.JLabel enabledLabel;
    private javax.swing.JLabel errorCorrectionLabel;
    private javax.swing.JTextField errorCorrectionTF;
    private javax.swing.JTextField gravity0TF;
    private javax.swing.JTextField gravity1TF;
    private javax.swing.JTextField gravity2TF;
    private javax.swing.JLabel gravityLabel;
    private javax.swing.JLabel iterationsLabel;
    private javax.swing.JTextField iterationsTF;
    private javax.swing.JLabel maxCorrectionSpeedLabel;
    private javax.swing.JTextField maxCorrectionSpeedTF;
    private javax.swing.JCheckBox preferAccuracyCB;
    private javax.swing.JLabel preferAccuracyLabel;
    // End of variables declaration//GEN-END:variables

  public String getNameKey()
  {
    return "NAME_X3D_RIGIDBODYCOLLECTION";
  }

  public void unloadInput()
  {
    unLoadDEFUSE();
    
    rigidBodyCollection.setAutoDisable(autoDisableCB.isSelected());
    rigidBodyCollection.setEnabled(enabledCB.isSelected());
    rigidBodyCollection.setPreferAccuracy(preferAccuracyCB.isSelected());
    
    rigidBodyCollection.setConstantForceMix(constantForceMixTF.getText().trim());
    rigidBodyCollection.setContactSurfaceThickness(contactSurfaceThicknessTF.getText().trim());
    rigidBodyCollection.setDisableAngularSpeed(disableAngularSpeedTF.getText().trim());
    rigidBodyCollection.setDisableLinearSpeed(disableLinearSpeedTF.getText().trim());
    rigidBodyCollection.setDisableTime(disableTimeTF.getText().trim());
    rigidBodyCollection.setErrorCorrection(errorCorrectionTF.getText().trim());
    
    rigidBodyCollection.setGravity0(gravity0TF.getText().trim());
    rigidBodyCollection.setGravity1(gravity1TF.getText().trim());
    rigidBodyCollection.setGravity2(gravity2TF.getText().trim());
    
    rigidBodyCollection.setIterations(iterationsTF.getText().trim());    
    rigidBodyCollection.setMaxCorrectionSpeed(maxCorrectionSpeedTF.getText().trim());
  }   
}
