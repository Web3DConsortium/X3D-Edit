/*
Copyright (c) 1995-20172 held by the author(s).  All rights reserved.
 
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
 
 * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer
      in the documentation and/or other materials provided with the
      distribution.
 * Neither the names of the Naval Postgraduate School (NPS)
      Modeling Virtual Environments and Simulation (MOVES) Institute
      (http://www.nps.edu and https://MovesInstitute.nps.edu)
      nor the names of its contributors may be used to endorse or
      promote products derived from this software without specific
      prior written permission.
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
 */

package org.web3d.x3d.palette.items;

import java.awt.Dialog;
import javax.swing.text.JTextComponent;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.HelpCtx;
import static org.web3d.x3d.types.X3DPrimitiveTypes.*;

/**
 * ORIENTATIONCHASERCustomizer.java
 * Created on 6 February 2010
 *
 * MOVES Institute
 * Naval Postgraduate School, Monterey, CA, USA
 * www.nps.edu
 *
 * @author Mike Bailey, Don Brutzman
 * @version $Id$
 */
public class ORIENTATIONCHASERCustomizer extends BaseCustomizer
{
  private ORIENTATIONCHASER orientationChaser;
  private JTextComponent target;

  public ORIENTATIONCHASERCustomizer(ORIENTATIONCHASER orientationChaser, JTextComponent target)
  {
    super(orientationChaser);
    this.orientationChaser = orientationChaser;
    this.target = target;
                   
    HelpCtx.setHelpIDString(this, "ORIENTATIONCHASER_ELEM_HELPID");
    
    initComponents();

                durationTF.setText (orientationChaser.getDuration());

    initialValueXaxisTF.setText (orientationChaser.getInitialValue0().toString ());
    initialValueYaxisTF.setText (orientationChaser.getInitialValue1().toString ());
    initialValueZaxisTF.setText (orientationChaser.getInitialValue2().toString ());
    initialValueAngleTF.setText (orientationChaser.getInitialValue3().toString ());

    initialDestinationXaxisTF.setText (orientationChaser.getInitialDestination0().toString ());
    initialDestinationYaxisTF.setText (orientationChaser.getInitialDestination1().toString ());
    initialDestinationZaxisTF.setText (orientationChaser.getInitialDestination2().toString ());
    initialDestinationAngleTF.setText (orientationChaser.getInitialDestination3().toString ());
    
    checkAngles (false);
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        org.web3d.x3d.palette.items.DEFUSEpanel dEFUSEpanel1 = getDEFUSEpanel();
        durationLabel = new javax.swing.JLabel();
        durationTF = new javax.swing.JTextField();
        xLabel = new javax.swing.JLabel();
        yLabel = new javax.swing.JLabel();
        zLabel = new javax.swing.JLabel();
        aLabel = new javax.swing.JLabel();
        initialValueLabel = new javax.swing.JLabel();
        initialDestinationLabel = new javax.swing.JLabel();
        initialValueXaxisTF = new javax.swing.JTextField();
        initialValueYaxisTF = new javax.swing.JTextField();
        initialValueZaxisTF = new javax.swing.JTextField();
        initialValueAngleTF = new javax.swing.JTextField();
        initialValueCalculatorlButton = new javax.swing.JButton();
        normalizeInitialValueButton = new javax.swing.JButton();
        initialDestinationXaxisTF = new javax.swing.JTextField();
        initialDestinationYaxisTF = new javax.swing.JTextField();
        initialDestinationZaxisTF = new javax.swing.JTextField();
        initialDestinationAngleTF = new javax.swing.JTextField();
        normalizeDestinationValueButton = new javax.swing.JButton();
        initialDestinationCalculatorlButton = new javax.swing.JButton();
        followerFigureLabel = new javax.swing.JLabel();

        setToolTipText("orientation x axis");
        setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.weightx = 6.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(dEFUSEpanel1, gridBagConstraints);

        durationLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        durationLabel.setText("duration");
        durationLabel.setToolTipText("time interval for filter response in seconds");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 20, 3, 3);
        add(durationLabel, gridBagConstraints);

        durationTF.setToolTipText("time interval for filter response in seconds");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(durationTF, gridBagConstraints);

        xLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        xLabel.setText("x");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        add(xLabel, gridBagConstraints);

        yLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        yLabel.setText("y");
        yLabel.setToolTipText("orientation y axis");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        add(yLabel, gridBagConstraints);

        zLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        zLabel.setText("z");
        zLabel.setToolTipText("orientation z axis");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        add(zLabel, gridBagConstraints);

        aLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        aLabel.setText("angle");
        aLabel.setToolTipText("orientation angle");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        add(aLabel, gridBagConstraints);

        initialValueLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        initialValueLabel.setText("initialValue");
        initialValueLabel.setToolTipText("initial starting value");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 20, 3, 3);
        add(initialValueLabel, gridBagConstraints);

        initialDestinationLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        initialDestinationLabel.setText("initialDestination");
        initialDestinationLabel.setToolTipText("initial goal value");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 20, 3, 3);
        add(initialDestinationLabel, gridBagConstraints);

        initialValueXaxisTF.setToolTipText("initial starting value");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(initialValueXaxisTF, gridBagConstraints);

        initialValueYaxisTF.setToolTipText("initial starting value");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(initialValueYaxisTF, gridBagConstraints);

        initialValueZaxisTF.setToolTipText("initial starting value");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(initialValueZaxisTF, gridBagConstraints);

        initialValueAngleTF.setToolTipText("initial starting value");
        initialValueAngleTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initialValueAngleTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(initialValueAngleTF, gridBagConstraints);

        initialValueCalculatorlButton.setText("calculator");
        initialValueCalculatorlButton.setToolTipText("launch geoSystem panel");
        initialValueCalculatorlButton.setMaximumSize(new java.awt.Dimension(80, 22));
        initialValueCalculatorlButton.setMinimumSize(new java.awt.Dimension(80, 22));
        initialValueCalculatorlButton.setPreferredSize(new java.awt.Dimension(6, 22));
        initialValueCalculatorlButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initialValueCalculatorlButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(initialValueCalculatorlButton, gridBagConstraints);

        normalizeInitialValueButton.setText("normalize");
        normalizeInitialValueButton.setToolTipText("rescale axis values as normalized vector (unit length, ranges 0..1), reset angle [0..2pi)");
        normalizeInitialValueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                normalizeInitialValueButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(normalizeInitialValueButton, gridBagConstraints);

        initialDestinationXaxisTF.setToolTipText("initial goal value");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(initialDestinationXaxisTF, gridBagConstraints);

        initialDestinationYaxisTF.setToolTipText("initial goal value");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(initialDestinationYaxisTF, gridBagConstraints);

        initialDestinationZaxisTF.setToolTipText("initial goal value");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(initialDestinationZaxisTF, gridBagConstraints);

        initialDestinationAngleTF.setToolTipText("initial goal value");
        initialDestinationAngleTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initialDestinationAngleTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(initialDestinationAngleTF, gridBagConstraints);

        normalizeDestinationValueButton.setText("normalize");
        normalizeDestinationValueButton.setToolTipText("rescale axis values as normalized vector (unit length, ranges 0..1), reset angle [0..2pi)");
        normalizeDestinationValueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                normalizeDestinationValueButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(normalizeDestinationValueButton, gridBagConstraints);

        initialDestinationCalculatorlButton.setText("calculator");
        initialDestinationCalculatorlButton.setToolTipText("launch geoSystem panel");
        initialDestinationCalculatorlButton.setMaximumSize(new java.awt.Dimension(80, 22));
        initialDestinationCalculatorlButton.setMinimumSize(new java.awt.Dimension(80, 22));
        initialDestinationCalculatorlButton.setPreferredSize(new java.awt.Dimension(6, 22));
        initialDestinationCalculatorlButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initialDestinationCalculatorlButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(initialDestinationCalculatorlButton, gridBagConstraints);

        followerFigureLabel.setBackground(new java.awt.Color(255, 255, 255));
        followerFigureLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        followerFigureLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/web3d/x3d/palette/items/resources/follower_1.png"))); // NOI18N
        followerFigureLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 3, 3, 3));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(followerFigureLabel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void normalizeInitialValueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_normalizeInitialValueButtonActionPerformed
        checkAngles(true);
        double normalizationFactor, x, y, z, angle;

            x = new SFDouble(initialValueXaxisTF.getText()).getValue();
            y = new SFDouble(initialValueYaxisTF.getText()).getValue();
            z = new SFDouble(initialValueZaxisTF.getText()).getValue();
        angle = new SFDouble(initialValueAngleTF.getText()).getValue();
        normalizationFactor = Math.sqrt(x * x + y * y + z * z);
        if (normalizationFactor == 0.0)
        {
            NotifyDescriptor descriptor = new NotifyDescriptor.Message(
                    "Found zero-magnitude axis for rotation, reset to 0 1 0", NotifyDescriptor.WARNING_MESSAGE);
            DialogDisplayer.getDefault().notify(descriptor);
            initialValueXaxisTF.setText("0");
            initialValueYaxisTF.setText("1");
            initialValueZaxisTF.setText("0");
        }
        else
        {
            initialValueXaxisTF.setText(fiveDigitFormat.format(x / normalizationFactor));
            initialValueYaxisTF.setText(fiveDigitFormat.format(y / normalizationFactor));
            initialValueZaxisTF.setText(fiveDigitFormat.format(z / normalizationFactor));
        }
        if (angle == -0.0)
        {
            angle = 0.0;
        }
        while (angle < 0.0)
        {
            angle += 2.0 * Math.PI;
        }
        while (angle > 2.0 * Math.PI)
        {
            angle -= 2.0 * Math.PI;
        }
        initialValueAngleTF.setText(radiansFormat.format(angle));
        initialValueAngleTF.setToolTipText(radiansFormat.format(angle) + " radians = " + singleDigitFormat.format(angle * 180.0 / Math.PI) + " degrees");
    }//GEN-LAST:event_normalizeInitialValueButtonActionPerformed

    private void normalizeDestinationValueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_normalizeDestinationValueButtonActionPerformed
        checkAngles(true);
        double normalizationFactor, x, y, z, angle;

            x = new SFDouble(initialDestinationXaxisTF.getText()).getValue();
            y = new SFDouble(initialDestinationYaxisTF.getText()).getValue();
            z = new SFDouble(initialDestinationZaxisTF.getText()).getValue();
            angle = new SFDouble(initialDestinationAngleTF.getText()).getValue();
        normalizationFactor = Math.sqrt(x * x + y * y + z * z);
        if (normalizationFactor == 0.0)
        {
            NotifyDescriptor descriptor = new NotifyDescriptor.Message(
                    "Found zero-magnitude axis for rotation, reset to 0 1 0", NotifyDescriptor.WARNING_MESSAGE);
            DialogDisplayer.getDefault().notify(descriptor);
            initialDestinationXaxisTF.setText("0");
            initialDestinationYaxisTF.setText("1");
            initialDestinationZaxisTF.setText("0");
        }
        else
        {
            initialDestinationXaxisTF.setText(fiveDigitFormat.format(x / normalizationFactor));
            initialDestinationYaxisTF.setText(fiveDigitFormat.format(y / normalizationFactor));
            initialDestinationZaxisTF.setText(fiveDigitFormat.format(z / normalizationFactor));
        }
        if (angle == -0.0)
        {
            angle = 0.0;
        }
        while (angle < 0.0)
        {
            angle += 2.0 * Math.PI;
        }
        while (angle > 2.0 * Math.PI)
        {
            angle -= 2.0 * Math.PI;
        }
        initialDestinationAngleTF.setText(radiansFormat.format(angle));
        initialDestinationAngleTF.setToolTipText(radiansFormat.format(angle) + " radians = " + singleDigitFormat.format(angle * 180.0 / Math.PI) + " degrees");
    }//GEN-LAST:event_normalizeDestinationValueButtonActionPerformed

    private void initialValueAngleTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initialValueAngleTFActionPerformed
        checkAngles (false);
    }//GEN-LAST:event_initialValueAngleTFActionPerformed

    private void initialDestinationAngleTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initialDestinationAngleTFActionPerformed
        checkAngles (false);
    }//GEN-LAST:event_initialDestinationAngleTFActionPerformed

    private void initialValueCalculatorlButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initialValueCalculatorlButtonActionPerformed
        RotationCalculatorPanel initialValueCalculatorPanel = new RotationCalculatorPanel(orientationChaser, "initialValue");
        initialValueCalculatorPanel.setRotationValue (
            initialValueXaxisTF.getText(),
            initialValueYaxisTF.getText(),
            initialValueZaxisTF.getText(),
            initialValueAngleTF.getText());
        DialogDescriptor dd = new DialogDescriptor(initialValueCalculatorPanel, "Rotation Calculator for OrientationChaser initialValue");
        Dialog dialog = DialogDisplayer.getDefault().createDialog(dd);
        dialog.setVisible(true);
        if (dd.getValue() != DialogDescriptor.CANCEL_OPTION)
        {
            // save values
            if (!initialValueCalculatorPanel.getRotationResult().isEmpty())
            {
                initialValueXaxisTF.setText(initialValueCalculatorPanel.getRotationResultX());
                initialValueYaxisTF.setText(initialValueCalculatorPanel.getRotationResultY());
                initialValueZaxisTF.setText(initialValueCalculatorPanel.getRotationResultZ());
                initialValueAngleTF.setText(initialValueCalculatorPanel.getRotationResultAngle());
                initialValueAngleTF.setToolTipText(initialValueCalculatorPanel.getRotationResultAngle() + " radians = " +
                    singleDigitFormat.format(Float.parseFloat(initialValueCalculatorPanel.getRotationResultAngle()) * 180.0 / Math.PI) + " degrees");
            }
        }
    }//GEN-LAST:event_initialValueCalculatorlButtonActionPerformed

    private void initialDestinationCalculatorlButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initialDestinationCalculatorlButtonActionPerformed
        RotationCalculatorPanel initialDestinationCalculatorPanel = new RotationCalculatorPanel(orientationChaser, "initialDestination");
        initialDestinationCalculatorPanel.setRotationValue (
            initialDestinationXaxisTF.getText(),
            initialDestinationYaxisTF.getText(),
            initialDestinationZaxisTF.getText(),
            initialDestinationAngleTF.getText());
        DialogDescriptor dd = new DialogDescriptor(initialDestinationCalculatorPanel, "Rotation Calculator for OrientationChaser initialDestination");
        Dialog dialog = DialogDisplayer.getDefault().createDialog(dd);
        dialog.setVisible(true);
        if (dd.getValue() != DialogDescriptor.CANCEL_OPTION)
        {
            // save values
            if (!initialDestinationCalculatorPanel.getRotationResult().isEmpty())
            {
                initialDestinationXaxisTF.setText(initialDestinationCalculatorPanel.getRotationResultX());
                initialDestinationYaxisTF.setText(initialDestinationCalculatorPanel.getRotationResultY());
                initialDestinationZaxisTF.setText(initialDestinationCalculatorPanel.getRotationResultZ());
                initialDestinationAngleTF.setText(initialDestinationCalculatorPanel.getRotationResultAngle());
                initialDestinationAngleTF.setToolTipText(initialDestinationCalculatorPanel.getRotationResultAngle() + " radians = " +
                    singleDigitFormat.format(Float.parseFloat(initialDestinationCalculatorPanel.getRotationResultAngle()) * 180.0 / Math.PI) + " degrees");
            }
        }
    }//GEN-LAST:event_initialDestinationCalculatorlButtonActionPerformed
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel aLabel;
    private javax.swing.JLabel durationLabel;
    private javax.swing.JTextField durationTF;
    private javax.swing.JLabel followerFigureLabel;
    private javax.swing.JTextField initialDestinationAngleTF;
    private javax.swing.JButton initialDestinationCalculatorlButton;
    private javax.swing.JLabel initialDestinationLabel;
    private javax.swing.JTextField initialDestinationXaxisTF;
    private javax.swing.JTextField initialDestinationYaxisTF;
    private javax.swing.JTextField initialDestinationZaxisTF;
    private javax.swing.JTextField initialValueAngleTF;
    private javax.swing.JButton initialValueCalculatorlButton;
    private javax.swing.JLabel initialValueLabel;
    private javax.swing.JTextField initialValueXaxisTF;
    private javax.swing.JTextField initialValueYaxisTF;
    private javax.swing.JTextField initialValueZaxisTF;
    private javax.swing.JButton normalizeDestinationValueButton;
    private javax.swing.JButton normalizeInitialValueButton;
    private javax.swing.JLabel xLabel;
    private javax.swing.JLabel yLabel;
    private javax.swing.JLabel zLabel;
    // End of variables declaration//GEN-END:variables

  @Override
  public String getNameKey()
  {
    return "NAME_X3D_ORIENTATIONCHASER";
  }

  private void checkAngles(boolean precedesNormalization)
  {
      // indicate degree values in tooltips
      // usability note:  can enter degree values (-6..+6) as (354..366) to provoke this conversion check
      double angle = new SFDouble(initialValueAngleTF.getText()).getValue();
      initialValueAngleTF.setToolTipText(radiansFormat.format(angle) + " radians = " + singleDigitFormat.format(angle * 180.0 / Math.PI) + " degrees");
      if (Math.abs(angle) > 2.0 * Math.PI)
      {
            String message;
            message = "<html><center>Large value provided for <b>rotation</b> angle, which is a radians value.<br/><br/>Convert <b>" + angle + " degrees</b> to <b>" +
                    radiansFormat.format((angle % 360.0) * Math.PI / 180.0) + " radians</b>";
            if (precedesNormalization)
                 message += " before normalization?";
            else message += "?";
          NotifyDescriptor descriptor = new NotifyDescriptor.Confirmation(
                  message, "X3D angles are in radians", NotifyDescriptor.YES_NO_OPTION);
          if (DialogDisplayer.getDefault().notify(descriptor) == NotifyDescriptor.YES_OPTION)
          {
              angle = (angle % 360.0) * Math.PI / 180.0;
              initialValueAngleTF.setText(radiansFormat.format(angle));
              initialValueAngleTF.setToolTipText(radiansFormat.format(angle) + " radians = " + singleDigitFormat.format(angle * 180.0 / Math.PI) + " degrees");
          }
      }
      angle = new SFDouble(initialDestinationAngleTF.getText()).getValue();
      initialDestinationAngleTF.setToolTipText(radiansFormat.format(angle) + " radians = " + singleDigitFormat.format(angle * 180.0 / Math.PI) + " degrees");
      if (Math.abs(angle) > 2.0 * Math.PI)
      {
            String message;
            message = "<html><center>Large value provided for <b>scaleOrientation</b> angle, which is a radians value.<br/><br/>Convert <b>" + angle + " degrees</b> to <b>" +
                    radiansFormat.format((angle % 360.0) * Math.PI / 180.0) + " radians</b>";
            if (precedesNormalization)
                 message += " before normalization?";
            else message += "?";
          NotifyDescriptor descriptor = new NotifyDescriptor.Confirmation(
                  message, "X3D angles are in radians", NotifyDescriptor.YES_NO_OPTION);
          if (DialogDisplayer.getDefault().notify(descriptor) == NotifyDescriptor.YES_OPTION)
          {
              angle = (angle % 360.0) * Math.PI / 180.0;
              initialDestinationAngleTF.setText(radiansFormat.format(angle));
              initialDestinationAngleTF.setToolTipText(radiansFormat.format(angle) + " radians = " + singleDigitFormat.format(angle * 180.0 / Math.PI) + " degrees");
          }
      }
  }

  @Override
  public void unloadInput() throws IllegalArgumentException
  {
    checkAngles (false);
    
    unLoadDEFUSE();

    orientationChaser.setDuration            (new SFFloat(         durationTF.getText().trim(), 0.0f, null)); // no upper limit
    orientationChaser.setInitialValue0       (new SFFloat(initialValueXaxisTF.getText().trim(), 0.0f, 1.0f));
    orientationChaser.setInitialValue1       (new SFFloat(initialValueYaxisTF.getText().trim(), 0.0f, 1.0f));
    orientationChaser.setInitialValue2       (new SFFloat(initialValueZaxisTF.getText().trim(), 0.0f, 1.0f));
    orientationChaser.setInitialValue3       (new SFFloat(initialValueAngleTF.getText().trim(), 0.0f, 1.0f));
    orientationChaser.setInitialDestination0 (new SFFloat(initialDestinationXaxisTF.getText().trim(), 0.0f, 1.0f));
    orientationChaser.setInitialDestination1 (new SFFloat(initialDestinationYaxisTF.getText().trim(), 0.0f, 1.0f));
    orientationChaser.setInitialDestination2 (new SFFloat(initialDestinationZaxisTF.getText().trim(), 0.0f, 1.0f));
    orientationChaser.setInitialDestination3 (new SFFloat(initialDestinationAngleTF.getText().trim(), -6.28f, 6.28f));
  }  
}
