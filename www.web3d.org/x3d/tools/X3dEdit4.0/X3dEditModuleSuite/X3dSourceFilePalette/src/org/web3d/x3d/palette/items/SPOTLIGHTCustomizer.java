/*
Copyright (c) 1995-2021 held by the author(s) .  All rights reserved.
 
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
 
 * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer
      in the documentation and/or other materials provided with the
      distribution.
 * Neither the names of the Naval Postgraduate School (NPS)
      Modeling Virtual Environments and Simulation (MOVES) Institute
      (http://www.nps.edu and https://MovesInstitute.nps.edu)
      nor the names of its contributors may be used to endorse or
      promote products derived from this software without specific
      prior written permission.
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
 */

package org.web3d.x3d.palette.items;

import java.awt.Color;
import javax.swing.text.JTextComponent;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.HelpCtx;
import static org.web3d.x3d.types.X3DPrimitiveTypes.*;

/**
 * SPOTLIGHTCustomizer.java
 * Created on July 11, 2007, 5:13 PM
 *
 * MOVES Institute
 * Naval Postgraduate School, Monterey, CA, USA
 * www.nps.edu
 *
 * @author Mike Bailey
 * @version $Id$
 */
public class SPOTLIGHTCustomizer extends BaseCustomizer
{
  private SPOTLIGHT spotLight;
  private JTextComponent target;
  
  /** Creates new form SPOTLIGHTCustomizer */
  public SPOTLIGHTCustomizer(SPOTLIGHT spotLight, JTextComponent target)
  {
    super(spotLight);
    this.spotLight = spotLight;
    this.target = target;
                           
    HelpCtx.setHelpIDString(this, "SPOTLIGHT_ELEM_HELPID");

    spotLight.setVisualizationSelectionAvailable(true); // must precede initComponents() interface initialization
    spotLight.setVisualizationTooltip("Add wireframe Cone for inner beamWidth and transparent Cone for outer cutOffAngle");
    
    initComponents();
    
    ambientIntensTF.setText(spotLight.getAmbientIntensity());
    
    attenuation0TF.setText(spotLight.getAttenuationX());
    attenuation1TF.setText(spotLight.getAttenuationY());
    attenuation2TF.setText(spotLight.getAttenuationZ());
    
    beamWidthTF.setText(spotLight.getBeamWidth());
    
    color0TF.setText(spotLight.getColorRed());
    color1TF.setText(spotLight.getColorGreen());
    color2TF.setText(spotLight.getColorBlue());

    bindColorChooserToBetterJTextFields(color0TF,color1TF,color2TF,colorChooser1);
   
    cutOffAngleTF.setText(spotLight.getCutOffAngle());
    
    directionXTF.setText(spotLight.getDirectionX());
    directionYTF.setText(spotLight.getDirectionY());
    directionZTF.setText(spotLight.getDirectionZ());

    if (directionXTF.getText().equals("0") && directionYTF.getText().equals("0") && directionZTF.getText().equals("0")) normalizeButton.doClick();
    
    globalCB.setSelected(spotLight.isGlobal());
    intensityTF.setText(spotLight.getIntensity());
    location0TF.setText(spotLight.getLocationX());
    location1TF.setText(spotLight.getLocationY());
    location2TF.setText(spotLight.getLocationZ());
    
    onCB.setSelected(spotLight.isOn());
    radiusTF.setText(spotLight.getRadius());
    checkRadius ();

    checkAngles (false);
    return;
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        dEFUSEpanel1 = getDEFUSEpanel();
        ambientIntensityLabel = new javax.swing.JLabel();
        ambientIntensTF = new javax.swing.JTextField();
        attenuationLabel = new javax.swing.JLabel();
        attenuation0TF = new javax.swing.JTextField();
        attenuation1TF = new javax.swing.JTextField();
        attenuation2TF = new javax.swing.JTextField();
        beamWidthLabel = new javax.swing.JLabel();
        colorLabel = new javax.swing.JLabel();
        color0TF = new org.web3d.x3d.palette.BetterJTextField();
        color1TF = new org.web3d.x3d.palette.BetterJTextField();
        color2TF = new org.web3d.x3d.palette.BetterJTextField();
        colorChooser1 = new net.java.dev.colorchooser.ColorChooser();
        cutOffAngleLabel = new javax.swing.JLabel();
        directionLabel = new javax.swing.JLabel();
        directionXTF = new javax.swing.JTextField();
        directionYTF = new javax.swing.JTextField();
        directionZTF = new javax.swing.JTextField();
        intensityLabel = new javax.swing.JLabel();
        intensityTF = new javax.swing.JTextField();
        locationLabel = new javax.swing.JLabel();
        location0TF = new javax.swing.JTextField();
        location1TF = new javax.swing.JTextField();
        location2TF = new javax.swing.JTextField();
        globalLabel = new javax.swing.JLabel();
        globalCB = new javax.swing.JCheckBox();
        onLabel = new javax.swing.JLabel();
        onCB = new javax.swing.JCheckBox();
        radiusLabel = new javax.swing.JLabel();
        radiusTF = new javax.swing.JTextField();
        normalizeButton = new javax.swing.JButton();
        cutOffAngleTF = new javax.swing.JTextField();
        beamWidthTF = new javax.swing.JTextField();

        setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(dEFUSEpanel1, gridBagConstraints);

        ambientIntensityLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        ambientIntensityLabel.setText("ambientIntensity");
        ambientIntensityLabel.setToolTipText("[0,1] brightness of ambient (nondirectional background) light");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(ambientIntensityLabel, gridBagConstraints);

        ambientIntensTF.setToolTipText("[0,1] brightness of ambient (nondirectional background) light");
        ambientIntensTF.setMaximumSize(null);
        ambientIntensTF.setMinimumSize(new java.awt.Dimension(60, 22));
        ambientIntensTF.setPreferredSize(new java.awt.Dimension(60, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(ambientIntensTF, gridBagConstraints);

        attenuationLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        attenuationLabel.setText("attenuation");
        attenuationLabel.setToolTipText("constant, linear-distance and squared-distance dropoff factors");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(attenuationLabel, gridBagConstraints);

        attenuation0TF.setToolTipText("constant dropoff factor");
        attenuation0TF.setMaximumSize(null);
        attenuation0TF.setMinimumSize(new java.awt.Dimension(60, 22));
        attenuation0TF.setPreferredSize(new java.awt.Dimension(60, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(attenuation0TF, gridBagConstraints);

        attenuation1TF.setToolTipText("linear-distance dropoff factor");
        attenuation1TF.setMaximumSize(null);
        attenuation1TF.setMinimumSize(new java.awt.Dimension(60, 22));
        attenuation1TF.setPreferredSize(new java.awt.Dimension(60, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(attenuation1TF, gridBagConstraints);

        attenuation2TF.setToolTipText("squared-distance dropoff factor");
        attenuation2TF.setMaximumSize(null);
        attenuation2TF.setMinimumSize(new java.awt.Dimension(60, 22));
        attenuation2TF.setPreferredSize(new java.awt.Dimension(60, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(attenuation2TF, gridBagConstraints);

        beamWidthLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        beamWidthLabel.setText("beamWidth");
        beamWidthLabel.setToolTipText("inner angle from center line (in radians) where light source has uniform full intensity");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(beamWidthLabel, gridBagConstraints);

        colorLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        colorLabel.setText("color");
        colorLabel.setToolTipText("color of light, applied to colors of objects");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(colorLabel, gridBagConstraints);

        color0TF.setToolTipText("color of light, applied to colors of objects");
        color0TF.setMaximumSize(null);
        color0TF.setMinimumSize(new java.awt.Dimension(60, 22));
        color0TF.setPreferredSize(new java.awt.Dimension(60, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(color0TF, gridBagConstraints);

        color1TF.setToolTipText("color of light, applied to colors of objects");
        color1TF.setMaximumSize(null);
        color1TF.setMinimumSize(new java.awt.Dimension(60, 22));
        color1TF.setPreferredSize(new java.awt.Dimension(60, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(color1TF, gridBagConstraints);

        color2TF.setToolTipText("color of light, applied to colors of objects");
        color2TF.setMaximumSize(null);
        color2TF.setMinimumSize(new java.awt.Dimension(60, 22));
        color2TF.setPreferredSize(new java.awt.Dimension(60, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(color2TF, gridBagConstraints);

        colorChooser1.setMaximumSize(new java.awt.Dimension(22, 22));
        colorChooser1.setMinimumSize(new java.awt.Dimension(22, 22));
        colorChooser1.setPreferredSize(new java.awt.Dimension(22, 22));
        colorChooser1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorChooser1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout colorChooser1Layout = new javax.swing.GroupLayout(colorChooser1);
        colorChooser1.setLayout(colorChooser1Layout);
        colorChooser1Layout.setHorizontalGroup(
            colorChooser1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );
        colorChooser1Layout.setVerticalGroup(
            colorChooser1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(colorChooser1, gridBagConstraints);

        cutOffAngleLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        cutOffAngleLabel.setText("cutOffAngle");
        cutOffAngleLabel.setToolTipText("outer angle from center line (in radians) where light source intensity becomes zero");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(cutOffAngleLabel, gridBagConstraints);

        directionLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        directionLabel.setText("direction");
        directionLabel.setToolTipText("direction vector of light axis relative to local coordinate system");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(directionLabel, gridBagConstraints);

        directionXTF.setToolTipText("x direction vector of light axis relative to local coordinate system");
        directionXTF.setMaximumSize(null);
        directionXTF.setMinimumSize(new java.awt.Dimension(60, 22));
        directionXTF.setPreferredSize(new java.awt.Dimension(60, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(directionXTF, gridBagConstraints);

        directionYTF.setToolTipText("y direction vector of light axis relative to local coordinate system");
        directionYTF.setMaximumSize(null);
        directionYTF.setMinimumSize(new java.awt.Dimension(60, 22));
        directionYTF.setPreferredSize(new java.awt.Dimension(60, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(directionYTF, gridBagConstraints);

        directionZTF.setToolTipText("z direction vector of light axis relative to local coordinate system");
        directionZTF.setMaximumSize(null);
        directionZTF.setMinimumSize(new java.awt.Dimension(60, 22));
        directionZTF.setPreferredSize(new java.awt.Dimension(60, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(directionZTF, gridBagConstraints);

        intensityLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        intensityLabel.setText("intensity");
        intensityLabel.setToolTipText("[0,1] brightness of direct light");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(intensityLabel, gridBagConstraints);

        intensityTF.setToolTipText("[0,1] brightness of direct light");
        intensityTF.setMaximumSize(null);
        intensityTF.setMinimumSize(new java.awt.Dimension(60, 22));
        intensityTF.setPreferredSize(new java.awt.Dimension(60, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(intensityTF, gridBagConstraints);

        locationLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        locationLabel.setText("location");
        locationLabel.setToolTipText("position of light relative to local coordinate system");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(locationLabel, gridBagConstraints);

        location0TF.setToolTipText("position of light relative to local coordinate system");
        location0TF.setMaximumSize(null);
        location0TF.setMinimumSize(new java.awt.Dimension(60, 22));
        location0TF.setPreferredSize(new java.awt.Dimension(60, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(location0TF, gridBagConstraints);

        location1TF.setToolTipText("position of light relative to local coordinate system");
        location1TF.setMaximumSize(null);
        location1TF.setMinimumSize(new java.awt.Dimension(60, 22));
        location1TF.setPreferredSize(new java.awt.Dimension(60, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(location1TF, gridBagConstraints);

        location2TF.setToolTipText("position of light relative to local coordinate system");
        location2TF.setMaximumSize(null);
        location2TF.setMinimumSize(new java.awt.Dimension(60, 22));
        location2TF.setPreferredSize(new java.awt.Dimension(60, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(location2TF, gridBagConstraints);

        globalLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        globalLabel.setText("global");
        globalLabel.setToolTipText("global lights illuminate all objects, scoped lights only affect local transformation hierarchy");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(globalLabel, gridBagConstraints);

        globalCB.setToolTipText("global lights illuminate all objects, scoped lights only affect local transformation hierarchy");
        globalCB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        globalCB.setMinimumSize(new java.awt.Dimension(60, 22));
        globalCB.setPreferredSize(new java.awt.Dimension(60, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(globalCB, gridBagConstraints);

        onLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        onLabel.setText("on");
        onLabel.setToolTipText("enables/disables this light");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(onLabel, gridBagConstraints);

        onCB.setToolTipText("enables/disables this light");
        onCB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        onCB.setMinimumSize(new java.awt.Dimension(60, 22));
        onCB.setPreferredSize(new java.awt.Dimension(60, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(onCB, gridBagConstraints);

        radiusLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        radiusLabel.setText("radius");
        radiusLabel.setToolTipText("maximum effective distance of light relative to local light position");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(radiusLabel, gridBagConstraints);

        radiusTF.setToolTipText("maximum effective distance of light relative to local light position");
        radiusTF.setMaximumSize(null);
        radiusTF.setMinimumSize(new java.awt.Dimension(60, 22));
        radiusTF.setPreferredSize(new java.awt.Dimension(60, 22));
        radiusTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radiusTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3333;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(radiusTF, gridBagConstraints);

        normalizeButton.setText("normalize");
        normalizeButton.setToolTipText("normalize direction, beamWidth, cutOffAngle");
        normalizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                normalizeButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(normalizeButton, gridBagConstraints);

        cutOffAngleTF.setToolTipText("outer solid angle (in radians) where light source intensity becomes zero");
        cutOffAngleTF.setMaximumSize(null);
        cutOffAngleTF.setMinimumSize(new java.awt.Dimension(60, 22));
        cutOffAngleTF.setPreferredSize(new java.awt.Dimension(60, 22));
        cutOffAngleTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutOffAngleTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(cutOffAngleTF, gridBagConstraints);

        beamWidthTF.setToolTipText("inner solid angle (in radians) where light source has uniform full intensity");
        beamWidthTF.setMaximumSize(null);
        beamWidthTF.setMinimumSize(new java.awt.Dimension(60, 22));
        beamWidthTF.setPreferredSize(new java.awt.Dimension(60, 22));
        beamWidthTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                beamWidthTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(beamWidthTF, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

  private void colorChooser1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorChooser1ActionPerformed
    Color c = colorChooser1.getColor();
    color0TF.setText(formatDecimal((float)c.getRed()/255));
    color1TF.setText(formatDecimal((float)c.getGreen()/255));
    color2TF.setText(formatDecimal((float)c.getBlue()/255));
  }//GEN-LAST:event_colorChooser1ActionPerformed

  private void normalizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_normalizeButtonActionPerformed
        checkAngles(true);
        double normalizationFactor, x, y, z, angle;

        x     = new SFDouble(directionXTF.getText()).getValue();
        y     = new SFDouble(directionYTF.getText()).getValue();
        z     = new SFDouble(directionZTF.getText()).getValue();

        normalizationFactor = Math.sqrt(x * x + y * y + z * z);
        if (normalizationFactor == 0.0)
        {
            NotifyDescriptor descriptor = new NotifyDescriptor.Message(
                    "<html>Found zero-magnitude axis for <b>direction</b> vector, reset to 0 0 -1</html>", NotifyDescriptor.WARNING_MESSAGE);
            DialogDisplayer.getDefault().notify(descriptor);
            directionXTF.setText("0");
            directionYTF.setText("0");
            directionZTF.setText("-1");
        }
        else
        {
            directionXTF.setText(fiveDigitFormat.format(x / normalizationFactor));
            directionYTF.setText(fiveDigitFormat.format(y / normalizationFactor));
            directionZTF.setText(fiveDigitFormat.format(z / normalizationFactor));
        }

        angle = new SFDouble(beamWidthTF.getText()).getValue();
        if (angle == -0.0)
        {
            angle = 0.0;
        }
        while (angle <= -Math.PI)
        {
            angle += 2.0 * Math.PI;
        }
        while (angle > Math.PI)
        {
            angle -= 2.0 * Math.PI;
        }
        beamWidthTF.setText(radiansFormat.format(angle));
        beamWidthTF.setToolTipText(radiansFormat.format(angle) + " radians = " + singleDigitFormat.format(angle * 180.0 / Math.PI) + " degrees");

        angle = new SFDouble(cutOffAngleTF.getText()).getValue();
        if (angle == -0.0)
        {
            angle = 0.0;
        }
        while (angle <= -Math.PI)
        {
            angle += 2.0 * Math.PI;
        }
        while (angle > Math.PI)
        {
            angle -= 2.0 * Math.PI;
        }
        cutOffAngleTF.setText(radiansFormat.format(angle));
        cutOffAngleTF.setToolTipText(radiansFormat.format(angle) + " radians = " + singleDigitFormat.format(angle * 180.0 / Math.PI) + " degrees");

        // idiosyncracy/roundoff cleanup
        if (    directionXTF.getText().equals("-0") ||     directionXTF.getText().equals("-0.0"))     directionXTF.setText("0");
        if (    directionYTF.getText().equals("-0") ||     directionYTF.getText().equals("-0.0"))     directionYTF.setText("0");
        if (    directionZTF.getText().equals("-0") ||     directionZTF.getText().equals("-0.0"))     directionZTF.setText("0");
        if (     beamWidthTF.getText().equals("-0") ||      beamWidthTF.getText().equals("-0.0"))      beamWidthTF.setText("0.0");
        if (   cutOffAngleTF.getText().equals("-0") ||    cutOffAngleTF.getText().equals("-0.0"))    cutOffAngleTF.setText("0.0");

  }//GEN-LAST:event_normalizeButtonActionPerformed

  private void cutOffAngleTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutOffAngleTFActionPerformed
      checkAngles (false);
  }//GEN-LAST:event_cutOffAngleTFActionPerformed

  private void beamWidthTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_beamWidthTFActionPerformed
      checkAngles (false);
  }//GEN-LAST:event_beamWidthTFActionPerformed

  private void radiusTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radiusTFActionPerformed
      checkRadius ();
  }//GEN-LAST:event_radiusTFActionPerformed
  
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ambientIntensTF;
    private javax.swing.JLabel ambientIntensityLabel;
    private javax.swing.JTextField attenuation0TF;
    private javax.swing.JTextField attenuation1TF;
    private javax.swing.JTextField attenuation2TF;
    private javax.swing.JLabel attenuationLabel;
    private javax.swing.JLabel beamWidthLabel;
    private javax.swing.JTextField beamWidthTF;
    private org.web3d.x3d.palette.BetterJTextField color0TF;
    private org.web3d.x3d.palette.BetterJTextField color1TF;
    private org.web3d.x3d.palette.BetterJTextField color2TF;
    private net.java.dev.colorchooser.ColorChooser colorChooser1;
    private javax.swing.JLabel colorLabel;
    private javax.swing.JLabel cutOffAngleLabel;
    private javax.swing.JTextField cutOffAngleTF;
    private org.web3d.x3d.palette.items.DEFUSEpanel dEFUSEpanel1;
    private javax.swing.JLabel directionLabel;
    private javax.swing.JTextField directionXTF;
    private javax.swing.JTextField directionYTF;
    private javax.swing.JTextField directionZTF;
    private javax.swing.JCheckBox globalCB;
    private javax.swing.JLabel globalLabel;
    private javax.swing.JLabel intensityLabel;
    private javax.swing.JTextField intensityTF;
    private javax.swing.JTextField location0TF;
    private javax.swing.JTextField location1TF;
    private javax.swing.JTextField location2TF;
    private javax.swing.JLabel locationLabel;
    private javax.swing.JButton normalizeButton;
    private javax.swing.JCheckBox onCB;
    private javax.swing.JLabel onLabel;
    private javax.swing.JLabel radiusLabel;
    private javax.swing.JTextField radiusTF;
    // End of variables declaration//GEN-END:variables


  private void checkRadius ()
  {
      if ((new SFFloat (radiusTF.getText())).getValue() < 0.0)
      {
            String message;
            message = "<html><center>Negative value provided for <b>radius</b> value, which is illegal.<br/><br/>Convert to default value <b>100</b> meters?";
          NotifyDescriptor descriptor = new NotifyDescriptor.Confirmation(
                  message, "radius must be zero or greater", NotifyDescriptor.YES_NO_OPTION);
          if (DialogDisplayer.getDefault().notify(descriptor) == NotifyDescriptor.YES_OPTION)
          {
              radiusTF.setText("100");
          }
      }
  }

  public void checkAngles(boolean precedesNormalization)
  {
      // indicate degree values in tooltips
      // usability note:  can enter degree values (-6..+6) as (354..366) to provoke this conversion check
      double angle = new SFDouble(beamWidthTF.getText()).getValue();
      beamWidthTF.setToolTipText(radiansFormat.format(angle) + " radians = " + singleDigitFormat.format(angle * 180.0 / Math.PI) + " degrees");
      if (Math.abs(angle) > Math.PI / 2.0)
      {
            String message;
            message = "<html><center>Large value provided for <b>beamWidth</b> angle, which is a radians value less than 1.57079.<br/><br/>Convert <b>" + angle + " degrees</b> to <b>" +
                    radiansFormat.format((angle % 360.0) * Math.PI / 180.0) + " radians</b>";
            if (precedesNormalization)
                 message += " before normalization?";
            else message += "?";
          NotifyDescriptor descriptor = new NotifyDescriptor.Confirmation(
                  message, "X3D angles are in radians", NotifyDescriptor.YES_NO_OPTION);
          if (DialogDisplayer.getDefault().notify(descriptor) == NotifyDescriptor.YES_OPTION)
          {
              angle = (angle % 360.0) * Math.PI / 180.0;
              beamWidthTF.setText(radiansFormat.format(angle));
              beamWidthTF.setToolTipText(radiansFormat.format(angle) + " radians = " + singleDigitFormat.format(angle * 180.0 / Math.PI) + " degrees");
          }
      }
      angle = new SFDouble(cutOffAngleTF.getText()).getValue();
      cutOffAngleTF.setToolTipText(radiansFormat.format(angle) + " radians = " + singleDigitFormat.format(angle * 180.0 / Math.PI) + " degrees");
      if (Math.abs(angle) > Math.PI / 2.0)
      {
            String message;
            message = "<html><center>Large value provided for <b>cutOffAngle</b> angle, which is a radians value less than 1.57079.<br/><br/>Convert <b>" + angle + " degrees</b> to <b>" +
                    radiansFormat.format((angle % 360.0) * Math.PI / 180.0) + " radians</b>";
            if (precedesNormalization)
                 message += " before normalization?";
            else message += "?";
          NotifyDescriptor descriptor = new NotifyDescriptor.Confirmation(
                  message, "X3D angles are in radians", NotifyDescriptor.YES_NO_OPTION);
          if (DialogDisplayer.getDefault().notify(descriptor) == NotifyDescriptor.YES_OPTION)
          {
              angle = (angle % 360.0) * Math.PI / 180.0;
              cutOffAngleTF.setText(radiansFormat.format(angle));
              cutOffAngleTF.setToolTipText(radiansFormat.format(angle) + " radians = " + singleDigitFormat.format(angle * 180.0 / Math.PI) + " degrees");
          }
      }
      if (new SFDouble(beamWidthTF.getText()).getValue() > new SFDouble(cutOffAngleTF.getText()).getValue())
      {
            String message;
            message = "<html><center>Angle mismatch: <b>beamWidth</b> (" + singleDigitFormat.format(new SFDouble(beamWidthTF.getText()).getValue()   * 180.0 / Math.PI) + " degrees) " +
                           "cannot be greater than <b>cutOffAngle</b> (" + singleDigitFormat.format(new SFDouble(cutOffAngleTF.getText()).getValue() * 180.0 / Math.PI) + " degrees).<br/><br/>" +
                           "Swap values?";
          NotifyDescriptor descriptor = new NotifyDescriptor.Confirmation(
                  message, "Angle mismatch", NotifyDescriptor.YES_NO_OPTION);
          if (DialogDisplayer.getDefault().notify(descriptor) == NotifyDescriptor.YES_OPTION)
          {
              String cutOffValue = cutOffAngleTF.getText();
              cutOffAngleTF.setText(beamWidthTF.getText());
                beamWidthTF.setText(cutOffValue);
              checkAngles (precedesNormalization); // one more time to ensure correct and reset tooltips
          }
      }
  }

public String getNameKey()
  {
    return "NAME_X3D_SPOTLIGHT";
  }

  public void unloadInput()
  {
    checkAngles(false);
    unLoadDEFUSE();
     
    spotLight.setAmbientIntensity(ambientIntensTF.getText().trim());
    spotLight.setAttenuationX(attenuation0TF.getText().trim());
    spotLight.setAttenuationY(attenuation1TF.getText().trim());
    spotLight.setAttenuationZ(attenuation2TF.getText().trim());
    spotLight.setBeamWidth(beamWidthTF.getText().trim());
    
    spotLight.setColor0(color0TF.getText().trim());
    spotLight.setColor1(color1TF.getText().trim());
    spotLight.setColor2(color2TF.getText().trim());
    
    spotLight.setCutOffAngle(cutOffAngleTF.getText().trim());

    if (directionXTF.getText().equals("0") && directionYTF.getText().equals("0") && directionZTF.getText().equals("0")) normalizeButton.doClick();
    spotLight.setDirectionX(directionXTF.getText().trim());
    spotLight.setDirectionY(directionYTF.getText().trim());
    spotLight.setDirectionZ(directionZTF.getText().trim());
    
    spotLight.setGlobal(globalCB.isSelected());
    
    spotLight.setIntensity(intensityTF.getText().trim());
    spotLight.setLocationX(location0TF.getText().trim());
    spotLight.setLocationY(location1TF.getText().trim());
    spotLight.setLocationZ(location2TF.getText().trim());
    
    spotLight.setOn(onCB.isSelected());
    checkRadius ();
    spotLight.setRadius(radiusTF.getText().trim());
  }
  
}
