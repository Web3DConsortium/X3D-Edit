/*
Copyright (c) 1995-2021 held by the author(s) .  All rights reserved.
 
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
 
 * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer
      in the documentation and/or other materials provided with the
      distribution.
 * Neither the names of the Naval Postgraduate School (NPS)
      Modeling Virtual Environments and Simulation (MOVES) Institute
      (http://www.nps.edu and https://MovesInstitute.nps.edu)
      nor the names of its contributors may be used to endorse or
      promote products derived from this software without specific
      prior written permission.
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
 */
package org.web3d.x3d.palette.items;

import javax.swing.text.JTextComponent;
import org.openide.util.HelpCtx;

/**
 * EXPORTCustomizer.java
 * Created on March 14, 2007, 9:57 AM
 *
 * MOVES Institute
 * Naval Postgraduate School, Monterey, CA, USA
 * www.nps.edu
 *
 * @author Mike Bailey, Don Brutzman
 * @version $Id$
 */
public class EXPORTCustomizer extends BaseCustomizer
{
  private EXPORT export;
  private JTextComponent target;

  public EXPORTCustomizer(EXPORT export, JTextComponent target)
  {
    super(export);
    this.export = export;
    this.target = target;
   
    HelpCtx.setHelpIDString(this, "EXPORT_ELEM_HELPID");
    
    initComponents();
    
    // must complete comboBox initializations before setting any values via callbacks to avoid NPE
    // name choices correspond to category value
    reconfigureLocalDEFComboBox();
    
    localDEFComboBox.setSelectedItem(export.getLocalDEF());
    
    AS_TextField.setText(export.getAS());
  }
  /**
   * Optional user choices for localDEFComboBox correspond to built-in conversions for current category.
   */
  private void reconfigureLocalDEFComboBox ()
  {
      
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        hint1Label = new javax.swing.JLabel();
        outlinePanel = new javax.swing.JPanel();
        localDEFLabel = new javax.swing.JLabel();
        localDEFComboBox = new javax.swing.JComboBox();
        localDEF_ExplanationLabel = new javax.swing.JLabel();
        AS_Label = new javax.swing.JLabel();
        AS_TextField = new javax.swing.JTextField();
        AS_ExplanationLabel = new javax.swing.JLabel();
        hint2Label = new javax.swing.JLabel();
        hint3Label = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        hint1Label.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        hint1Label.setText("EXPORT identifies DEF nodes that can send/receive events ");
        hint1Label.setToolTipText("unit is only valid in X3D version 3.3+");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(10, 6, 10, 6);
        add(hint1Label, gridBagConstraints);

        outlinePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        outlinePanel.setLayout(new java.awt.GridBagLayout());

        localDEFLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        localDEFLabel.setText("localDEF");
        localDEFLabel.setToolTipText("user-defined name for conversion factor");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(13, 60, 3, 3);
        outlinePanel.add(localDEFLabel, gridBagConstraints);

        localDEFComboBox.setEditable(true);
        localDEFComboBox.setToolTipText("enter or choose standard component name");
        localDEFComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                localDEFComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(13, 3, 3, 3);
        outlinePanel.add(localDEFComboBox, gridBagConstraints);

        localDEF_ExplanationLabel.setText(" DEF name internal to this scene");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(13, 3, 3, 40);
        outlinePanel.add(localDEF_ExplanationLabel, gridBagConstraints);

        AS_Label.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        AS_Label.setText("AS");
        AS_Label.setToolTipText("optional name change provided to external scenes");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(3, 60, 13, 3);
        outlinePanel.add(AS_Label, gridBagConstraints);

        AS_TextField.setToolTipText("optional name change provided to external scenes");
        AS_TextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AS_TextFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 13, 3);
        outlinePanel.add(AS_TextField, gridBagConstraints);

        AS_ExplanationLabel.setText(" DEF name external to this scene");
        AS_ExplanationLabel.setToolTipText("optional name change provided to external scenes");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 13, 40);
        outlinePanel.add(AS_ExplanationLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(3, 13, 3, 13);
        add(outlinePanel, gridBagConstraints);

        hint2Label.setText("A parent X3D scene loads this scene via Inline");
        hint2Label.setToolTipText("unit is only valid in X3D version 3.3+");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 6, 3, 6);
        add(hint2Label, gridBagConstraints);

        hint3Label.setText("and must also IMPORT this EXPORTED localDEF-AS node label");
        hint3Label.setToolTipText("unit is only valid in X3D version 3.3+");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(3, 6, 10, 6);
        add(hint3Label, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void localDEFComboBoxActionPerformed (java.awt.event.ActionEvent evt)//GEN-FIRST:event_localDEFComboBoxActionPerformed
    {//GEN-HEADEREND:event_localDEFComboBoxActionPerformed
      
        
    }//GEN-LAST:event_localDEFComboBoxActionPerformed

private void AS_TextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AS_TextFieldActionPerformed
// TODO if zero or negative, throw warning dialog
}//GEN-LAST:event_AS_TextFieldActionPerformed
  
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AS_ExplanationLabel;
    private javax.swing.JLabel AS_Label;
    private javax.swing.JTextField AS_TextField;
    private javax.swing.JLabel hint1Label;
    private javax.swing.JLabel hint2Label;
    private javax.swing.JLabel hint3Label;
    private javax.swing.JComboBox localDEFComboBox;
    private javax.swing.JLabel localDEFLabel;
    private javax.swing.JLabel localDEF_ExplanationLabel;
    private javax.swing.JPanel outlinePanel;
    // End of variables declaration//GEN-END:variables

  @Override
  public String getNameKey()
  {
    return "NAME_X3D_EXPORT";
  }

  @Override
  public void unloadInput()
  {     
     if     ((localDEFComboBox.getSelectedIndex() >= 0) || (localDEFComboBox.getSelectedItem() != null)) // editable
     {
          export.setLocalDEF(((String)localDEFComboBox.getSelectedItem()).trim());
     }
     else export.setLocalDEF("");
     
     export.setAS(AS_TextField.getText().trim());
  }  
}
