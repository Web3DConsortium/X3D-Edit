/*
Copyright (c) 1995-2021 held by the author(s) .  All rights reserved.
 
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
 
 * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer
      in the documentation and/or other materials provided with the
      distribution.
 * Neither the names of the Naval Postgraduate School (NPS)
      Modeling Virtual Environments and Simulation (MOVES) Institute
      (http://www.nps.edu and https://MovesInstitute.nps.edu)
      nor the names of its contributors may be used to endorse or
      promote products derived from this software without specific
      prior written permission.
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
 */

package org.web3d.x3d.palette.items;

import java.awt.Color;
import javax.swing.text.JTextComponent;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.HelpCtx;
import static org.web3d.x3d.types.X3DPrimitiveTypes.*;

/**
 * EDGEENHANCEMENTVOLUMESTYLECustomizer.java
 * Created on 19 November 2011
 *
 * MOVES Institute
 * Naval Postgraduate School, Monterey, CA, USA
 * www.nps.edu
 *
 * @author Mike Bailey and Don Brutzman
 * @version $Id$
 */
public class EDGEENHANCEMENTVOLUMESTYLECustomizer extends BaseCustomizer
{
  private EDGEENHANCEMENTVOLUMESTYLE edgeEnhancementVolumeStyle;
  private JTextComponent target;
  
  /** Creates new form EDGEENHANCEMENTVOLUMESTYLECustomizer
   * @param edgeEnhancementVolumeStyle
   * @param target  
   */
  public EDGEENHANCEMENTVOLUMESTYLECustomizer(EDGEENHANCEMENTVOLUMESTYLE edgeEnhancementVolumeStyle, JTextComponent target)
  {
    super(edgeEnhancementVolumeStyle);
    this.edgeEnhancementVolumeStyle = edgeEnhancementVolumeStyle;
    this.target = target;
    
    HelpCtx.setHelpIDString(this, "EDGEENHANCEMENTVOLUMESTYLE_ELEM_HELPID");
    
    initComponents();
    
           enabledCB.setSelected(edgeEnhancementVolumeStyle.isEnabled());
 gradientThresholdTF.setText(edgeEnhancementVolumeStyle.getGradientThreshold());
    
      edgeColorRedTF.setText(edgeEnhancementVolumeStyle.getEdgeColorRed());
    edgeColorGreenTF.setText(edgeEnhancementVolumeStyle.getEdgeColorGreen());
     edgeColorBlueTF.setText(edgeEnhancementVolumeStyle.getEdgeColorBlue());
    edgeColorChooser.setColor(
             (new SFColor(edgeColorRedTF.getText(), 
                          edgeColorGreenTF.getText(),
                          edgeColorBlueTF.getText())).getColor());
    edgeColorAlphaTF.setText(edgeEnhancementVolumeStyle.getEdgeColorAlpha());
    edgeColorAlphaSliderUpdate ();
  }
 
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        dEFUSEpanel1 = getDEFUSEpanel();
        enabledLabel = new javax.swing.JLabel();
        enabledCB = new javax.swing.JCheckBox();
        gradientThresholdLabel = new javax.swing.JLabel();
        gradientThresholdTF = new javax.swing.JTextField();
        edgeColorLabel = new javax.swing.JLabel();
        edgeColorRedTF = new javax.swing.JFormattedTextField();
        edgeColorGreenTF = new javax.swing.JFormattedTextField();
        edgeColorBlueTF = new javax.swing.JFormattedTextField();
        edgeColorChooser = new net.java.dev.colorchooser.ColorChooser();
        edgeColorAlphaTF = new javax.swing.JFormattedTextField();
        edgeColorAlphaSlider = new javax.swing.JSlider();
        nodeHintPanel = new javax.swing.JPanel();
        hintLabel1 = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        dEFUSEpanel1.setMinimumSize(new java.awt.Dimension(198, 77));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(dEFUSEpanel1, gridBagConstraints);

        enabledLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        enabledLabel.setText("enabled");
        enabledLabel.setToolTipText("Enables/disables node operation");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(enabledLabel, gridBagConstraints);

        enabledCB.setToolTipText("Enables/disables node operation");
        enabledCB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(enabledCB, gridBagConstraints);

        gradientThresholdLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        gradientThresholdLabel.setText("gradientThreshold");
        gradientThresholdLabel.setToolTipText("minimum angle (in radians) away from view-direction vector for surface normal before applying enhancement");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(gradientThresholdLabel, gridBagConstraints);

        gradientThresholdTF.setToolTipText("minimum angle (in radians) away from view-direction vector for surface normal before applying enhancement");
        gradientThresholdTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gradientThresholdTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(gradientThresholdTF, gridBagConstraints);

        edgeColorLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        edgeColorLabel.setText("edgeColor");
        edgeColorLabel.setToolTipText("color used to highlight edges");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(edgeColorLabel, gridBagConstraints);

        edgeColorRedTF.setColumns(3);
        edgeColorRedTF.setText(org.openide.util.NbBundle.getMessage(EDGEENHANCEMENTVOLUMESTYLECustomizer.class, "NewJPanel.diffuseColorRedTF.text")); // NOI18N
        edgeColorRedTF.setToolTipText(org.openide.util.NbBundle.getMessage(EDGEENHANCEMENTVOLUMESTYLECustomizer.class, "MATERIALCustomizer.diffuseColorRedTF.toolTipText")); // NOI18N
        edgeColorRedTF.setMinimumSize(new java.awt.Dimension(6, 15));
        edgeColorRedTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edgeColorRedTFActionPerformed(evt);
            }
        });
        edgeColorRedTF.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                edgeColorRedTFPropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(edgeColorRedTF, gridBagConstraints);

        edgeColorGreenTF.setColumns(3);
        edgeColorGreenTF.setText(org.openide.util.NbBundle.getMessage(EDGEENHANCEMENTVOLUMESTYLECustomizer.class, "NewJPanel.diffuseColorGreenTF.text")); // NOI18N
        edgeColorGreenTF.setToolTipText(org.openide.util.NbBundle.getMessage(EDGEENHANCEMENTVOLUMESTYLECustomizer.class, "MATERIALCustomizer.diffuseColorGreenTF.toolTipText")); // NOI18N
        edgeColorGreenTF.setMinimumSize(new java.awt.Dimension(6, 15));
        edgeColorGreenTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edgeColorGreenTFActionPerformed(evt);
            }
        });
        edgeColorGreenTF.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                edgeColorGreenTFPropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(edgeColorGreenTF, gridBagConstraints);

        edgeColorBlueTF.setColumns(3);
        edgeColorBlueTF.setText(org.openide.util.NbBundle.getMessage(EDGEENHANCEMENTVOLUMESTYLECustomizer.class, "NewJPanel.diffuseColorBlueTF.text")); // NOI18N
        edgeColorBlueTF.setToolTipText(org.openide.util.NbBundle.getMessage(EDGEENHANCEMENTVOLUMESTYLECustomizer.class, "MATERIALCustomizer.diffuseColorBlueTF.toolTipText")); // NOI18N
        edgeColorBlueTF.setMinimumSize(new java.awt.Dimension(6, 15));
        edgeColorBlueTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edgeColorBlueTFActionPerformed(evt);
            }
        });
        edgeColorBlueTF.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                edgeColorBlueTFPropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(edgeColorBlueTF, gridBagConstraints);

        edgeColorChooser.setMinimumSize(new java.awt.Dimension(15, 15));
        edgeColorChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edgeColorChooserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout edgeColorChooserLayout = new javax.swing.GroupLayout(edgeColorChooser);
        edgeColorChooser.setLayout(edgeColorChooserLayout);
        edgeColorChooserLayout.setHorizontalGroup(
            edgeColorChooserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 22, Short.MAX_VALUE)
        );
        edgeColorChooserLayout.setVerticalGroup(
            edgeColorChooserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 23, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(edgeColorChooser, gridBagConstraints);

        edgeColorAlphaTF.setColumns(3);
        edgeColorAlphaTF.setText(org.openide.util.NbBundle.getMessage(EDGEENHANCEMENTVOLUMESTYLECustomizer.class, "NewJPanel.transparencyTF.text")); // NOI18N
        edgeColorAlphaTF.setToolTipText("alpha opaqueness value [0..1]");
        edgeColorAlphaTF.setMinimumSize(new java.awt.Dimension(6, 15));
        edgeColorAlphaTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edgeColorAlphaTFActionPerformed(evt);
            }
        });
        edgeColorAlphaTF.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                edgeColorAlphaTFPropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(edgeColorAlphaTF, gridBagConstraints);

        edgeColorAlphaSlider.setToolTipText(org.openide.util.NbBundle.getMessage(EDGEENHANCEMENTVOLUMESTYLECustomizer.class, "MATERIALCustomizer.transparencySlider.toolTipText")); // NOI18N
        edgeColorAlphaSlider.setMaximumSize(new java.awt.Dimension(100, 25));
        edgeColorAlphaSlider.setPreferredSize(new java.awt.Dimension(100, 25));
        edgeColorAlphaSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                edgeColorAlphaSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.67;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(edgeColorAlphaSlider, gridBagConstraints);

        nodeHintPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        nodeHintPanel.setLayout(new java.awt.GridBagLayout());

        hintLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        hintLabel1.setText("<html><p align='center'><b>EdgeEnhancementVolumeStyle</b> contains a 3D texture node defining the surfaceNormals.</p>");
        hintLabel1.setToolTipText("multiple style nodes can be applied to volume data");
        hintLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        nodeHintPanel.add(hintLabel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(nodeHintPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
  private void edgeColorChooserUpdate()
  {
//    if (!evt.getPropertyName().equals("value")) {
//        return;
//    }
    edgeColorChooser.setColor(
             (new SFColor(edgeColorRedTF.getText(), 
                          edgeColorGreenTF.getText(),
                          edgeColorBlueTF.getText())).getColor());
  }
    private void gradientThresholdTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gradientThresholdTFActionPerformed
        checkAngles (false);
    }//GEN-LAST:event_gradientThresholdTFActionPerformed

    private void edgeColorRedTFPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_edgeColorRedTFPropertyChange
        edgeColorChooserUpdate();
    }//GEN-LAST:event_edgeColorRedTFPropertyChange

    private void edgeColorGreenTFPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_edgeColorGreenTFPropertyChange
        edgeColorChooserUpdate();
    }//GEN-LAST:event_edgeColorGreenTFPropertyChange

    private void edgeColorBlueTFPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_edgeColorBlueTFPropertyChange
        edgeColorChooserUpdate();
    }//GEN-LAST:event_edgeColorBlueTFPropertyChange

    private void edgeColorAlphaTFPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_edgeColorAlphaTFPropertyChange
        if (!(evt.getPropertyName().equals("value"))) { // || evt.getPropertyName().equals("editValid"))) {
            return;
        }
        edgeColorAlphaSliderUpdate ();
    }//GEN-LAST:event_edgeColorAlphaTFPropertyChange
    private void edgeColorAlphaSliderUpdate ()
    {
        double alpha = (new SFDouble(edgeColorAlphaTF.getText()).getValue());
        if ((alpha < 0.0) || (alpha > 1.0))
        {
            String warningMessage = "Illegal edgeColor alpha=" + alpha + ", opaqueness value must be in range [0..1], reset to 1.0";
            System.out.println(warningMessage);
            NotifyDescriptor descriptor = new NotifyDescriptor.Message(
                    warningMessage, NotifyDescriptor.WARNING_MESSAGE);
            DialogDisplayer.getDefault().notify(descriptor);
            alpha = 1.0;
        }
        edgeColorAlphaSlider.setValue((int)(alpha*100.0));
    }
    private void edgeColorAlphaSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_edgeColorAlphaSliderStateChanged
        int value = edgeColorAlphaSlider.getValue();
        edgeColorAlphaTF.setValue(Float.toString((float) value / 100.0f));
    }//GEN-LAST:event_edgeColorAlphaSliderStateChanged

    private void edgeColorChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edgeColorChooserActionPerformed
       Color c = edgeColorChooser.getColor();
         edgeColorRedTF.setValue(Float.toString((float)c.getRed()   / 255.0f));
       edgeColorGreenTF.setValue(Float.toString((float)c.getGreen() / 255.0f));
        edgeColorBlueTF.setValue(Float.toString((float)c.getBlue()  / 255.0f));
    }//GEN-LAST:event_edgeColorChooserActionPerformed

    private void edgeColorRedTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edgeColorRedTFActionPerformed
        edgeColorChooserUpdate();
    }//GEN-LAST:event_edgeColorRedTFActionPerformed

    private void edgeColorGreenTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edgeColorGreenTFActionPerformed
        edgeColorChooserUpdate();
    }//GEN-LAST:event_edgeColorGreenTFActionPerformed

    private void edgeColorBlueTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edgeColorBlueTFActionPerformed
        edgeColorChooserUpdate();
    }//GEN-LAST:event_edgeColorBlueTFActionPerformed

    private void edgeColorAlphaTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edgeColorAlphaTFActionPerformed
        edgeColorAlphaSliderUpdate();
    }//GEN-LAST:event_edgeColorAlphaTFActionPerformed
  
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.web3d.x3d.palette.items.DEFUSEpanel dEFUSEpanel1;
    private javax.swing.JSlider edgeColorAlphaSlider;
    private javax.swing.JFormattedTextField edgeColorAlphaTF;
    private javax.swing.JFormattedTextField edgeColorBlueTF;
    private net.java.dev.colorchooser.ColorChooser edgeColorChooser;
    private javax.swing.JFormattedTextField edgeColorGreenTF;
    private javax.swing.JLabel edgeColorLabel;
    private javax.swing.JFormattedTextField edgeColorRedTF;
    private javax.swing.JCheckBox enabledCB;
    private javax.swing.JLabel enabledLabel;
    private javax.swing.JLabel gradientThresholdLabel;
    private javax.swing.JTextField gradientThresholdTF;
    private javax.swing.JLabel hintLabel1;
    private javax.swing.JPanel nodeHintPanel;
    // End of variables declaration//GEN-END:variables

  @Override
  public String getNameKey()
  {
    return "NAME_X3D_EDGEENHANCEMENTVOLUMESTYLE";
  }
  private void checkAngles(boolean precedesNormalization)
  {
        // indicate degree values in tooltips
        // usability note:  can enter degree values (-6..+6) as (354..366) to provoke this conversion check
        double angle = new SFDouble(gradientThresholdTF.getText()).getValue();
        gradientThresholdTF.setToolTipText(radiansFormat.format(angle) + " radians = " + singleDigitFormat.format(angle * 180.0 / Math.PI) + " degrees");
        if (Math.abs(angle) > 2.0 * Math.PI)
        {
            String message;
            message = "<html><center>Large value found for <b>creaseAngle</b> angle, which is a radians value.<br/><br/>Convert <b>" + angle + " degrees</b> to <b>" +
                    radiansFormat.format((angle % 360.0) * Math.PI / 180.0) + " radians</b>";
            if (precedesNormalization)
                 message += " before normalization?";
            else message += "?";
          NotifyDescriptor descriptor = new NotifyDescriptor.Confirmation(
                  message, "X3D angles are in radians", NotifyDescriptor.YES_NO_OPTION);
          Object userChoice = DialogDisplayer.getDefault().notify(descriptor);
          if (userChoice == NotifyDescriptor.YES_OPTION)
          {
              angle = (angle % 360.0) * Math.PI / 180.0;
              gradientThresholdTF.setText(radiansFormat.format(angle));
              gradientThresholdTF.setToolTipText(radiansFormat.format(angle) + " radians = " + singleDigitFormat.format(angle * 180.0 / Math.PI) + " degrees");
          }
        }
        if (angle < 0.0)
        {
            String message = "<html><center>Negative value found for <b>creaseAngle</b>.<br/><br/>Convert <b>" + angle + " radians</b> to <b>" +
                    (-angle) + " radians</b>";
            if (precedesNormalization)
                 message += " before normalization?";
            else message += "?";
          NotifyDescriptor descriptor = new NotifyDescriptor.Confirmation(
                  message, "creaseAngle must be nonnegative", NotifyDescriptor.YES_NO_OPTION);
          Object userChoice = DialogDisplayer.getDefault().notify(descriptor);
          if (userChoice == NotifyDescriptor.YES_OPTION)
          {
              angle = Math.abs(angle);
              gradientThresholdTF.setText(radiansFormat.format(angle));
              gradientThresholdTF.setToolTipText(radiansFormat.format(angle) + " radians = " + singleDigitFormat.format(angle * 180.0 / Math.PI) + " degrees");
          }
        }
  }

  @Override
  public void unloadInput()
  {
    unLoadDEFUSE();
    
    edgeEnhancementVolumeStyle.setEnabled(enabledCB.isSelected());
    edgeEnhancementVolumeStyle.setGradientThreshold(gradientThresholdTF.getText().trim());
    edgeEnhancementVolumeStyle.setEdgeColor(
              edgeColorRedTF.getText().trim() + " " +
            edgeColorGreenTF.getText().trim() + " " +
             edgeColorBlueTF.getText().trim() + " " +
            edgeColorAlphaTF.getText().trim() + " ");
  }   
}
