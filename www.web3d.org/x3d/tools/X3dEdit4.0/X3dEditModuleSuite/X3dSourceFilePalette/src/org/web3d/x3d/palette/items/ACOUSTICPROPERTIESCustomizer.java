/*
Copyright (c) 1995-2021 held by the author(s) .  All rights reserved.
 
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
 
 * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer
      in the documentation and/or other materials provided with the
      distribution.
 * Neither the names of the Naval Postgraduate School (NPS)
      Modeling Virtual Environments and Simulation (MOVES) Institute
      (http://www.nps.edu and https://MovesInstitute.nps.edu)
      nor the names of its contributors may be used to endorse or
      promote products derived from this software without specific
      prior written permission.
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
 */

package org.web3d.x3d.palette.items;

import javax.swing.text.JTextComponent;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.HelpCtx;
import org.web3d.x3d.types.X3DPrimitiveTypes.SFFloat;

/**
 * ACOUSTICPROPERTIESCustomizer.java
 * Created on 7 November 2021
 *
 * MOVES Institute
 * Naval Postgraduate School, Monterey, CA, USA
 * www.nps.edu
 *
 * @author Don Brutzman
 * @version $Id$
 */
public class ACOUSTICPROPERTIESCustomizer extends BaseCustomizer {
  private final ACOUSTICPROPERTIES acousticProperties;
  private final JTextComponent target;
  
  /** Creates new form ACOUSTICPROPERTIESCustomizer
     * @param acousticProperties node data structures
     * @param target Swing component of interest */
  public ACOUSTICPROPERTIESCustomizer(ACOUSTICPROPERTIES acousticProperties, JTextComponent target)
  {
    super(acousticProperties);
    this.acousticProperties = acousticProperties;
    this.target = target;
    
    HelpCtx.setHelpIDString(this, "ACOUSTICPROPERTIES_ELEM_HELPID");
    
    initComponents();
    
      descriptionTF.setText    (acousticProperties.getDescription());
    enabledCheckBox.setSelected(acousticProperties.isEnabled());
       absorptionTF.setText    (String.valueOf(acousticProperties.getAbsorption()));
          diffuseTF.setText    (String.valueOf(acousticProperties.getDiffuse()));
       refractionTF.setText    (String.valueOf(acousticProperties.getRefraction()));
         specularTF.setText    (String.valueOf(acousticProperties.getSpecular()));

    checkRanges();
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        org.web3d.x3d.palette.items.DEFUSEpanel dEFUSEpanel1 = getDEFUSEpanel();
        enabledLabel = new javax.swing.JLabel();
        enabledCheckBox = new javax.swing.JCheckBox();
        descriptionTF = new javax.swing.JTextField();
        absorptionTF = new javax.swing.JTextField();
        diffuseTF = new javax.swing.JTextField();
        refractionTF = new javax.swing.JTextField();
        specularTF = new javax.swing.JTextField();
        normalizeAbsorptionButton = new javax.swing.JButton();
        normalizeDiffuseButton = new javax.swing.JButton();
        normalizeRefractionButton = new javax.swing.JButton();
        normalizeSpecularButton = new javax.swing.JButton();
        descriptionLabel = new javax.swing.JLabel();
        absorptionLabel = new javax.swing.JLabel();
        diffuseLabel = new javax.swing.JLabel();
        refractionLabel = new javax.swing.JLabel();
        specularLabel = new javax.swing.JLabel();
        nodeHintPanel = new javax.swing.JPanel();
        hintLabel = new javax.swing.JLabel();

        setName(""); // NOI18N
        setLayout(new java.awt.GridBagLayout());

        dEFUSEpanel1.setMaximumSize(null);
        dEFUSEpanel1.setMinimumSize(null);
        dEFUSEpanel1.setPreferredSize(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(dEFUSEpanel1, gridBagConstraints);

        enabledLabel.setText("enabled");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 43, 3, 3);
        add(enabledLabel, gridBagConstraints);

        enabledCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        enabledCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        enabledCheckBox.setMinimumSize(new java.awt.Dimension(50, 20));
        enabledCheckBox.setPreferredSize(new java.awt.Dimension(50, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(enabledCheckBox, gridBagConstraints);

        descriptionTF.setMinimumSize(new java.awt.Dimension(50, 20));
        descriptionTF.setPreferredSize(new java.awt.Dimension(50, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(descriptionTF, gridBagConstraints);

        absorptionTF.setMinimumSize(new java.awt.Dimension(30, 20));
        absorptionTF.setPreferredSize(new java.awt.Dimension(30, 20));
        absorptionTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                absorptionTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(absorptionTF, gridBagConstraints);

        diffuseTF.setMinimumSize(new java.awt.Dimension(30, 20));
        diffuseTF.setPreferredSize(new java.awt.Dimension(30, 20));
        diffuseTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                diffuseTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(diffuseTF, gridBagConstraints);

        refractionTF.setMinimumSize(new java.awt.Dimension(30, 20));
        refractionTF.setPreferredSize(new java.awt.Dimension(30, 20));
        refractionTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refractionTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(refractionTF, gridBagConstraints);

        specularTF.setMinimumSize(new java.awt.Dimension(30, 20));
        specularTF.setPreferredSize(new java.awt.Dimension(30, 20));
        specularTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                specularTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(specularTF, gridBagConstraints);

        normalizeAbsorptionButton.setText("normalize absorption");
        normalizeAbsorptionButton.setToolTipText("reset value [0..1]");
        normalizeAbsorptionButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        normalizeAbsorptionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                normalizeAbsorptionButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 43);
        add(normalizeAbsorptionButton, gridBagConstraints);

        normalizeDiffuseButton.setText("normalize diffuse  ");
        normalizeDiffuseButton.setToolTipText("reset reset value [0..1]");
        normalizeDiffuseButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        normalizeDiffuseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                normalizeDiffuseButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 43);
        add(normalizeDiffuseButton, gridBagConstraints);

        normalizeRefractionButton.setText("normalize refraction");
        normalizeRefractionButton.setToolTipText("reset reset value [0..1]");
        normalizeRefractionButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        normalizeRefractionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                normalizeRefractionButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 43);
        add(normalizeRefractionButton, gridBagConstraints);

        normalizeSpecularButton.setText("normalize specular");
        normalizeSpecularButton.setToolTipText("reset reset value [0..1]");
        normalizeSpecularButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        normalizeSpecularButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                normalizeSpecularButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 43);
        add(normalizeSpecularButton, gridBagConstraints);

        descriptionLabel.setText("description");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 43, 3, 3);
        add(descriptionLabel, gridBagConstraints);

        absorptionLabel.setText("absorption");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 43, 3, 3);
        add(absorptionLabel, gridBagConstraints);

        diffuseLabel.setText("diffuse");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 43, 3, 3);
        add(diffuseLabel, gridBagConstraints);

        refractionLabel.setText("refraction");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 43, 3, 3);
        add(refractionLabel, gridBagConstraints);

        specularLabel.setText("specular");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 43, 3, 3);
        add(specularLabel, gridBagConstraints);

        nodeHintPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        nodeHintPanel.setToolTipText("AcousticProperties must have a parent Appearance node, and only affects geometry within the same Shape");
        nodeHintPanel.setMinimumSize(new java.awt.Dimension(50, 25));
        nodeHintPanel.setLayout(new java.awt.GridBagLayout());

        hintLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        hintLabel.setText("<html><p align=\"center\"><b>AcousticProperties</b> specifies interaction of sound waves with geometric objects.</p> <br /> <p align=\"center\"><b>AcousticProperties</b> must have a parent Appearance node, <br /> only affects geometry within the same Shape, and does not contain any other audio nodes.</p>");
        hintLabel.setToolTipText("a parent Shape node can only contain one AcousticProperties node");
        hintLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 3, 3, 3);
        nodeHintPanel.add(hintLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(nodeHintPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void absorptionTFActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_absorptionTFActionPerformed
    {//GEN-HEADEREND:event_absorptionTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_absorptionTFActionPerformed

    private void refractionTFActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_refractionTFActionPerformed
    {//GEN-HEADEREND:event_refractionTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_refractionTFActionPerformed

    private void normalizeAbsorptionButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_normalizeAbsorptionButtonActionPerformed
    {//GEN-HEADEREND:event_normalizeAbsorptionButtonActionPerformed
        checkRangeAbsorption();
}//GEN-LAST:event_normalizeAbsorptionButtonActionPerformed

    private void normalizeDiffuseButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_normalizeDiffuseButtonActionPerformed
    {//GEN-HEADEREND:event_normalizeDiffuseButtonActionPerformed
        checkRangeDiffuse();
}//GEN-LAST:event_normalizeDiffuseButtonActionPerformed

    private void specularTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_specularTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_specularTFActionPerformed

    private void normalizeRefractionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_normalizeRefractionButtonActionPerformed
        checkRangeRefraction();
    }//GEN-LAST:event_normalizeRefractionButtonActionPerformed

    private void diffuseTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_diffuseTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_diffuseTFActionPerformed

    private void normalizeSpecularButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_normalizeSpecularButtonActionPerformed
        checkRangeSpecular();
    }//GEN-LAST:event_normalizeSpecularButtonActionPerformed
          
  @Override
  public String getNameKey()
  {
    return "NAME_X3D_ACOUSTICPROPERTIES";
  }

  public final void checkRangeAbsorption()
  {
      float    value = new SFFloat(absorptionTF.getText()).getValue();
      float newValue = 0.0f;
      String warningMessage = new String();
      if (value < 0.0)
      {
          newValue = 0.0f;
          warningMessage = "absorption=" + value + " is less than 0";
      }
      else if (value > 1.0)
      {
          newValue = 1.0f;
          warningMessage = "absorption=" + value + " is greater than 1";
      }
      if (!warningMessage.isEmpty())
      {
          absorptionTF.setToolTipText(warningMessage);
          String message = "<html><center>Out-of-range value provided for <b>absorption=" + value + "</b><br/><br/>Convert <b>absorption=" + value + "</b> to <b>" +  newValue + "?";
          NotifyDescriptor descriptor = new NotifyDescriptor.Confirmation(
                  message, "X3D angles are in radians", NotifyDescriptor.YES_NO_OPTION);
          if (DialogDisplayer.getDefault().notify(descriptor) == NotifyDescriptor.YES_OPTION)
          {
              absorptionTF.setText(String.valueOf(newValue));
              absorptionTF.setToolTipText(warningMessage + ", reset to " + newValue);
          }
      }
  }
  public final void checkRangeDiffuse()
  {
      float    value = new SFFloat(diffuseTF.getText()).getValue();
      float newValue = 0.0f;
      String warningMessage = new String();
      if (value < 0.0)
      {
          newValue = 0.0f;
          warningMessage = "diffuse=" + value + " is less than 0";
      }
      else if (value > 1.0)
      {
          newValue = 1.0f;
          warningMessage = "diffuse=" + value + " is greater than 1";
      }
      if (!warningMessage.isEmpty())
      {
          diffuseTF.setToolTipText(warningMessage);
          String message = "<html><center>Out-of-range value provided for <b>diffuse=" + value + "</b><br/><br/>Convert <b>diffuse=" + value + "</b> to <b>" +  newValue + "?";
          NotifyDescriptor descriptor = new NotifyDescriptor.Confirmation(
                  message, "X3D angles are in radians", NotifyDescriptor.YES_NO_OPTION);
          if (DialogDisplayer.getDefault().notify(descriptor) == NotifyDescriptor.YES_OPTION)
          {
              diffuseTF.setText(String.valueOf(newValue));
              diffuseTF.setToolTipText(warningMessage + ", reset to " + newValue);
          }
      }
  }  public final void checkRangeRefraction()
  {
      float    value = new SFFloat(refractionTF.getText()).getValue();
      float newValue = 0.0f;
      String warningMessage = new String();
      if (value < 0.0)
      {
          newValue = 0.0f;
          warningMessage = "refraction=" + value + " is less than 0";
      }
      else if (value > 1.0)
      {
          newValue = 1.0f;
          warningMessage = "refraction=" + value + " is greater than 1";
      }
      if (!warningMessage.isEmpty())
      {
          refractionTF.setToolTipText(warningMessage);
          String message = "<html><center>Out-of-range value provided for <b>refraction=" + value + "</b><br/><br/>Convert <b>refraction=" + value + "</b> to <b>" +  newValue + "?";
          NotifyDescriptor descriptor = new NotifyDescriptor.Confirmation(
                  message, "X3D angles are in radians", NotifyDescriptor.YES_NO_OPTION);
          if (DialogDisplayer.getDefault().notify(descriptor) == NotifyDescriptor.YES_OPTION)
          {
              refractionTF.setText(String.valueOf(newValue));
              refractionTF.setToolTipText(warningMessage + ", reset to " + newValue);
          }
      }
  }  public final void checkRangeSpecular()
  {
      float    value = new SFFloat(specularTF.getText()).getValue();
      float newValue = 0.0f;
      String warningMessage = new String();
      if (value < 0.0)
      {
          newValue = 0.0f;
          warningMessage = "specular=" + value + " is less than 0";
      }
      else if (value > 1.0)
      {
          newValue = 1.0f;
          warningMessage = "specular=" + value + " is greater than 1";
      }
      if (!warningMessage.isEmpty())
      {
          specularTF.setToolTipText(warningMessage);
          String message = "<html><center>Out-of-range value provided for <b>specular=" + value + "</b><br/><br/>Convert <b>specular=" + value + "</b> to <b>" +  newValue + "?";
          NotifyDescriptor descriptor = new NotifyDescriptor.Confirmation(
                  message, "X3D angles are in radians", NotifyDescriptor.YES_NO_OPTION);
          if (DialogDisplayer.getDefault().notify(descriptor) == NotifyDescriptor.YES_OPTION)
          {
              specularTF.setText(String.valueOf(newValue));
              specularTF.setToolTipText(warningMessage + ", reset to " + newValue);
          }
      }
  }

  public final void checkRanges()
  {
      checkRangeAbsorption();
      checkRangeDiffuse();
      checkRangeRefraction();
      checkRangeSpecular();
  }

  @Override
  public void unloadInput() throws IllegalArgumentException
  {
    checkRanges();
    unLoadDEFUSE();
     
    acousticProperties.setDescription(descriptionTF.getText().trim());
    acousticProperties.setEnabled    (enabledCheckBox.isSelected());
    acousticProperties.setAbsorption (new SFFloat(absorptionTF.getText().trim()));
    acousticProperties.setDiffuse    (new SFFloat(   diffuseTF.getText().trim()));
    acousticProperties.setRefraction (new SFFloat(refractionTF.getText().trim()));
    acousticProperties.setSpecular   (new SFFloat(  specularTF.getText().trim()));
  }
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel absorptionLabel;
    private javax.swing.JTextField absorptionTF;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JTextField descriptionTF;
    private javax.swing.JLabel diffuseLabel;
    private javax.swing.JTextField diffuseTF;
    private javax.swing.JCheckBox enabledCheckBox;
    private javax.swing.JLabel enabledLabel;
    private javax.swing.JLabel hintLabel;
    private javax.swing.JPanel nodeHintPanel;
    private javax.swing.JButton normalizeAbsorptionButton;
    private javax.swing.JButton normalizeDiffuseButton;
    private javax.swing.JButton normalizeRefractionButton;
    private javax.swing.JButton normalizeSpecularButton;
    private javax.swing.JLabel refractionLabel;
    private javax.swing.JTextField refractionTF;
    private javax.swing.JLabel specularLabel;
    private javax.swing.JTextField specularTF;
    // End of variables declaration//GEN-END:variables
  
}
