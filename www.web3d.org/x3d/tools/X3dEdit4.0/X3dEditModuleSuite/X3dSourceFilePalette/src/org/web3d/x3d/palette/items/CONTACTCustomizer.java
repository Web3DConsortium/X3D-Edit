/*
Copyright (c) 1995-2021 held by the author(s) .  All rights reserved.
 
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
 
 * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer
      in the documentation and/or other materials provided with the
      distribution.
 * Neither the names of the Naval Postgraduate School (NPS)
      Modeling Virtual Environments and Simulation (MOVES) Institute
      (http://www.nps.edu and https://MovesInstitute.nps.edu)
      nor the names of its contributors may be used to endorse or
      promote products derived from this software without specific
      prior written permission.
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
 */

package org.web3d.x3d.palette.items;

import java.util.List;
import java.util.Vector;
import javax.swing.text.JTextComponent;
import org.openide.util.HelpCtx;
import static org.web3d.x3d.types.X3DSchemaData.*;

/**
 * CONTACTCustomizer.java
 * Created on 1 January 2009
 *
 * MOVES Institute
 * Naval Postgraduate School, Monterey, CA, USA
 * www.nps.edu
 *
 * @author Mike Bailey, Don Brutzman
 * @version $Id$
 */
public class CONTACTCustomizer extends BaseCustomizer
{
  private CONTACT contact;
  private JTextComponent target;
  
  /** Creates new form CONTACTCustomizer */
  public CONTACTCustomizer(CONTACT contact, JTextComponent target)
  {
    super(contact);
    this.contact = contact;
    this.target = target;
                             
    HelpCtx.setHelpIDString(this, "CONTACT_ELEM_HELPID");   
    
    initComponents();

    enabledCB.setSelected(contact.isEnabled());
    
    bounceTF.setText(contact.getBounce());
    depthTF.setText(contact.getDepth());
    minBounceSpeedTF.setText(contact.getMinBounceSpeed());
    softnessConstantForceMixTF.setText(contact.getSoftnessConstantForceMix());
    
    contactNormal0TF.setText(contact.getContactNormal0());
    contactNormal1TF.setText(contact.getContactNormal1());
    contactNormal2TF.setText(contact.getContactNormal2());
    softnessErrorCorrectionTF.setText(contact.getSoftnessErrorCorrection());
    frictionCoefficients0TF.setText(contact.getFrictionCoefficients0());
    frictionCoefficients1TF.setText(contact.getFrictionCoefficients1());
    frictionDirection0TF.setText(contact.getFrictionDirection0());
    frictionDirection1TF.setText(contact.getFrictionDirection1());
    frictionDirection2TF.setText(contact.getFrictionDirection2());
    position0TF.setText(contact.getPosition0());
    position1TF.setText(contact.getPosition1());
    position2TF.setText(contact.getPosition2());
    slipCoefficients0TF.setText(contact.getSlipFactors0());
    slipCoefficients1TF.setText(contact.getSlipFactors1());
    surfaceSpeed0TF.setText(contact.getSurfaceSpeed0());
    surfaceSpeed1TF.setText(contact.getSurfaceSpeed1());
    
    // set appliedParameters array
    String[] ta = contact.getAppliedParameters();  // get selected appliedParameters
    Vector<Integer> v = new Vector<Integer>();
    int wh = 0;
    for(String s : CONTACT_ATTR_APPLIEDPARAMETERS_CHOICES) {  // values in list order
      for(String ss : ta) {
        if(ss.equals(s)) {
          v.add(wh);
          break;
        }
      }
      wh++;
    }
    int[] inta = new int[v.size()];
    int count=0;
    for(Integer I : v)
    {
        inta[count++] = I;
    }
    appliedParametersList.setSelectedIndices(inta);
  }
 
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        dEFUSEpanel1 = getDEFUSEpanel();
        slipCoefficientsLabel = new javax.swing.JLabel();
        slipCoefficients0TF = new javax.swing.JTextField();
        slipCoefficients1TF = new javax.swing.JTextField();
        frictionCoefficientsLabel = new javax.swing.JLabel();
        frictionCoefficients0TF = new javax.swing.JTextField();
        frictionCoefficients1TF = new javax.swing.JTextField();
        bounceLabel = new javax.swing.JLabel();
        bounceTF = new javax.swing.JTextField();
        surfaceSpeedLabel = new javax.swing.JLabel();
        surfaceSpeed0TF = new javax.swing.JTextField();
        surfaceSpeed1TF = new javax.swing.JTextField();
        enabledLabel = new javax.swing.JLabel();
        enabledCB = new javax.swing.JCheckBox();
        appliedParametersLabel = new javax.swing.JLabel();
        minBounceSpeedLabel = new javax.swing.JLabel();
        minBounceSpeedTF = new javax.swing.JTextField();
        softnessConstantForceMixLabel = new javax.swing.JLabel();
        softnessErrorCorrectionLabel = new javax.swing.JLabel();
        softnessConstantForceMixTF = new javax.swing.JTextField();
        softnessErrorCorrectionTF = new javax.swing.JTextField();
        depthLabel = new javax.swing.JLabel();
        depthTF = new javax.swing.JTextField();
        frictionDirectionLabel = new javax.swing.JLabel();
        position0TF = new javax.swing.JTextField();
        position1TF = new javax.swing.JTextField();
        position2TF = new javax.swing.JTextField();
        positionLabel = new javax.swing.JLabel();
        frictionDirection0TF = new javax.swing.JTextField();
        frictionDirection1TF = new javax.swing.JTextField();
        frictionDirection2TF = new javax.swing.JTextField();
        AppliedParametersScrollPane = new javax.swing.JScrollPane();
        appliedParametersList = new javax.swing.JList<String>();
        contactNormalLabel = new javax.swing.JLabel();
        contactNormal0TF = new javax.swing.JTextField();
        contactNormal1TF = new javax.swing.JTextField();
        contactNormal2TF = new javax.swing.JTextField();
        nodeHintPanel = new javax.swing.JPanel();
        hintLabel = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 3, 8);
        add(dEFUSEpanel1, gridBagConstraints);

        slipCoefficientsLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        slipCoefficientsLabel.setText("slipCoefficients");
        slipCoefficientsLabel.setToolTipText("slipFactors used for computing surface drag");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 8, 3, 3);
        add(slipCoefficientsLabel, gridBagConstraints);

        slipCoefficients0TF.setColumns(4);
        slipCoefficients0TF.setToolTipText("slipFactors used for computing surface drag");
        slipCoefficients0TF.setMinimumSize(new java.awt.Dimension(40, 20));
        slipCoefficients0TF.setPreferredSize(new java.awt.Dimension(40, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.33;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(slipCoefficients0TF, gridBagConstraints);

        slipCoefficients1TF.setColumns(4);
        slipCoefficients1TF.setToolTipText("slipFactors used for computing surface drag");
        slipCoefficients1TF.setMinimumSize(new java.awt.Dimension(40, 20));
        slipCoefficients1TF.setPreferredSize(new java.awt.Dimension(40, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.33;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(slipCoefficients1TF, gridBagConstraints);

        frictionCoefficientsLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        frictionCoefficientsLabel.setText("frictionCoefficients");
        frictionCoefficientsLabel.setToolTipText("frictionCoefficients used for computing surface drag");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 8, 3, 3);
        add(frictionCoefficientsLabel, gridBagConstraints);

        frictionCoefficients0TF.setColumns(4);
        frictionCoefficients0TF.setToolTipText("frictionCoefficients used for computing surface drag");
        frictionCoefficients0TF.setMinimumSize(new java.awt.Dimension(40, 20));
        frictionCoefficients0TF.setPreferredSize(new java.awt.Dimension(40, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.25;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(frictionCoefficients0TF, gridBagConstraints);

        frictionCoefficients1TF.setColumns(4);
        frictionCoefficients1TF.setToolTipText("frictionCoefficients used for computing surface drag");
        frictionCoefficients1TF.setMinimumSize(new java.awt.Dimension(40, 20));
        frictionCoefficients1TF.setPreferredSize(new java.awt.Dimension(40, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.25;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(frictionCoefficients1TF, gridBagConstraints);

        bounceLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        bounceLabel.setText("bounce");
        bounceLabel.setToolTipText("bounce indicates bounciness (0 = no bounce at all, 1 = maximum bounce)");
        bounceLabel.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 8, 3, 3);
        add(bounceLabel, gridBagConstraints);

        bounceTF.setColumns(4);
        bounceTF.setToolTipText("bounce indicates bounciness (0 = no bounce at all, 1 = maximum bounce)");
        bounceTF.setMinimumSize(new java.awt.Dimension(40, 20));
        bounceTF.setPreferredSize(new java.awt.Dimension(40, 20));
        bounceTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bounceTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.33;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(bounceTF, gridBagConstraints);

        surfaceSpeedLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        surfaceSpeedLabel.setText("surfaceSpeed");
        surfaceSpeedLabel.setToolTipText("speed vector for computing surface drag, if contact surfaces move independently of bodies");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 8, 3, 3);
        add(surfaceSpeedLabel, gridBagConstraints);

        surfaceSpeed0TF.setColumns(4);
        surfaceSpeed0TF.setToolTipText("speed vector for computing surface drag, if contact surfaces move independently of bodies");
        surfaceSpeed0TF.setMinimumSize(new java.awt.Dimension(40, 20));
        surfaceSpeed0TF.setPreferredSize(new java.awt.Dimension(40, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.33;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(surfaceSpeed0TF, gridBagConstraints);

        surfaceSpeed1TF.setColumns(4);
        surfaceSpeed1TF.setToolTipText("speed vector for computing surface drag, if contact surfaces move independently of bodies");
        surfaceSpeed1TF.setMinimumSize(new java.awt.Dimension(40, 20));
        surfaceSpeed1TF.setPreferredSize(new java.awt.Dimension(40, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.33;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(surfaceSpeed1TF, gridBagConstraints);

        enabledLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        enabledLabel.setText("enabled");
        enabledLabel.setToolTipText("enable/disable node operation");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 8, 3, 3);
        add(enabledLabel, gridBagConstraints);

        enabledCB.setToolTipText("enable/disable node operation");
        enabledCB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        add(enabledCB, gridBagConstraints);

        appliedParametersLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        appliedParametersLabel.setText("appliedParameters");
        appliedParametersLabel.setToolTipText("Global paramaters for collision system");
        appliedParametersLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 8, 3, 3);
        add(appliedParametersLabel, gridBagConstraints);

        minBounceSpeedLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        minBounceSpeedLabel.setText("minBounceSpeed");
        minBounceSpeedLabel.setToolTipText("minBounceSpeed m/s needed to bounce");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 8, 3, 3);
        add(minBounceSpeedLabel, gridBagConstraints);

        minBounceSpeedTF.setToolTipText("minBounceSpeed m/s needed to bounce");
        minBounceSpeedTF.setMinimumSize(new java.awt.Dimension(40, 20));
        minBounceSpeedTF.setPreferredSize(new java.awt.Dimension(40, 20));
        minBounceSpeedTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minBounceSpeedTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(minBounceSpeedTF, gridBagConstraints);

        softnessConstantForceMixLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        softnessConstantForceMixLabel.setText("softnessConstantForceMix");
        softnessConstantForceMixLabel.setToolTipText("applies a constant force value to make colliding surfaces appear to be somewhat soft");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 8, 3, 3);
        add(softnessConstantForceMixLabel, gridBagConstraints);

        softnessErrorCorrectionLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        softnessErrorCorrectionLabel.setText("softnessErrorCorrection");
        softnessErrorCorrectionLabel.setToolTipText("fraction of collision error fixed in a set of evaluations (0 = no error correction, 1 = all errors corrected in single step)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 8, 3, 3);
        add(softnessErrorCorrectionLabel, gridBagConstraints);

        softnessConstantForceMixTF.setToolTipText("applies a constant force value to make colliding surfaces appear to be somewhat soft");
        softnessConstantForceMixTF.setMinimumSize(new java.awt.Dimension(40, 20));
        softnessConstantForceMixTF.setPreferredSize(new java.awt.Dimension(40, 20));
        softnessConstantForceMixTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                softnessConstantForceMixTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(softnessConstantForceMixTF, gridBagConstraints);

        softnessErrorCorrectionTF.setToolTipText("fraction of collision error fixed in a set of evaluations (0 = no error correction, 1 = all errors corrected in single step)");
        softnessErrorCorrectionTF.setMinimumSize(new java.awt.Dimension(40, 20));
        softnessErrorCorrectionTF.setPreferredSize(new java.awt.Dimension(40, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(softnessErrorCorrectionTF, gridBagConstraints);

        depthLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        depthLabel.setText("depth");
        depthLabel.setToolTipText("depth indicates how deep the current intersection is along normal vector");
        depthLabel.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 8, 3, 3);
        add(depthLabel, gridBagConstraints);

        depthTF.setColumns(4);
        depthTF.setToolTipText("depth indicates how deep the current intersection is along normal vector");
        depthTF.setMinimumSize(new java.awt.Dimension(40, 20));
        depthTF.setPreferredSize(new java.awt.Dimension(40, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.33;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(depthTF, gridBagConstraints);

        frictionDirectionLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        frictionDirectionLabel.setText("frictionDirection");
        frictionDirectionLabel.setToolTipText("frictionDirection controls friction vector");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 8, 3, 3);
        add(frictionDirectionLabel, gridBagConstraints);

        position0TF.setColumns(4);
        position0TF.setToolTipText("position (x, y, z in meters) of exact location of collision");
        position0TF.setMinimumSize(new java.awt.Dimension(40, 20));
        position0TF.setPreferredSize(new java.awt.Dimension(40, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(position0TF, gridBagConstraints);

        position1TF.setColumns(4);
        position1TF.setToolTipText("position (x, y, z in meters) of exact location of collision");
        position1TF.setMinimumSize(new java.awt.Dimension(40, 20));
        position1TF.setPreferredSize(new java.awt.Dimension(40, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(position1TF, gridBagConstraints);

        position2TF.setColumns(4);
        position2TF.setToolTipText("position (x, y, z in meters) of exact location of collision");
        position2TF.setMinimumSize(new java.awt.Dimension(40, 20));
        position2TF.setPreferredSize(new java.awt.Dimension(40, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(position2TF, gridBagConstraints);

        positionLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        positionLabel.setText("position");
        positionLabel.setToolTipText("position (x, y, z in meters) of exact location of collision");
        positionLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 8, 3, 3);
        add(positionLabel, gridBagConstraints);

        frictionDirection0TF.setColumns(4);
        frictionDirection0TF.setToolTipText("frictionDirection controls friction vector");
        frictionDirection0TF.setMinimumSize(new java.awt.Dimension(40, 20));
        frictionDirection0TF.setPreferredSize(new java.awt.Dimension(40, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(frictionDirection0TF, gridBagConstraints);

        frictionDirection1TF.setColumns(4);
        frictionDirection1TF.setToolTipText("frictionDirection controls friction vector");
        frictionDirection1TF.setMinimumSize(new java.awt.Dimension(40, 20));
        frictionDirection1TF.setPreferredSize(new java.awt.Dimension(40, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.25;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(frictionDirection1TF, gridBagConstraints);

        frictionDirection2TF.setColumns(4);
        frictionDirection2TF.setToolTipText("frictionDirection controls friction vector");
        frictionDirection2TF.setMinimumSize(new java.awt.Dimension(40, 20));
        frictionDirection2TF.setPreferredSize(new java.awt.Dimension(40, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.25;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(frictionDirection2TF, gridBagConstraints);

        appliedParametersList.setListData(CONTACT_ATTR_APPLIEDPARAMETERS_CHOICES);
        appliedParametersList.setToolTipText("Global parameters for collision system");
        AppliedParametersScrollPane.setViewportView(appliedParametersList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(AppliedParametersScrollPane, gridBagConstraints);

        contactNormalLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        contactNormalLabel.setText("contactNormal");
        contactNormalLabel.setToolTipText("unit vector describing normal between two colliding bodies");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 8, 3, 3);
        add(contactNormalLabel, gridBagConstraints);

        contactNormal0TF.setColumns(4);
        contactNormal0TF.setToolTipText("unit vector describing normal between two colliding bodies");
        contactNormal0TF.setMinimumSize(new java.awt.Dimension(40, 20));
        contactNormal0TF.setPreferredSize(new java.awt.Dimension(40, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(contactNormal0TF, gridBagConstraints);

        contactNormal1TF.setColumns(4);
        contactNormal1TF.setToolTipText("unit vector describing normal between two colliding bodies");
        contactNormal1TF.setMinimumSize(new java.awt.Dimension(40, 20));
        contactNormal1TF.setPreferredSize(new java.awt.Dimension(40, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.25;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(contactNormal1TF, gridBagConstraints);

        contactNormal2TF.setColumns(4);
        contactNormal2TF.setToolTipText("unit vector describing normal between two colliding bodies");
        contactNormal2TF.setMinimumSize(new java.awt.Dimension(40, 20));
        contactNormal2TF.setPreferredSize(new java.awt.Dimension(40, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.25;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(contactNormal2TF, gridBagConstraints);

        nodeHintPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        nodeHintPanel.setLayout(new java.awt.GridBagLayout());

        hintLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        hintLabel.setText("<html><p align='center'><b>Contact</b> nodes are produced as output events <br /> when two collidable objects or spaces make contact.\n</p>  <br /><p align='center'>Hint: contains two <b>RigidBody</b> (containerField='body1,body2') and <br /> two <b>CollidableShape</b> or<b>CollidableOffset</b> nodes (containerField='geometry1,geometry2'). </p>");
        hintLabel.setToolTipText("close this panel to add children nodes");
        hintLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        nodeHintPanel.add(hintLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 3, 3, 3);
        add(nodeHintPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

private void minBounceSpeedTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minBounceSpeedTFActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_minBounceSpeedTFActionPerformed

private void softnessConstantForceMixTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_softnessConstantForceMixTFActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_softnessConstantForceMixTFActionPerformed

    private void bounceTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bounceTFActionPerformed
        // TODO test if negative, if so fix.  Repeat for other fields.
    }//GEN-LAST:event_bounceTFActionPerformed
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane AppliedParametersScrollPane;
    private javax.swing.JLabel appliedParametersLabel;
    private javax.swing.JList<String> appliedParametersList;
    private javax.swing.JLabel bounceLabel;
    private javax.swing.JTextField bounceTF;
    private javax.swing.JTextField contactNormal0TF;
    private javax.swing.JTextField contactNormal1TF;
    private javax.swing.JTextField contactNormal2TF;
    private javax.swing.JLabel contactNormalLabel;
    private org.web3d.x3d.palette.items.DEFUSEpanel dEFUSEpanel1;
    private javax.swing.JLabel depthLabel;
    private javax.swing.JTextField depthTF;
    private javax.swing.JCheckBox enabledCB;
    private javax.swing.JLabel enabledLabel;
    private javax.swing.JTextField frictionCoefficients0TF;
    private javax.swing.JTextField frictionCoefficients1TF;
    private javax.swing.JLabel frictionCoefficientsLabel;
    private javax.swing.JTextField frictionDirection0TF;
    private javax.swing.JTextField frictionDirection1TF;
    private javax.swing.JTextField frictionDirection2TF;
    private javax.swing.JLabel frictionDirectionLabel;
    private javax.swing.JLabel hintLabel;
    private javax.swing.JLabel minBounceSpeedLabel;
    private javax.swing.JTextField minBounceSpeedTF;
    private javax.swing.JPanel nodeHintPanel;
    private javax.swing.JTextField position0TF;
    private javax.swing.JTextField position1TF;
    private javax.swing.JTextField position2TF;
    private javax.swing.JLabel positionLabel;
    private javax.swing.JTextField slipCoefficients0TF;
    private javax.swing.JTextField slipCoefficients1TF;
    private javax.swing.JLabel slipCoefficientsLabel;
    private javax.swing.JLabel softnessConstantForceMixLabel;
    private javax.swing.JTextField softnessConstantForceMixTF;
    private javax.swing.JLabel softnessErrorCorrectionLabel;
    private javax.swing.JTextField softnessErrorCorrectionTF;
    private javax.swing.JTextField surfaceSpeed0TF;
    private javax.swing.JTextField surfaceSpeed1TF;
    private javax.swing.JLabel surfaceSpeedLabel;
    // End of variables declaration//GEN-END:variables

  @Override
  public String getNameKey()
  {
    return "NAME_X3D_CONTACT";
  }

  @Override
  public void unloadInput()
  {
    unLoadDEFUSE();
    
    contact.setEnabled(enabledCB.isSelected());
    
    List<String> oa = appliedParametersList.getSelectedValuesList(); // deprecated in JDK 1.7
    String[] sa = new String[oa.size()];
    for(int i=0;i<oa.size();i++)
      sa[i] = oa.get(i);
    contact.setAppliedParameters(sa);
    
    contact.setBounce(bounceTF.getText().trim());
    contact.setDepth(depthTF.getText().trim());
    contact.setMinBounceSpeed(minBounceSpeedTF.getText().trim());
    contact.setSoftnessConstantForceMix(softnessConstantForceMixTF.getText().trim());
    contact.setSoftnessErrorCorrection(softnessErrorCorrectionTF.getText().trim());
    
    contact.setContactNormal0(contactNormal0TF.getText().trim());
    contact.setContactNormal1(contactNormal1TF.getText().trim());
    contact.setContactNormal2(contactNormal2TF.getText().trim());
    contact.setFrictionCoefficients0(frictionCoefficients0TF.getText().trim());
    contact.setFrictionCoefficients1(frictionCoefficients1TF.getText().trim());
    contact.setFrictionDirection0(frictionDirection0TF.getText().trim());
    contact.setFrictionDirection1(frictionDirection1TF.getText().trim());
    contact.setFrictionDirection2(frictionDirection2TF.getText().trim());
    contact.setPosition0(position0TF.getText().trim());
    contact.setPosition1(position1TF.getText().trim());
    contact.setPosition2(position2TF.getText().trim());
    contact.setSlipFactors0(slipCoefficients0TF.getText().trim());
    contact.setSlipFactors1(slipCoefficients1TF.getText().trim());
    contact.setSurfaceSpeed0(surfaceSpeed0TF.getText().trim());
    contact.setSurfaceSpeed1(surfaceSpeed1TF.getText().trim());
  }   
}
