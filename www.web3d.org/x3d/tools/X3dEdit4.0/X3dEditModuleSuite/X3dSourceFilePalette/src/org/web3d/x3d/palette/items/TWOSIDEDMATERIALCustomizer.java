/*
Copyright (c) 1995-2021 held by the author(s) .  All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

 * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer
      in the documentation and/or other materials provided with the
      distribution.
 * Neither the names of the Naval Postgraduate School (NPS)
      Modeling Virtual Environments and Simulation (MOVES) Institute
      (http://www.nps.edu and https://MovesInstitute.nps.edu)
      nor the names of its contributors may be used to endorse or
      promote products derived from this software without specific
      prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
*/

package org.web3d.x3d.palette.items;

import javax.swing.JOptionPane;
import javax.swing.text.JTextComponent;
import org.openide.util.HelpCtx;
import org.web3d.x3d.palette.X3DPaletteUtilities;
import static org.web3d.x3d.types.X3DSchemaData.*;

/**
 *
 * @author  mike
 */
public class TWOSIDEDMATERIALCustomizer extends BaseCustomizer
{
  private TWOSIDEDMATERIAL twoSidedMaterial;

  private MATERIALCustomizer frontCustomizer;
  private MATERIALCustomizer  backCustomizer;

  private MATERIAL frontMaterial, backMaterial;

/**
 * TWOSIDEDMATERIALCustomizer.java
 * Created on Dec. 7, 2007, 10:09 AM
 *
 * MOVES Institute
 * Naval Postgraduate School, Monterey, CA, USA
 * www.nps.edu
 *
 * @author Mike Bailey
 * @version $Id$
 */
  public TWOSIDEDMATERIALCustomizer(TWOSIDEDMATERIAL twoSidedMaterial, JTextComponent target)
  {
    super(twoSidedMaterial);
    this.twoSidedMaterial = twoSidedMaterial;

    HelpCtx.setHelpIDString(TWOSIDEDMATERIALCustomizer.this, "TWOSIDEDMATERIAL_ELEM_HELPID");

    initComponents();

    separateCB.setSelected(this.twoSidedMaterial.isSeparateBackColor());

    // Now that we've got a twoSidedMaterial component, set up the x3d element objects
    frontMaterial = twoSidedMaterial.getFrontMaterial();
    frontMaterial.setUSEVector(X3DPaletteUtilities.getUSEvector(target,frontMaterial.getElementName()));
    frontCustomizer = new MATERIALCustomizer(frontMaterial,target);
//    frontCustomizer.initializePanelContent();
    frontPanel.add(frontCustomizer.extractContent()); // get non-defuse content

    backMaterial = twoSidedMaterial.getBackMaterial();
    backMaterial.setUSEVector(X3DPaletteUtilities.getUSEvector(target,backMaterial.getElementName())); // TODO unneeded?
    backCustomizer = new MATERIALCustomizer(backMaterial,target);
//    backCustomizer.initializePanelContent();
    backPanel.add(backCustomizer.extractContent()); // get non-defuse content
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    dEFUSEpanel1 = getDEFUSEpanel();
    separateCB = new javax.swing.JCheckBox();
    jTabbedPane1 = new javax.swing.JTabbedPane();
    frontPanel = new javax.swing.JPanel();
    backPanel = new javax.swing.JPanel();

    separateCB.setText(org.openide.util.NbBundle.getMessage(TWOSIDEDMATERIALCustomizer.class, "TWOSIDEDMATERIALCustomizer.separateCB.text")); // NOI18N
    separateCB.setToolTipText(org.openide.util.NbBundle.getMessage(TWOSIDEDMATERIALCustomizer.class, "TWOSIDEDMATERIALCustomizer.separateCB.toolTipText")); // NOI18N

    frontPanel.setLayout(new java.awt.BorderLayout());
    jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(TWOSIDEDMATERIALCustomizer.class, "TWOSIDEDMATERIALCustomizer.frontPanel.TabConstraints.tabTitle"), frontPanel); // NOI18N

    backPanel.setLayout(new java.awt.BorderLayout());
    jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(TWOSIDEDMATERIALCustomizer.class, "TWOSIDEDMATERIALCustomizer.backPanel.TabConstraints.tabTitle"), backPanel); // NOI18N

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(dEFUSEpanel1, javax.swing.GroupLayout.Alignment.CENTER, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.CENTER, javax.swing.GroupLayout.DEFAULT_SIZE, 1109, Short.MAX_VALUE)))
          .addGroup(layout.createSequentialGroup()
            .addGap(44, 44, 44)
            .addComponent(separateCB)))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addGroup(layout.createSequentialGroup()
            .addComponent(dEFUSEpanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(27, 27, 27))
          .addGroup(layout.createSequentialGroup()
            .addComponent(separateCB)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
        .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 645, Short.MAX_VALUE)
        .addContainerGap())
    );
  }// </editor-fold>//GEN-END:initComponents


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JPanel backPanel;
  private org.web3d.x3d.palette.items.DEFUSEpanel dEFUSEpanel1;
  private javax.swing.JPanel frontPanel;
  private javax.swing.JTabbedPane jTabbedPane1;
  private javax.swing.JCheckBox separateCB;
  // End of variables declaration//GEN-END:variables

  @Override
  public String getNameKey()
  {
    return "NAME_X3D_TWOSIDEDMATERIAL";
  }

  @Override
  public void unloadInput() throws IllegalArgumentException
  {
    String frontContent = frontMaterial.getContent();
    String  backContent =  backMaterial.getContent();
    if ((frontContent + backContent).length() > 0)
    {
         // concatenate contained comments, also clean up intermediate blank line if two comments present
         String combinedContent = (frontContent + backContent).replace("\t\t\n\t\t", "\t\t");
         twoSidedMaterial.setContent (combinedContent);
    }
    else twoSidedMaterial.setContent (""); // reset

    unLoadDEFUSE();

    frontCustomizer.unloadInput();
    backCustomizer.unloadInput();
    frontMaterial = frontCustomizer.getMATERIAL();
    backMaterial  =  backCustomizer.getMATERIAL();
    twoSidedMaterial.setFrontMaterial(frontMaterial);
    twoSidedMaterial.setBackMaterial(backMaterial);

    if (!separateCB.isSelected() &&
        (!backMaterial.getDiffuseColor().equals (MATERIAL_ATTR_DIFFUSECOLOR_DFLT)  ||
         !backMaterial.getEmissiveColor().equals(MATERIAL_ATTR_EMISSIVECOLOR_DFLT) ||
         !backMaterial.getSpecularColor().equals(MATERIAL_ATTR_SPECULARCOLOR_DFLT) ||
         !backMaterial.getAmbientIntensity().equals(MATERIAL_ATTR_AMBIENTINTENSITY_DFLT) ||
         !backMaterial.getShininess().equals(MATERIAL_ATTR_SHININESS_DFLT) ||
         !backMaterial.getTransparency().equals(MATERIAL_ATTR_TRANSPARENCY_DFLT)))
    {
        int ret = JOptionPane.showConfirmDialog(this, "set separateBackColor='true' to activate back Material?", "Confirm...", JOptionPane.YES_NO_OPTION);
        if (ret == JOptionPane.YES_OPTION)
        {
             separateCB.setSelected(true);
        }
    }
    twoSidedMaterial.setSeparateBackColor(separateCB.isSelected());
  }

}
