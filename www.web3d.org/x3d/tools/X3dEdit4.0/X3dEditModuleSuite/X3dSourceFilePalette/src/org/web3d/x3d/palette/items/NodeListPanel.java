/*
Copyright (c) 1995-2021 held by the author(s) .  All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

 * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer
      in the documentation and/or other materials provided with the
      distribution.
 * Neither the names of the Naval Postgraduate School (NPS)
      Modeling Virtual Environments and Simulation (MOVES) Institute
      (http://www.nps.edu and https://MovesInstitute.nps.edu)
      nor the names of its contributors may be used to endorse or
      promote products derived from this software without specific
      prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * NodeListPanel.java
 *
 * Created on July 4, 2008, 8:15 AM
 */
package org.web3d.x3d.palette.items;

import javax.swing.text.Position.Bias;

/**
 *
 * @author  mike
 */
public class NodeListPanel extends javax.swing.JPanel
{
  /** Creates new form NodeListPanel */
  public NodeListPanel()
  {
    initComponents();
    nodeList.setSelectedIndex(0);
  }

    /**
     * Get name of selected node, returns null if no selection
     * @return name of selected node
     */
  public String getSelectedName()
  {
    return nodeList.getSelectedValue();
  }

    /**
     * Set selected node by name
     * @param initialName is name of interest
     */
    public void setSelectedName(String initialName)
  {
    nodeList.setSelectedValue(initialName, true);
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        nodeList = new javax.swing.JList<>();
        searchLabel = new javax.swing.JLabel();
        searchTextField = new javax.swing.JTextField();
        clearButton = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(150, 200));
        setPreferredSize(new java.awt.Dimension(220, 600));
        setLayout(new java.awt.GridBagLayout());

        nodeList.setModel(NodeListHelper.getNodeListModel());
        nodeList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        nodeList.setToolTipText(org.openide.util.NbBundle.getMessage(NodeListPanel.class, "NodeListPanel.nodeList.toolTipText")); // NOI18N
        jScrollPane1.setViewportView(nodeList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 223;
        gridBagConstraints.ipady = 471;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 10, 0, 10);
        add(jScrollPane1, gridBagConstraints);

        searchLabel.setText(org.openide.util.NbBundle.getMessage(NodeListPanel.class, "NodeListPanel.searchLabel.text")); // NOI18N
        searchLabel.setToolTipText(org.openide.util.NbBundle.getMessage(NodeListPanel.class, "NodeListPanel.searchLabel.toolTipText")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(3, 10, 3, 3);
        add(searchLabel, gridBagConstraints);

        searchTextField.setText(org.openide.util.NbBundle.getMessage(NodeListPanel.class, "NodeListPanel.searchTextField.text")); // NOI18N
        searchTextField.setToolTipText(org.openide.util.NbBundle.getMessage(NodeListPanel.class, "NodeListPanel.searchTextField.toolTipText")); // NOI18N
        searchTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTextFieldActionPerformed(evt);
            }
        });
        searchTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchTextFieldKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(searchTextField, gridBagConstraints);

        clearButton.setText(org.openide.util.NbBundle.getMessage(NodeListPanel.class, "NodeListPanel.clearButton.text")); // NOI18N
        clearButton.setToolTipText(org.openide.util.NbBundle.getMessage(NodeListPanel.class, "NodeListPanel.clearButton.toolTipText")); // NOI18N
        clearButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        clearButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
        clearButton.setMaximumSize(new java.awt.Dimension(20, 20));
        clearButton.setMinimumSize(new java.awt.Dimension(20, 20));
        clearButton.setPreferredSize(new java.awt.Dimension(20, 20));
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 10);
        add(clearButton, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void searchTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTextFieldKeyReleased
        searchNodeList ();
    }//GEN-LAST:event_searchTextFieldKeyReleased

    private void searchTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchTextFieldActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        searchTextField.setText("");
        nodeList.setSelectedIndex(1);
        nodeList.ensureIndexIsVisible(1);
    }//GEN-LAST:event_clearButtonActionPerformed

    private void searchNodeList ()
    {
        String searchTerm;
        searchTerm = searchTextField.getText(); // do not trim
        if (searchTerm.trim().isEmpty())
            return;
        int      index = -2;
        int priorIndex = -2;
        while (!searchTerm.trim().isEmpty() || searchTerm.endsWith(" ")) // append space character for exact match
        {
            index = nodeList.getNextMatch(searchTerm, 0, Bias.Forward);
            if (priorIndex == index)
                break;
            priorIndex = index; // continue
        }
        if (index > -1)
        {
            nodeList.setSelectedIndex(index);
            nodeList.ensureIndexIsVisible(index);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> nodeList;
    private javax.swing.JLabel searchLabel;
    private javax.swing.JTextField searchTextField;
    // End of variables declaration//GEN-END:variables
}
