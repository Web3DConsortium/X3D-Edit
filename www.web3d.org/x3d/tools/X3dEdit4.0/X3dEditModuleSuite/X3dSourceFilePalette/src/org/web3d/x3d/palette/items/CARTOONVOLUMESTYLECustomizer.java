/*
Copyright (c) 1995-2021 held by the author(s) .  All rights reserved.
 
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
 
 * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer
      in the documentation and/or other materials provided with the
      distribution.
 * Neither the names of the Naval Postgraduate School (NPS)
      Modeling Virtual Environments and Simulation (MOVES) Institute
      (http://www.nps.edu and https://MovesInstitute.nps.edu)
      nor the names of its contributors may be used to endorse or
      promote products derived from this software without specific
      prior written permission.
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
 */

package org.web3d.x3d.palette.items;

import java.awt.Color;
import javax.swing.text.JTextComponent;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.HelpCtx;
import org.web3d.x3d.types.X3DPrimitiveTypes.SFColor;
import org.web3d.x3d.types.X3DPrimitiveTypes.SFDouble;
import org.web3d.x3d.types.X3DPrimitiveTypes.SFInt32;

/**
 * CARTOONVOLUMESTYLECustomizer.java
 * Created on 19 November 2011
 *
 * MOVES Institute
 * Naval Postgraduate School, Monterey, CA, USA
 * www.nps.edu
 *
 * @author Mike Bailey and Don Brutzman
 * @version $Id$
 */
public class CARTOONVOLUMESTYLECustomizer extends BaseCustomizer
{
  private CARTOONVOLUMESTYLE cartoonVolumeStyle;
  private JTextComponent target;
  
  /** Creates new form CARTOONVOLUMESTYLECustomizer
   * @param cartoonVolumeStyle
   * @param target  
   */
  public CARTOONVOLUMESTYLECustomizer(CARTOONVOLUMESTYLE cartoonVolumeStyle, JTextComponent target)
  {
    super(cartoonVolumeStyle);
    this.cartoonVolumeStyle = cartoonVolumeStyle;
    this.target = target;
    
    HelpCtx.setHelpIDString(this, "CARTOONVOLUMESTYLE_ELEM_HELPID");
    
    initComponents();
    
            enabledCB.setSelected(cartoonVolumeStyle.isEnabled());
         colorStepsTF.setText(cartoonVolumeStyle.getColorSteps());
    
      orthogonalColorRedTF.setText(cartoonVolumeStyle.getOrthogonalColorRed());
    orthogonalColorGreenTF.setText(cartoonVolumeStyle.getOrthogonalColorGreen());
     orthogonalColorBlueTF.setText(cartoonVolumeStyle.getOrthogonalColorBlue());
    orthogonalColorChooser.setColor(
             (new SFColor(orthogonalColorRedTF.getText(), 
                          orthogonalColorGreenTF.getText(),
                          orthogonalColorBlueTF.getText())).getColor());
    orthogonalColorAlphaTF.setText(cartoonVolumeStyle.getOrthogonalColorAlpha());
    orthogonalColorAlphaSliderUpdate ();
    
      parallelColorRedTF.setText(cartoonVolumeStyle.getParallelColorRed());
    parallelColorGreenTF.setText(cartoonVolumeStyle.getParallelColorGreen());
     parallelColorBlueTF.setText(cartoonVolumeStyle.getParallelColorBlue());
    parallelColorChooser.setColor(
             (new SFColor(parallelColorRedTF.getText(), 
                          parallelColorGreenTF.getText(),
                          parallelColorBlueTF.getText())).getColor());
    parallelColorAlphaTF.setText(cartoonVolumeStyle.getParallelColorAlpha());
    parallelColorAlphaSliderUpdate ();
  }
 
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        dEFUSEpanel1 = getDEFUSEpanel();
        enabledLabel = new javax.swing.JLabel();
        enabledCB = new javax.swing.JCheckBox();
        colorStepsLabel = new javax.swing.JLabel();
        colorStepsTF = new javax.swing.JTextField();
        orthogonalColorLabel = new javax.swing.JLabel();
        orthogonalColorRedTF = new javax.swing.JFormattedTextField();
        orthogonalColorGreenTF = new javax.swing.JFormattedTextField();
        orthogonalColorBlueTF = new javax.swing.JFormattedTextField();
        orthogonalColorChooser = new net.java.dev.colorchooser.ColorChooser();
        orthogonalColorAlphaTF = new javax.swing.JFormattedTextField();
        orthogonalColorAlphaSlider = new javax.swing.JSlider();
        parallelColorLabel = new javax.swing.JLabel();
        parallelColorRedTF = new javax.swing.JFormattedTextField();
        parallelColorGreenTF = new javax.swing.JFormattedTextField();
        parallelColorBlueTF = new javax.swing.JFormattedTextField();
        parallelColorChooser = new net.java.dev.colorchooser.ColorChooser();
        parallelColorAlphaTF = new javax.swing.JFormattedTextField();
        parallelColorAlphaSlider = new javax.swing.JSlider();
        nodeHintPanel = new javax.swing.JPanel();
        hintLabel1 = new javax.swing.JLabel();

        setToolTipText("");
        setLayout(new java.awt.GridBagLayout());

        dEFUSEpanel1.setMinimumSize(new java.awt.Dimension(198, 77));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(dEFUSEpanel1, gridBagConstraints);

        enabledLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        enabledLabel.setText("enabled");
        enabledLabel.setToolTipText("Enables/disables node operation");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(enabledLabel, gridBagConstraints);

        enabledCB.setToolTipText("Enables/disables node operation");
        enabledCB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(enabledCB, gridBagConstraints);

        colorStepsLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        colorStepsLabel.setText("colorSteps");
        colorStepsLabel.setToolTipText("Number of distinct colors taken from interpolated colors and used to render the object, legal values [1..64]");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(colorStepsLabel, gridBagConstraints);

        colorStepsTF.setToolTipText("Number of distinct colors taken from interpolated colors and used to render the object, legal values [1..64]");
        colorStepsTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorStepsTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(colorStepsTF, gridBagConstraints);

        orthogonalColorLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        orthogonalColorLabel.setText("orthogonalColor");
        orthogonalColorLabel.setToolTipText("orthogonalColor is used for surface normals that are orthogonal (perpendicular) to viewer's current location");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(orthogonalColorLabel, gridBagConstraints);

        orthogonalColorRedTF.setColumns(3);
        orthogonalColorRedTF.setText(org.openide.util.NbBundle.getMessage(CARTOONVOLUMESTYLECustomizer.class, "NewJPanel.diffuseColorRedTF.text")); // NOI18N
        orthogonalColorRedTF.setToolTipText(org.openide.util.NbBundle.getMessage(CARTOONVOLUMESTYLECustomizer.class, "MATERIALCustomizer.diffuseColorRedTF.toolTipText")); // NOI18N
        orthogonalColorRedTF.setMinimumSize(new java.awt.Dimension(6, 15));
        orthogonalColorRedTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orthogonalColorRedTFActionPerformed(evt);
            }
        });
        orthogonalColorRedTF.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                orthogonalColorRedTFPropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(orthogonalColorRedTF, gridBagConstraints);

        orthogonalColorGreenTF.setColumns(3);
        orthogonalColorGreenTF.setText(org.openide.util.NbBundle.getMessage(CARTOONVOLUMESTYLECustomizer.class, "NewJPanel.diffuseColorGreenTF.text")); // NOI18N
        orthogonalColorGreenTF.setToolTipText(org.openide.util.NbBundle.getMessage(CARTOONVOLUMESTYLECustomizer.class, "MATERIALCustomizer.diffuseColorGreenTF.toolTipText")); // NOI18N
        orthogonalColorGreenTF.setMinimumSize(new java.awt.Dimension(6, 15));
        orthogonalColorGreenTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orthogonalColorGreenTFActionPerformed(evt);
            }
        });
        orthogonalColorGreenTF.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                orthogonalColorGreenTFPropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(orthogonalColorGreenTF, gridBagConstraints);

        orthogonalColorBlueTF.setColumns(3);
        orthogonalColorBlueTF.setText(org.openide.util.NbBundle.getMessage(CARTOONVOLUMESTYLECustomizer.class, "NewJPanel.diffuseColorBlueTF.text")); // NOI18N
        orthogonalColorBlueTF.setToolTipText(org.openide.util.NbBundle.getMessage(CARTOONVOLUMESTYLECustomizer.class, "MATERIALCustomizer.diffuseColorBlueTF.toolTipText")); // NOI18N
        orthogonalColorBlueTF.setMinimumSize(new java.awt.Dimension(6, 15));
        orthogonalColorBlueTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orthogonalColorBlueTFActionPerformed(evt);
            }
        });
        orthogonalColorBlueTF.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                orthogonalColorBlueTFPropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(orthogonalColorBlueTF, gridBagConstraints);

        orthogonalColorChooser.setMinimumSize(new java.awt.Dimension(15, 15));
        orthogonalColorChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orthogonalColorChooserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout orthogonalColorChooserLayout = new javax.swing.GroupLayout(orthogonalColorChooser);
        orthogonalColorChooser.setLayout(orthogonalColorChooserLayout);
        orthogonalColorChooserLayout.setHorizontalGroup(
            orthogonalColorChooserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 22, Short.MAX_VALUE)
        );
        orthogonalColorChooserLayout.setVerticalGroup(
            orthogonalColorChooserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 23, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(orthogonalColorChooser, gridBagConstraints);

        orthogonalColorAlphaTF.setColumns(3);
        orthogonalColorAlphaTF.setText(org.openide.util.NbBundle.getMessage(CARTOONVOLUMESTYLECustomizer.class, "NewJPanel.transparencyTF.text")); // NOI18N
        orthogonalColorAlphaTF.setToolTipText("alpha opaqueness value [0..1]");
        orthogonalColorAlphaTF.setMinimumSize(new java.awt.Dimension(6, 15));
        orthogonalColorAlphaTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orthogonalColorAlphaTFActionPerformed(evt);
            }
        });
        orthogonalColorAlphaTF.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                orthogonalColorAlphaTFPropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(orthogonalColorAlphaTF, gridBagConstraints);

        orthogonalColorAlphaSlider.setToolTipText("alpha opaqueness value [0..1]");
        orthogonalColorAlphaSlider.setMaximumSize(new java.awt.Dimension(100, 25));
        orthogonalColorAlphaSlider.setPreferredSize(new java.awt.Dimension(100, 25));
        orthogonalColorAlphaSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                orthogonalColorAlphaSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.67;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(orthogonalColorAlphaSlider, gridBagConstraints);

        parallelColorLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        parallelColorLabel.setText("parallelColor");
        parallelColorLabel.setToolTipText("parallelColor is used for surface normals that are orthogonal to viewer's current location.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(parallelColorLabel, gridBagConstraints);

        parallelColorRedTF.setColumns(3);
        parallelColorRedTF.setText(org.openide.util.NbBundle.getMessage(CARTOONVOLUMESTYLECustomizer.class, "NewJPanel.diffuseColorRedTF.text")); // NOI18N
        parallelColorRedTF.setToolTipText(org.openide.util.NbBundle.getMessage(CARTOONVOLUMESTYLECustomizer.class, "MATERIALCustomizer.diffuseColorRedTF.toolTipText")); // NOI18N
        parallelColorRedTF.setMinimumSize(new java.awt.Dimension(6, 15));
        parallelColorRedTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                parallelColorRedTFActionPerformed(evt);
            }
        });
        parallelColorRedTF.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                parallelColorRedTFPropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(parallelColorRedTF, gridBagConstraints);

        parallelColorGreenTF.setColumns(3);
        parallelColorGreenTF.setText(org.openide.util.NbBundle.getMessage(CARTOONVOLUMESTYLECustomizer.class, "NewJPanel.diffuseColorGreenTF.text")); // NOI18N
        parallelColorGreenTF.setToolTipText(org.openide.util.NbBundle.getMessage(CARTOONVOLUMESTYLECustomizer.class, "MATERIALCustomizer.diffuseColorGreenTF.toolTipText")); // NOI18N
        parallelColorGreenTF.setMinimumSize(new java.awt.Dimension(6, 15));
        parallelColorGreenTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                parallelColorGreenTFActionPerformed(evt);
            }
        });
        parallelColorGreenTF.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                parallelColorGreenTFPropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(parallelColorGreenTF, gridBagConstraints);

        parallelColorBlueTF.setColumns(3);
        parallelColorBlueTF.setText(org.openide.util.NbBundle.getMessage(CARTOONVOLUMESTYLECustomizer.class, "NewJPanel.diffuseColorBlueTF.text")); // NOI18N
        parallelColorBlueTF.setToolTipText(org.openide.util.NbBundle.getMessage(CARTOONVOLUMESTYLECustomizer.class, "MATERIALCustomizer.diffuseColorBlueTF.toolTipText")); // NOI18N
        parallelColorBlueTF.setMinimumSize(new java.awt.Dimension(6, 15));
        parallelColorBlueTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                parallelColorBlueTFActionPerformed(evt);
            }
        });
        parallelColorBlueTF.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                parallelColorBlueTFPropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(parallelColorBlueTF, gridBagConstraints);

        parallelColorChooser.setMinimumSize(new java.awt.Dimension(15, 15));
        parallelColorChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                parallelColorChooserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout parallelColorChooserLayout = new javax.swing.GroupLayout(parallelColorChooser);
        parallelColorChooser.setLayout(parallelColorChooserLayout);
        parallelColorChooserLayout.setHorizontalGroup(
            parallelColorChooserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 22, Short.MAX_VALUE)
        );
        parallelColorChooserLayout.setVerticalGroup(
            parallelColorChooserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 23, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(parallelColorChooser, gridBagConstraints);

        parallelColorAlphaTF.setColumns(3);
        parallelColorAlphaTF.setText(org.openide.util.NbBundle.getMessage(CARTOONVOLUMESTYLECustomizer.class, "NewJPanel.transparencyTF.text")); // NOI18N
        parallelColorAlphaTF.setToolTipText("alpha opaqueness value [0..1]");
        parallelColorAlphaTF.setMinimumSize(new java.awt.Dimension(6, 15));
        parallelColorAlphaTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                parallelColorAlphaTFActionPerformed(evt);
            }
        });
        parallelColorAlphaTF.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                parallelColorAlphaTFPropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(parallelColorAlphaTF, gridBagConstraints);

        parallelColorAlphaSlider.setToolTipText("alpha opaqueness value [0..1]");
        parallelColorAlphaSlider.setMaximumSize(new java.awt.Dimension(100, 25));
        parallelColorAlphaSlider.setPreferredSize(new java.awt.Dimension(100, 25));
        parallelColorAlphaSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                parallelColorAlphaSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.67;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(parallelColorAlphaSlider, gridBagConstraints);

        nodeHintPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        nodeHintPanel.setLayout(new java.awt.GridBagLayout());

        hintLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        hintLabel1.setText("<html><p align='center'><b>CartoonVolumeStyle</b> generates non-photorealistic rendering of associated volumetric data,<br />and contains a 3D texture node defining the surfaceNormals data.</p>");
        hintLabel1.setToolTipText("multiple style nodes can be applied to volume data");
        hintLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        nodeHintPanel.add(hintLabel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(nodeHintPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
  private void orthogonalColorChooserUpdate()
  {
    orthogonalColorChooser.setColor(
             (new SFColor(orthogonalColorRedTF.getText(), 
                          orthogonalColorGreenTF.getText(),
                          orthogonalColorBlueTF.getText())).getColor());
  }
  private void parallelColorChooserUpdate()
  {
    parallelColorChooser.setColor(
             (new SFColor(parallelColorRedTF.getText(), 
                          parallelColorGreenTF.getText(),
                          parallelColorBlueTF.getText())).getColor());
  }
    private void colorStepsTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorStepsTFActionPerformed
        int colorSteps = (new SFInt32(colorStepsTF.getText())).getValue();
        if ((colorSteps < 0) || (colorSteps > 64))
        {
            String warningMessage = "Illegal colorSteps=" + colorSteps + ", value must be in range [1..64], reset to default colorSteps=4";
            System.out.println(warningMessage);
            NotifyDescriptor descriptor = new NotifyDescriptor.Message(
                    warningMessage, NotifyDescriptor.WARNING_MESSAGE);
            DialogDisplayer.getDefault().notify(descriptor);
            colorSteps = 4;
            colorStepsTF.setText(Integer.toString(colorSteps));
        }
    }//GEN-LAST:event_colorStepsTFActionPerformed

    private void orthogonalColorRedTFPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_orthogonalColorRedTFPropertyChange
        orthogonalColorChooserUpdate();
    }//GEN-LAST:event_orthogonalColorRedTFPropertyChange

    private void orthogonalColorGreenTFPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_orthogonalColorGreenTFPropertyChange
        orthogonalColorChooserUpdate();
    }//GEN-LAST:event_orthogonalColorGreenTFPropertyChange

    private void orthogonalColorBlueTFPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_orthogonalColorBlueTFPropertyChange
        orthogonalColorChooserUpdate();
    }//GEN-LAST:event_orthogonalColorBlueTFPropertyChange

    private void orthogonalColorAlphaTFPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_orthogonalColorAlphaTFPropertyChange
        if (!(evt.getPropertyName().equals("value"))) { // || evt.getPropertyName().equals("editValid"))) {
            return;
        }
        orthogonalColorAlphaSliderUpdate ();
    }//GEN-LAST:event_orthogonalColorAlphaTFPropertyChange
    private void orthogonalColorAlphaSliderUpdate ()
    {
        double alpha = (new SFDouble(orthogonalColorAlphaTF.getText()).getValue());
        if ((alpha < 0.0) || (alpha > 1.0))
        {
            String warningMessage = "Illegal orthogonalColor alpha=" + alpha + ", opaqueness value must be in range [0..1], reset to 1.0";
            System.out.println(warningMessage);
            NotifyDescriptor descriptor = new NotifyDescriptor.Message(
                    warningMessage, NotifyDescriptor.WARNING_MESSAGE);
            DialogDisplayer.getDefault().notify(descriptor);
            alpha = 1.0;
        }
        orthogonalColorAlphaSlider.setValue((int)(alpha*100.0));
    }    
    private void parallelColorAlphaSliderUpdate ()
    {
        double alpha = (new SFDouble(parallelColorAlphaTF.getText()).getValue());
        if ((alpha < 0.0) || (alpha > 1.0))
        {
            String warningMessage = "Illegal parallelColor alpha=" + alpha + ", opaqueness value must be in range [0..1], reset to 1.0";
            System.out.println(warningMessage);
            NotifyDescriptor descriptor = new NotifyDescriptor.Message(
                    warningMessage, NotifyDescriptor.WARNING_MESSAGE);
            DialogDisplayer.getDefault().notify(descriptor);
            alpha = 1.0;
        }
        parallelColorAlphaSlider.setValue((int)(alpha*100.0));
    }
    private void orthogonalColorAlphaSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_orthogonalColorAlphaSliderStateChanged
        int value = orthogonalColorAlphaSlider.getValue();
        orthogonalColorAlphaTF.setValue(Float.toString((float) value / 100.0f));
    }//GEN-LAST:event_orthogonalColorAlphaSliderStateChanged

    private void orthogonalColorChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orthogonalColorChooserActionPerformed
       Color c = orthogonalColorChooser.getColor();
         orthogonalColorRedTF.setValue(Float.toString((float)c.getRed()   / 255.0f));
       orthogonalColorGreenTF.setValue(Float.toString((float)c.getGreen() / 255.0f));
        orthogonalColorBlueTF.setValue(Float.toString((float)c.getBlue()  / 255.0f));
    }//GEN-LAST:event_orthogonalColorChooserActionPerformed

    private void parallelColorRedTFPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_parallelColorRedTFPropertyChange
        parallelColorChooserUpdate();
    }//GEN-LAST:event_parallelColorRedTFPropertyChange

    private void parallelColorGreenTFPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_parallelColorGreenTFPropertyChange
        parallelColorChooserUpdate();
    }//GEN-LAST:event_parallelColorGreenTFPropertyChange

    private void parallelColorBlueTFPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_parallelColorBlueTFPropertyChange
        parallelColorChooserUpdate();
    }//GEN-LAST:event_parallelColorBlueTFPropertyChange

    private void parallelColorChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_parallelColorChooserActionPerformed
       Color c = parallelColorChooser.getColor();
         parallelColorRedTF.setValue(Float.toString((float)c.getRed()   / 255.0f));
       parallelColorGreenTF.setValue(Float.toString((float)c.getGreen() / 255.0f));
        parallelColorBlueTF.setValue(Float.toString((float)c.getBlue()  / 255.0f));
    }//GEN-LAST:event_parallelColorChooserActionPerformed

    private void parallelColorAlphaTFPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_parallelColorAlphaTFPropertyChange
        if (!(evt.getPropertyName().equals("value"))) 
        {
            return;
        }
        parallelColorAlphaSliderUpdate ();
    }//GEN-LAST:event_parallelColorAlphaTFPropertyChange

    private void parallelColorAlphaSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_parallelColorAlphaSliderStateChanged
        int value = parallelColorAlphaSlider.getValue();
        parallelColorAlphaTF.setValue((float) value / 100.0);
    }//GEN-LAST:event_parallelColorAlphaSliderStateChanged

    private void orthogonalColorRedTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orthogonalColorRedTFActionPerformed
        orthogonalColorChooserUpdate();
    }//GEN-LAST:event_orthogonalColorRedTFActionPerformed

    private void orthogonalColorGreenTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orthogonalColorGreenTFActionPerformed
        orthogonalColorChooserUpdate();
    }//GEN-LAST:event_orthogonalColorGreenTFActionPerformed

    private void orthogonalColorBlueTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orthogonalColorBlueTFActionPerformed
        orthogonalColorChooserUpdate();
    }//GEN-LAST:event_orthogonalColorBlueTFActionPerformed

    private void orthogonalColorAlphaTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orthogonalColorAlphaTFActionPerformed
        orthogonalColorAlphaSliderUpdate();
    }//GEN-LAST:event_orthogonalColorAlphaTFActionPerformed

    private void parallelColorRedTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_parallelColorRedTFActionPerformed
        parallelColorChooserUpdate();
    }//GEN-LAST:event_parallelColorRedTFActionPerformed

    private void parallelColorGreenTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_parallelColorGreenTFActionPerformed
        parallelColorChooserUpdate();
    }//GEN-LAST:event_parallelColorGreenTFActionPerformed

    private void parallelColorBlueTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_parallelColorBlueTFActionPerformed
        parallelColorChooserUpdate();
    }//GEN-LAST:event_parallelColorBlueTFActionPerformed

    private void parallelColorAlphaTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_parallelColorAlphaTFActionPerformed
        parallelColorAlphaSliderUpdate();
    }//GEN-LAST:event_parallelColorAlphaTFActionPerformed
  
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel colorStepsLabel;
    private javax.swing.JTextField colorStepsTF;
    private org.web3d.x3d.palette.items.DEFUSEpanel dEFUSEpanel1;
    private javax.swing.JCheckBox enabledCB;
    private javax.swing.JLabel enabledLabel;
    private javax.swing.JLabel hintLabel1;
    private javax.swing.JPanel nodeHintPanel;
    private javax.swing.JSlider orthogonalColorAlphaSlider;
    private javax.swing.JFormattedTextField orthogonalColorAlphaTF;
    private javax.swing.JFormattedTextField orthogonalColorBlueTF;
    private net.java.dev.colorchooser.ColorChooser orthogonalColorChooser;
    private javax.swing.JFormattedTextField orthogonalColorGreenTF;
    private javax.swing.JLabel orthogonalColorLabel;
    private javax.swing.JFormattedTextField orthogonalColorRedTF;
    private javax.swing.JSlider parallelColorAlphaSlider;
    private javax.swing.JFormattedTextField parallelColorAlphaTF;
    private javax.swing.JFormattedTextField parallelColorBlueTF;
    private net.java.dev.colorchooser.ColorChooser parallelColorChooser;
    private javax.swing.JFormattedTextField parallelColorGreenTF;
    private javax.swing.JLabel parallelColorLabel;
    private javax.swing.JFormattedTextField parallelColorRedTF;
    // End of variables declaration//GEN-END:variables

  @Override
  public String getNameKey()
  {
    return "NAME_X3D_CARTOONVOLUMESTYLE";
  }

  @Override
  public void unloadInput()
  {
    unLoadDEFUSE();
    
    cartoonVolumeStyle.setEnabled(enabledCB.isSelected());
    cartoonVolumeStyle.setColorSteps(colorStepsTF.getText().trim());
    cartoonVolumeStyle.setOrthogonalColor(
              orthogonalColorRedTF.getText().trim() + " " +
            orthogonalColorGreenTF.getText().trim() + " " +
             orthogonalColorBlueTF.getText().trim() + " " +
            orthogonalColorAlphaTF.getText().trim() + " ");
    cartoonVolumeStyle.setParallelColor(
              parallelColorRedTF.getText().trim() + " " +
            parallelColorGreenTF.getText().trim() + " " +
             parallelColorBlueTF.getText().trim() + " " +
            parallelColorAlphaTF.getText().trim() + " ");
  }   
}
