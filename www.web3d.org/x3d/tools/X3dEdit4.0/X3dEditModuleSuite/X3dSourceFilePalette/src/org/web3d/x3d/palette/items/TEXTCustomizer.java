/*
Copyright (c) 1995-2021 held by the author(s) .  All rights reserved.
 
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
 
 * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer
      in the documentation and/or other materials provided with the
      distribution.
 * Neither the names of the Naval Postgraduate School (NPS)
      Modeling Virtual Environments and Simulation (MOVES) Institute
      (http://www.nps.edu and https://MovesInstitute.nps.edu)
      nor the names of its contributors may be used to endorse or
      promote products derived from this software without specific
      prior written permission.
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
 */

package org.web3d.x3d.palette.items;

import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.JTextComponent;
import org.openide.util.HelpCtx;
import static org.web3d.x3d.palette.X3DPaletteUtilities.escapeXmlLessThanCharacters;

/**
 * TEXTCustomizer.java
 * Created on August 16, 2007, 10:49 AM
 *
 * MOVES Institute
 * Naval Postgraduate School, Monterey, CA, USA
 * www.nps.edu
 *
 * @author Mike Bailey, Don Brutzman
 * @version $Id$
 */

// TODO string table row deletion doesn't work after first deletion...

public class TEXTCustomizer extends BaseCustomizer
{
  private final TEXT text;
  private final JTextComponent target;
  private final UrlExpandableList2 urlExpandableList2 = new UrlExpandableList2();
  
  /** Creates new form TEXTCustomizer */
  public TEXTCustomizer(TEXT text, JTextComponent target)
  {
    super(text);
    this.text = text;
    this.target = target;
                              
    HelpCtx.setHelpIDString(this, "TEXT_ELEM_HELPID");   
    
    initComponents();

    lengthTF.setText(text.getLength());
    maxExtentTF.setText(text.getMaxExtent());
    solidCB.setSelected(text.isSolid());

    inititializeStringTable();

        insertCommasCheckBox.setSelected(text.isInsertCommas());
    insertLineBreaksCheckBox.setSelected(text.isInsertLineBreaks());
  }
    private void inititializeStringTable()
    {
        stringTable.setTitle("string array");
        stringTable.setColumnTitles(new String[]
        {
            "#","string values appear on separate lines"
        });
        stringTable.setHeaderTooltip("Single or multiple string values to render as flat text in X3D scene");
        stringTable.setColumnToolTips(new String[]{"index","array of quoted SFString values"});
        stringTable.setNewRowData(new Object[]
        {
            "",""
        });
        stringTable.setTextAlignment(JLabel.TRAILING);
        stringTable.getTable().setRowHeight(16);
        stringTable.doIndexInFirstColumn(true);
        stringTable.setBoldColumn(1);
        stringTable.setDataStringBased(true);
        stringTable.setData(text.getStringArray());

        // apparently the following has to come after setting data
        stringTable.getTable().getColumnModel().getColumn(0).setPreferredWidth(500);
    }

  private void newRow(String value)
  {
    JTable tab = stringTable.getTable();
    DefaultTableModel mod = (DefaultTableModel)tab.getModel();
    mod.addRow(new String[]{value});
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        dEFUSEpanel1 = getDEFUSEpanel();
        solidLabel = new javax.swing.JLabel();
        solidCB = new javax.swing.JCheckBox();
        lengthLabel = new javax.swing.JLabel();
        lengthTF = new javax.swing.JTextField();
        maxExtentLabel = new javax.swing.JLabel();
        maxExtentTF = new javax.swing.JTextField();
        translationButton = new javax.swing.JButton();
        wiktionaryButton = new javax.swing.JButton();
        wikipediaButton = new javax.swing.JButton();
        stringTable = new org.web3d.x3d.palette.items.ExpandableList();
        insertLineBreaksCheckBox = new javax.swing.JCheckBox();
        appendLabel = new javax.swing.JLabel();
        insertCommasCheckBox = new javax.swing.JCheckBox();
        nodeHintPanel = new javax.swing.JPanel();
        hintLabel = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(dEFUSEpanel1, gridBagConstraints);

        solidLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        solidLabel.setText("solid");
        solidLabel.setToolTipText("Setting solid true means draw only one side of polygons (backface culling on), setting solid false means draw both sides of polygons (backface culling off)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 40, 3, 3);
        add(solidLabel, gridBagConstraints);

        solidCB.setToolTipText("Setting solid true means draw only one side of polygons (backface culling on), setting solid false means draw both sides of polygons (backface culling off)");
        solidCB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(solidCB, gridBagConstraints);

        lengthLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lengthLabel.setText("length");
        lengthLabel.setToolTipText("Array of length values (in local coordinate system) for each individual text string, which are stretched or compressed to fit");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 40, 3, 3);
        add(lengthLabel, gridBagConstraints);

        lengthTF.setToolTipText("Array of length values (in local coordinate system) for each individual text string, which are stretched or compressed to fit");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(lengthTF, gridBagConstraints);

        maxExtentLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        maxExtentLabel.setText("maxExtent");
        maxExtentLabel.setToolTipText("Limits/compresses all text strings if max string length is longer than maxExtent");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 40, 3, 3);
        add(maxExtentLabel, gridBagConstraints);

        maxExtentTF.setToolTipText("Limits/compresses all text strings if max string length is longer than maxExtent");
        maxExtentTF.setMinimumSize(new java.awt.Dimension(80, 20));
        maxExtentTF.setPreferredSize(new java.awt.Dimension(80, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(maxExtentTF, gridBagConstraints);

        translationButton.setText("Google translate");
        translationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                translationButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(translationButton, gridBagConstraints);

        wiktionaryButton.setText("Wiktionary");
        wiktionaryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wiktionaryButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(wiktionaryButton, gridBagConstraints);

        wikipediaButton.setText("Wikipedia");
        wikipediaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wikipediaButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(wikipediaButton, gridBagConstraints);

        stringTable.setToolTipText("Single or multiple string values to render as flat text in X3D scene");
        stringTable.setColumnTitles(new String[] {"string values"});
        stringTable.setPreferredSize(new java.awt.Dimension(500, 200));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(stringTable, gridBagConstraints);

        insertLineBreaksCheckBox.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        insertLineBreaksCheckBox.setText("line feeds");
        insertLineBreaksCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertLineBreaksCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 5;
        add(insertLineBreaksCheckBox, gridBagConstraints);

        appendLabel.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        appendLabel.setText("append:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        add(appendLabel, gridBagConstraints);

        insertCommasCheckBox.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        insertCommasCheckBox.setText("commas,");
        insertCommasCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertCommasCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        add(insertCommasCheckBox, gridBagConstraints);

        nodeHintPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        nodeHintPanel.setLayout(new java.awt.GridBagLayout());

        hintLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        hintLabel.setText("<html><p align='center'><b>Text</b> is a geometry primitive node that must be contained by a <b>Shape</b> node.</p> <p align='center'>String array values (including empty strings) get displayed on separate lines.</p> <p align='center'><b>Text</b> can contain a <b>FontStyle</b> node to control string layout, language and style.</p>");
        hintLabel.setToolTipText("a Shape node can only contain one geometry node");
        hintLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        nodeHintPanel.add(hintLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(nodeHintPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void insertLineBreaksCheckBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_insertLineBreaksCheckBoxActionPerformed
    {//GEN-HEADEREND:event_insertLineBreaksCheckBoxActionPerformed

        // TODO add your handling code here:}//GEN-LAST:event_insertLineBreaksCheckBoxActionPerformed
    }
        private void insertCommasCheckBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_insertCommasCheckBoxActionPerformed
    {//GEN-HEADEREND:event_insertCommasCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_insertCommasCheckBoxActionPerformed

    private void translationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_translationButtonActionPerformed
        urlExpandableList2.launchInBrowser("http://translate.google.com/#auto/en/" + getStringValue());
    }//GEN-LAST:event_translationButtonActionPerformed

    private void wikipediaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wikipediaButtonActionPerformed
        urlExpandableList2.launchInBrowser("http://en.wikipedia.org/wiki/" + getStringValue());
    }//GEN-LAST:event_wikipediaButtonActionPerformed

    private void wiktionaryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wiktionaryButtonActionPerformed
        urlExpandableList2.launchInBrowser("http://en.wiktionary.org/wiki/" + getStringValue());
    }//GEN-LAST:event_wiktionaryButtonActionPerformed
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel appendLabel;
    private org.web3d.x3d.palette.items.DEFUSEpanel dEFUSEpanel1;
    private javax.swing.JLabel hintLabel;
    private javax.swing.JCheckBox insertCommasCheckBox;
    private javax.swing.JCheckBox insertLineBreaksCheckBox;
    private javax.swing.JLabel lengthLabel;
    private javax.swing.JTextField lengthTF;
    private javax.swing.JLabel maxExtentLabel;
    private javax.swing.JTextField maxExtentTF;
    private javax.swing.JPanel nodeHintPanel;
    private javax.swing.JCheckBox solidCB;
    private javax.swing.JLabel solidLabel;
    private org.web3d.x3d.palette.items.ExpandableList stringTable;
    private javax.swing.JButton translationButton;
    private javax.swing.JButton wikipediaButton;
    private javax.swing.JButton wiktionaryButton;
    // End of variables declaration//GEN-END:variables
 
  @Override
  public String getNameKey()
  {
    return "NAME_X3D_TEXT";
  }
  
  private String getStringValue ()
  {
      String result;
      
      if (stringTable.getTable().getSelectedRow() >= 0)
      {
          if           (stringTable.getTable().getModel().getValueAt(stringTable.getTable().getSelectedRow(), 1) != null)
               result = stringTable.getTable().getModel().getValueAt(stringTable.getTable().getSelectedRow(), 1).toString();
          else return ""; // empty strings are legal values, nulls are not
      }
      else
      {
          StringBuilder sb = new StringBuilder();
          String[] stringArray = buildStringArray();
          for (int i = 0; i < stringTable.getRowCount(); i++)
          {
              // not selected highlighted substring since some character escaping needs to occur first
              sb.append(stringArray[i]).append(" ");
          }
          result = sb.toString();
      }
      return result.replace("~"," ").replace("!"," ").replace("#"," ").replace("$"," ").replace("%"," ").replace("^"," ").replace("&"," ")
                   .replace("+"," ").replace("-"," ").replace("="," ").replace("!"," ").replace("\\"," ").replace("/"," ").replace("!"," ")
                   .replace("["," ").replace("]"," ").replace("{"," ").replace("}"," ").replace("("," ").replace(")"," ").replace("<"," ").replace(">"," ")
                   .replace("?"," ").replace(","," ").replace("."," ").replace(";"," ").replace(":"," ").replace("'"," ").replace("\""," ")
                   .trim();
  }

  private String[] buildStringArray()
  {
      int numberRows = stringTable.getTable().getModel().getRowCount();
      String[] valueArray = new String[numberRows];
      for (int row=0; row < numberRows; row++)
      {
          String newValue = new String();
          if            (stringTable.getTable().getModel().getValueAt(row, 1) != null)
          {
              newValue = stringTable.getTable().getModel().getValueAt(row, 1).toString();
          }
          if ((newValue == null) || newValue.trim().isEmpty())
          {
              valueArray[row] = ""; // empty strings are legal values, nulls are not
          }
          else if (checkStringValue (row, newValue))
          {
               valueArray[row] = newValue; // do not apply escapeCharacters()
          }
          else valueArray[row] = ""; // invalid value found, replace with empty
      }
      return valueArray;
  }

  @Override
  public void unloadInput() throws IllegalArgumentException
  {
    unLoadDEFUSE();
    text.setStringArray (buildStringArray());
    text.setLength(lengthTF.getText().trim());
    text.setMaxExtent(maxExtentTF.getText().trim());
    text.setSolid(solidCB.isSelected());
  }
}
